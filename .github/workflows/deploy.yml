name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    # Exclude Android changes from triggering web deployment
    paths-ignore:
      - 'android/**'
      - '.github/workflows/build-android*.yml'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    outputs:
      deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
      build-success: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for rollback capability

      - name: Create deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'github-pages',
              description: 'Deploy to GitHub Pages',
              auto_merge: false,
              required_contexts: []
            });
            core.setOutput('deployment_id', deployment.data.id);
            return deployment.data.id;

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        id: build
        run: ${{ steps.detect-package-manager.outputs.manager }} run build
        env:
          # Production settings
          NEXT_PUBLIC_SITE_URL: https://abstractalgorithms.github.io
          NODE_ENV: production
          # Giscus configuration (these values are safe to be public)
          NEXT_PUBLIC_GISCUS_REPO: abstractalgorithms/abstractalgorithms.github.io
          NEXT_PUBLIC_GISCUS_REPO_ID: R_kgDOKqN8Lg
          NEXT_PUBLIC_GISCUS_CATEGORY: Contact
          NEXT_PUBLIC_GISCUS_CATEGORY_ID: DIC_kwDOKqN8Ls4Cavqc

      - name: Mark deployment as failed on build error
        if: failure() && steps.build.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ steps.create-deployment.outputs.deployment_id }}',
              state: 'failure',
              description: 'Build failed - rollback may be required'
            });

      - name: Upload artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.build-success == 'true'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Mark deployment as successful
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ needs.build.outputs.deployment-id }}',
              state: 'success',
              description: 'Successfully deployed to GitHub Pages',
              environment_url: '${{ steps.deployment.outputs.page_url }}'
            });

      - name: Mark deployment as failed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ needs.build.outputs.deployment-id }}',
              state: 'failure',
              description: 'Deployment failed - rollback recommended'
            });

  # Rollback job (manual trigger)
  rollback:
    if: false  # Only runs when manually triggered
    runs-on: ubuntu-latest
    environment:
      name: github-pages-rollback
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find last successful deployment
        id: find-last-success
        uses: actions/github-script@v7
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'github-pages',
              per_page: 10
            });
            
            for (const deployment of deployments.data) {
              const statuses = await github.rest.repos.listDeploymentStatuses({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id
              });
              
              if (statuses.data.some(status => status.state === 'success')) {
                core.setOutput('rollback_sha', deployment.sha);
                core.setOutput('rollback_id', deployment.id);
                return deployment.sha;
              }
            }
            
            core.setFailure('No successful deployment found for rollback');

      - name: Checkout rollback version
        if: steps.find-last-success.outputs.rollback_sha
        run: |
          git checkout ${{ steps.find-last-success.outputs.rollback_sha }}

      - name: Setup Node for rollback
        if: steps.find-last-success.outputs.rollback_sha
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      - name: Build rollback version
        if: steps.find-last-success.outputs.rollback_sha
        run: |
          npm ci
          npm run build

      - name: Deploy rollback
        if: steps.find-last-success.outputs.rollback_sha
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
