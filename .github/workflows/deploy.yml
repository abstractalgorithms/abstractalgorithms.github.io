name: Deploy Website and Create Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'android/**'
      - '.github/workflows/build-android*.yml'
      - '*.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

permissions:
  contents: write
  pages: write
  id-token: write
  deployments: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: npm ci

      - name: Build with Next.js
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Track deployment for rollback purposes
  track-deployment:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
      deployment-sha: ${{ github.sha }}
      deployment-timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Get timestamp
        id: timestamp
        run: echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Create deployment record
        id: create-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              description: 'Website deployment for ${{ github.sha }}',
              auto_merge: false,
              required_contexts: []
            });
            console.log('Created deployment:', deployment.data.id);
            return deployment.data.id;

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, track-deployment]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ needs.track-deployment.outputs.deployment-id }}',
              state: 'success',
              environment_url: '${{ steps.deployment.outputs.page_url }}',
              description: 'Deployment completed successfully'
            });

      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ needs.track-deployment.outputs.deployment-id }}',
              state: 'failure',
              description: 'Deployment failed'
            });
  # Create GitHub Release for successful deployments
  create-release:
    runs-on: ubuntu-latest
    needs: [deploy, track-deployment]
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release info
        id: release-info
        run: |
          # Generate version based on date and run number
          VERSION="v$(date +'%Y.%m.%d')-${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate release name
          RELEASE_NAME="Website Release $VERSION"
          echo "release-name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          
          # Get commit messages since last release for changelog
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (\`%h\`)" $LAST_TAG..HEAD --no-merges)
            COMMIT_COUNT=$(git rev-list --count $LAST_TAG..HEAD --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (\`%h\`)" --no-merges -10)
            COMMIT_COUNT=$(git rev-list --count HEAD --no-merges | head -10)
          fi
          
          # If no commits, use a default message
          if [ -z "$COMMITS" ]; then
            COMMITS="- Initial deployment or no new commits since last release"
            COMMIT_COUNT=0
          fi
          
          # Get recent contributors
          CONTRIBUTORS=$(git log --pretty=format:"%an" $LAST_TAG..HEAD --no-merges 2>/dev/null | sort | uniq | head -5 | sed 's/^/- @/' | tr '\n' '\n' || echo "- Automated deployment")
          
          # Create comprehensive release notes
          cat > release_notes.md << EOF
          ## 🚀 Website Deployment $VERSION
          
          **📅 Deployed on:** ${{ needs.track-deployment.outputs.deployment-timestamp }}  
          **🔗 Commit:** [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
          **🌍 Environment:** ${{ github.event.inputs.environment || 'production' }}  
          **📊 Changes:** $COMMIT_COUNT new commit(s)
          
          ### 📝 What's New
          
          $COMMITS
          
          ### 👥 Contributors
          
          $CONTRIBUTORS
          
          ### 🔗 Important Links
          - 🌐 [Live Website](https://abstractalgorithms.github.io)
          - 📋 [Deployment Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - 🔄 [Rollback Workflow](https://github.com/${{ github.repository }}/actions/workflows/rollback.yml)
          - 📱 [Android APK Builds](https://github.com/${{ github.repository }}/actions/workflows/build-android-simple.yml)
          
          ### 🛠️ Technical Details
          - **Build Tool:** Next.js with Static Export
          - **Deployment:** GitHub Pages
          - **Build Time:** \$(TZ=UTC date +'%H:%M:%S UTC')
          - **Node Version:** 18.x
          - **Deployment ID:** ${{ needs.track-deployment.outputs.deployment-id }}
          
          ---
          *This release was automatically created by the [deployment workflow](https://github.com/${{ github.repository }}/blob/main/.github/workflows/deploy.yml). If you encounter any issues, please use the rollback workflow or contact the maintainers.*
          EOF
          
          echo "release-notes-file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-info.outputs.version }}
          name: ${{ steps.release-info.outputs.release-name }}
          body_path: ${{ steps.release-info.outputs.release-notes-file }}
          draft: false
          prerelease: false
          generate_release_notes: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on commit
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Try to find an existing commit comment to update
            const comments = await github.rest.repos.listCommentsForCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });
            
            const releaseComment = comments.data.find(comment => 
              comment.body.includes('🚀 Successfully deployed')
            );
            
            const commentBody = `🚀 Successfully deployed to production!
            
            **Release:** [${release.tag_name}](${release.html_url})
            **Live Site:** [abstractalgorithms.github.io](https://abstractalgorithms.github.io)
            **Deployed at:** ${{ needs.track-deployment.outputs.deployment-timestamp }}`;
            
            if (releaseComment) {
              await github.rest.repos.updateCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: releaseComment.id,
                body: commentBody
              });
            } else {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: commentBody
              });
            }

  # Cleanup old releases (keep last 10)
  cleanup-releases:
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    steps:
      - name: Cleanup old releases
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Keep the latest 10 releases, delete older ones
            const releasesToDelete = releases.data.slice(10);
            
            for (const release of releasesToDelete) {
              console.log(`Deleting old release: ${release.tag_name}`);
              try {
                // Delete the release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // Delete the tag
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
              } catch (error) {
                console.log(`Failed to delete release ${release.tag_name}:`, error.message);
              }
            }
