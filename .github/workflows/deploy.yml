name: Deploy Website

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'android/**'
      - '.github/workflows/build-android*.yml'
      - '*.md'
      - 'LICENSE'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: write
  issues: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and deploy job
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    outputs:
      deployment-success: ${{ steps.deployment.outcome == 'success' }}
      build-success: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            public/data
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx', '**/metadata.ts', '**/*.mdx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Build website
        id: build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload artifact
        if: steps.build.outcome == 'success'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

      - name: Deploy to GitHub Pages
        id: deployment
        if: steps.build.outcome == 'success'
        uses: actions/deploy-pages@v4

  # Automatic rollback on failure
  auto-rollback:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: failure() && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: write
      issues: write
    steps:
      - name: Wait for deployment failure confirmation
        run: sleep 30

      - name: Find last successful deployment
        id: find-target
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Finding last successful deployment for rollback...');
            
            try {
              const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                status: 'completed',
                conclusion: 'success',
                per_page: 50
              });
              
              const successfulRun = workflowRuns.data.workflow_runs.find(run => 
                run.name === 'Deploy Website' && 
                run.id !== context.runId &&
                run.conclusion === 'success' &&
                run.head_branch === 'main'
              );
              
              if (successfulRun) {
                console.log(`Found successful deployment: ${successfulRun.head_sha}`);
                core.setOutput('target_sha', successfulRun.head_sha);
                core.setOutput('target_date', successfulRun.created_at);
                return successfulRun.head_sha;
              } else {
                console.log('No successful deployment found');
                core.setOutput('target_sha', '');
                return null;
              }
            } catch (error) {
              console.error('Error finding rollback target:', error);
              core.setOutput('target_sha', '');
              return null;
            }

      - name: Trigger rollback workflow
        if: steps.find-target.outputs.target_sha != ''
        uses: actions/github-script@v7
        with:
          script: |
            const targetSha = '${{ steps.find-target.outputs.target_sha }}';
            
            console.log(`Triggering automatic rollback to ${targetSha}`);
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'rollback.yml',
              ref: 'main',
              inputs: {
                rollback_to: targetSha,
                reason: `Automatic rollback: deployment failed at ${context.sha}`
              }
            });
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Automatic Rollback Triggered - Failed Deployment ${context.sha.substring(0, 7)}`,
              body: `Deployment failed for commit ${context.sha}. Automatic rollback triggered to ${targetSha}.`,
              labels: ['deployment', 'rollback', 'urgent']
            });

      - name: Create failure issue if no rollback possible
        if: steps.find-target.outputs.target_sha == ''
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment Failed - Manual Intervention Required ${context.sha.substring(0, 7)}`,
              body: `Deployment failed for commit ${context.sha}. No previous successful deployment found for rollback. Manual intervention required.`,
              labels: ['deployment', 'bug', 'urgent', 'manual-intervention']
            });
            
            core.setFailed('Deployment failed and no rollback target available');
