name: Rollback Website Deployment

on:
  workflow_dispatch:
    inputs:
      rollback_to:
        description: 'Rollback to (leave empty for last successful deployment)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write

concurrency:
  group: "pages-rollback"
  cancel-in-progress: false

jobs:
  rollback:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find rollback target
        id: find-target
        uses: actions/github-script@v7
        with:
          script: |
            let targetSha = '${{ github.event.inputs.rollback_to }}';
            
            if (!targetSha) {
              // Find last successful deployment
              const deployments = await github.rest.repos.listDeployments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment: 'github-pages',
                per_page: 20
              });
              
              for (const deployment of deployments.data) {
                if (deployment.sha === context.sha) continue; // Skip current
                
                const statuses = await github.rest.repos.listDeploymentStatuses({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
                
                if (statuses.data.some(status => status.state === 'success')) {
                  targetSha = deployment.sha;
                  break;
                }
              }
            }
            
            if (!targetSha) {
              core.setFailed('No rollback target found');
              return;
            }
            
            core.setOutput('target_sha', targetSha);
            console.log(`Rolling back to: ${targetSha}`);

      - name: Create rollback deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.find-target.outputs.target_sha }}',
              environment: 'github-pages',
              description: 'Rollback deployment: ${{ github.event.inputs.reason }}',
              auto_merge: false,
              required_contexts: []
            });
            core.setOutput('deployment_id', deployment.data.id);

      - name: Checkout rollback version
        run: |
          git checkout ${{ steps.find-target.outputs.target_sha }}

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build rollback version
        run: ${{ steps.detect-package-manager.outputs.manager }} run build
        env:
          NEXT_PUBLIC_SITE_URL: https://abstractalgorithms.github.io
          NODE_ENV: production
          NEXT_PUBLIC_GISCUS_REPO: abstractalgorithms/abstractalgorithms.github.io
          NEXT_PUBLIC_GISCUS_REPO_ID: R_kgDOKqN8Lg
          NEXT_PUBLIC_GISCUS_CATEGORY: Contact
          NEXT_PUBLIC_GISCUS_CATEGORY_ID: DIC_kwDOKqN8Ls4Cavqc

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

      - name: Deploy rollback
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Mark rollback as successful
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ steps.create-deployment.outputs.deployment_id }}',
              state: 'success',
              description: 'Rollback completed: ${{ github.event.inputs.reason }}',
              environment_url: '${{ steps.deployment.outputs.page_url }}'
            });

      - name: Mark rollback as failed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ steps.create-deployment.outputs.deployment_id }}',
              state: 'failure',
              description: 'Rollback failed: ${{ github.event.inputs.reason }}'
            });

      - name: Create rollback summary
        if: always()
        run: |
          echo "## 🔄 Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target SHA:** ${{ steps.find-target.outputs.target_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "**Result:** ✅ Website successfully rolled back" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Result:** ❌ Rollback failed" >> $GITHUB_STEP_SUMMARY
          fi
