3:I[4707,[],""]
5:I[6423,[],""]
6:I[981,["8592","static/chunks/common-8c62f917a7bcdbc0.js","3185","static/chunks/app/layout-16ad79b292487b54.js"],"AuthProvider"]
7:I[6142,["8592","static/chunks/common-8c62f917a7bcdbc0.js","3185","static/chunks/app/layout-16ad79b292487b54.js"],"default"]
8:I[917,["7601","static/chunks/app/error-bda01b5f57e20280.js"],"default"]
9:I[5618,["9160","static/chunks/app/not-found-c11dcb3d9f7cce17.js"],"default"]
4:["slug","multi-agent-systems-in-practice","d"]
0:["vTxBMrH8lyBS_1tEjJ3qf",[[["",{"children":["posts",{"children":[["slug","multi-agent-systems-in-practice","d"],{"children":["__PAGE__?{\"slug\":\"multi-agent-systems-in-practice\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["slug","multi-agent-systems-in-practice","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/275ed64cc4367444.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/c87abb19956d36f2.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"WebSite\",\"name\":\"Abstract Algorithms\",\"description\":\"A comprehensive blog about algorithms, data structures, system design, and software engineering best practices\",\"url\":\"https://abstractalgorithms.github.io\",\"potentialAction\":{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https://abstractalgorithms.github.io/posts/{search_term_string}\"},\"query-input\":\"required name=search_term_string\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Abstract Algorithms\",\"url\":\"https://abstractalgorithms.github.io\"}}"}}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","meta",null,{"name":"theme-color","content":"#00D885"}],["$","meta",null,{"name":"google-site-verification","content":"D5v1M3nD8oO9DNaZKujCwBLNNqf35CTJo114uv8yMNU"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-VZR168MHE2"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n            window.dataLayer = window.dataLayer || [];\n            function gtag(){dataLayer.push(arguments);}\n            gtag('js', new Date());\n            gtag('config', 'G-VZR168MHE2');\n          "}}]]}],["$","body",null,{"className":"__className_e8ce0c","children":["$","$L6",null,{"children":["$","$L7",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$8","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$L9",null,{}],"notFoundStyles":[]}]}]}]}]]}]],null],null],["$La",null]]]]
b:I[2972,["8592","static/chunks/common-8c62f917a7bcdbc0.js","333","static/chunks/app/posts/%5Bslug%5D/page-5b41db2b1c3444aa.js"],""]
c:I[825,["8592","static/chunks/common-8c62f917a7bcdbc0.js","333","static/chunks/app/posts/%5Bslug%5D/page-5b41db2b1c3444aa.js"],"default"]
d:I[5878,["8592","static/chunks/common-8c62f917a7bcdbc0.js","333","static/chunks/app/posts/%5Bslug%5D/page-5b41db2b1c3444aa.js"],"Image"]
e:I[7827,["8592","static/chunks/common-8c62f917a7bcdbc0.js","333","static/chunks/app/posts/%5Bslug%5D/page-5b41db2b1c3444aa.js"],"default"]
f:I[7179,["8592","static/chunks/common-8c62f917a7bcdbc0.js","333","static/chunks/app/posts/%5Bslug%5D/page-5b41db2b1c3444aa.js"],"default"]
15:I[9798,["8592","static/chunks/common-8c62f917a7bcdbc0.js","333","static/chunks/app/posts/%5Bslug%5D/page-5b41db2b1c3444aa.js"],"default"]
10:T121e,<p>Agentic software development is redefining how we build applications by leveraging <strong>autonomous agents</strong>‚Äîself-directed programs powered by large language models (LLMs) that can reason, plan, and act based on context.</p>
<p>In this blog, we'll walk through building a <strong>custom incident handling agent</strong>, a real-world example that showcases the power of agentic systems to monitor, diagnose, and react to incidents in production environments.</p>
<hr>
<h2>ü§ñ What is Agentic Software Development?</h2>
<p>Agentic software treats LLMs not just as passive tools (e.g., summarizers), but as active <strong>decision-making components</strong>. These agents:</p>
<ul>
<li>Perceive their environment (through tools like APIs)</li>
<li>Maintain memory and context</li>
<li>Use reasoning chains (e.g., ReAct or Chain-of-Thought)</li>
<li>Take actions autonomously (e.g., trigger alerts, write to databases, create Jira tickets)</li>
</ul>
<hr>
<h2>üß† Use Case: Custom Incident Handling Agent</h2>
<h3>üéØ Problem</h3>
<p>DevOps teams often face alert fatigue. A typical on-call engineer receives hundreds of alerts, most of which are false positives, duplicates, or non-actionable.</p>
<h3>üí° Solution</h3>
<p>Build an LLM-powered agent that:</p>
<ol>
<li>Monitors alert sources (e.g., Prometheus, Datadog)</li>
<li>Classifies and summarizes incidents</li>
<li>Diagnoses the root cause using logs or metrics</li>
<li>Notifies the correct team with actionable insights</li>
<li>(Optional) Auto-remediates common issues</li>
</ol>
<hr>
<h2>üèóÔ∏è Architecture Overview</h2>
<pre><code class="language-plaintext">[ Alert Source ] ---> [ Incident Agent ] ---> [ Notification / Ticket / Remediation ]
                          |
                 +--------+---------+
                 | Memory + Logs    |
                 | External Tools   |
                 +------------------+
Agent Runtime: LangChain, OpenAI Function calling

Tools: API access to logs (e.g., ELK), metrics, ticketing (e.g., Jira)

Memory: Conversation history + prior resolutions (e.g., Redis or vector DB)
</code></pre>
<p>üõ†Ô∏è Step-by-Step: Building the Agent</p>
<ol>
<li>Setup LangChain Agent</li>
</ol>
<pre><code class="language-python">from langchain.agents import initialize_agent
from langchain.chat_models import ChatOpenAI

llm = ChatOpenAI(model="gpt-4")
agent = initialize_agent(llm=llm, tools=[your_tool_list], agent_type="openai-functions")
</code></pre>
<ol start="2">
<li>Define Tools for the Agent</li>
</ol>
<pre><code class="language-python">from langchain.tools import Tool

def search_logs(query):
    # Connect to logging platform (e.g., ELK or Datadog)
    return perform_log_search(query)

tools = [
    Tool(name="LogSearch", func=search_logs, description="Search logs for given query"),
    Tool(name="CreateTicket", func=create_jira_ticket, description="Create a ticket in Jira")
]
</code></pre>
<ol start="3">
<li>Add Memory for Incident Context</li>
</ol>
<pre><code class="language-python">from langchain.memory import ConversationBufferMemory
memory = ConversationBufferMemory(return_messages=True)
</code></pre>
<ol start="4">
<li>Prompt Engineering</li>
</ol>
<pre><code class="language-python">prompt = """
You are an incident handling agent.
1. Summarize alerts.
2. Search logs for root cause.
3. Create a detailed summary.
4. Notify or trigger remediation.
"""
</code></pre>
<ol start="5">
<li>Run the Agent Loop</li>
</ol>
<pre><code class="language-python">response = agent.run("There are multiple CPU spike alerts in region-us-east")
print(response)
</code></pre>
<p>‚úÖ Example Output</p>
<pre><code class="language-diff">Incident Summary:
- Multiple CPU spikes detected across 3 hosts.
- Logs indicate a deployment at 12:05 UTC may have caused the surge.
- Recommend scaling down service B temporarily.
- Jira ticket #INC-456 created for SRE team.
</code></pre>
<p>üîê Security and Safety</p>
<ul>
<li>Validate actions: Only allow certain APIs to be called autonomously</li>
<li>Use human-in-the-loop for sensitive remediations</li>
<li>Log all decisions taken by the agent for auditability</li>
</ul>
<p>üöÄ Final Thoughts</p>
<p>Agentic software enables a leap in automation by introducing reasoning and contextual intelligence to our systems. This custom incident handling agent is just the beginning. You can extend it with:</p>
<ul>
<li>Feedback loops for learning from past incidents</li>
<li>Real-time dashboards</li>
<li>ChatOps integration (e.g., Slack)</li>
</ul>
<p>Stay tuned for a follow-up post where we build a fully autonomous agent with recovery scripts and risk scoring.</p>
11:T412,<p>This post introduces the core concepts of Large Language Models (LLMs) and software agents, which are foundational to building agentic systems.</p>
<h2>What is an LLM?</h2>
<ul>
<li>A Large Language Model (LLM) is a neural network trained on vast text data to generate and understand human language.</li>
<li>Examples: OpenAI GPT-4, Anthropic Claude, Google Gemini, Meta Llama.</li>
</ul>
<h2>What is an Agent?</h2>
<ul>
<li>An agent is a program that can perceive its environment, reason, and take actions to achieve goals.</li>
<li>In AI, agents can be rule-based, learning-based, or powered by LLMs.</li>
</ul>
<h2>Why Combine LLMs and Agents?</h2>
<ul>
<li>LLMs provide reasoning, context, and language understanding.</li>
<li>Agents provide autonomy, memory, and tool use.</li>
</ul>
<h2>Key Concepts</h2>
<ul>
<li>Perception, memory, planning, action, feedback loops.</li>
<li>Prompt engineering and tool integration.</li>
</ul>
<hr>
<p><em>Next: See our post on multi-agent systems for more advanced agentic architectures.</em></p>
12:T1882,<h1>Little's Law: The Foundation of Queueing and System Performance</h1>
<h2>Introduction</h2>
<p>Little's Law is a fundamental principle in queueing theory and system performance analysis. It provides a simple yet powerful relationship that governs how items flow through any stable system‚Äîwhether it's customers in a bakery, requests in a web server, or tasks in a distributed pipeline.</p>
<p>This article will help you:</p>
<ul>
<li>Understand the intuition and math behind Little's Law</li>
<li>Apply it to real-world engineering scenarios</li>
<li>Use it for capacity planning, performance optimization, and system design</li>
</ul>
<hr>
<h2>What is Little's Law?</h2>
<p>Little's Law describes the relationship between:</p>
<ul>
<li><strong>L</strong>: Average number of items in the system (queue length)</li>
<li><strong>Œª</strong>: Average arrival rate (items per unit time)</li>
<li><strong>W</strong>: Average time an item spends in the system (wait + service)</li>
</ul>
<p>The formula is:</p>
<pre><code>L = Œª √ó W
</code></pre>
<p>This means: <strong>The average number of items in a stable system equals the arrival rate times the average time each item spends in the system.</strong></p>
<hr>
<h2>Why Does Little's Law Matter?</h2>
<ul>
<li><strong>Predict System Behavior</strong>: Know any two variables, calculate the third</li>
<li><strong>Optimize Resource Allocation</strong>: Right-size your system for demand</li>
<li><strong>Analyze Bottlenecks</strong>: Find and fix performance limits</li>
<li><strong>Set Realistic SLAs</strong>: Base agreements on math, not guesswork</li>
</ul>
<hr>
<h2>Intuition: The Bakery Analogy</h2>
<p>Imagine a busy bakery:</p>
<ul>
<li>On average, 10 customers are in the shop (L = 10)</li>
<li>Each spends 5 minutes inside (W = 5)</li>
<li>New customers arrive at 120 per hour (Œª = 120/hour = 2/minute)</li>
</ul>
<p>Using Little's Law:</p>
<ul>
<li>10 = 120 √ó (5/60) ‚Üí 10 = 120 √ó 0.083 = 10 ‚úì</li>
</ul>
<p>This helps the owner balance staff and service to keep wait times low.</p>
<hr>
<h2>Practical Engineering Examples</h2>
<h3>1. Web Server Performance</h3>
<ul>
<li>Server receives 100 requests/sec (Œª = 100)</li>
<li>Average response time is 0.5 sec (W = 0.5)</li>
<li>L = 100 √ó 0.5 = 50 concurrent requests</li>
</ul>
<h3>2. Database Connection Pools</h3>
<ul>
<li>DB receives 200 queries/sec (Œª = 200)</li>
<li>Avg. query time is 0.1 sec (W = 0.1)</li>
<li>L = 200 √ó 0.1 = 20 concurrent connections needed</li>
</ul>
<h3>3. Microservices Architecture</h3>
<ul>
<li>Service processes 500 tasks/min (Œª = 500)</li>
<li>Each task takes 2 min (W = 2)</li>
<li>L = 500 √ó 2 = 1,000 tasks in the system</li>
</ul>
<hr>
<h2>Advanced Example: Throughput, TPS, and Concurrency</h2>
<p>Let's analyze a more complex scenario step-by-step.</p>
<h3>Given:</h3>
<ul>
<li><strong>TPS (Transactions Per Second)</strong> = 200</li>
<li><strong>Each request takes 3 seconds to process</strong></li>
</ul>
<h3>What is Throughput?</h3>
<p>Throughput = requests completed per second.</p>
<h3>Understanding the Problem</h3>
<ul>
<li>200 transactions arrive per second (TPS = 200)</li>
<li>Each takes 3 seconds to process</li>
</ul>
<h3>Key Insight</h3>
<ul>
<li>If the system can process requests in parallel, throughput depends on concurrency</li>
<li>If sequential, throughput is limited by processing time</li>
</ul>
<h4>Case 1: Sequential Processing</h4>
<ul>
<li>Each request takes 3 seconds</li>
<li>In 1 second, system can process 1/3 of a request</li>
<li>Throughput = 1/3 TPS ‚âà 0.333 TPS</li>
</ul>
<h4>Case 2: Parallel Processing</h4>
<ul>
<li>System receives 200 requests/sec, each takes 3 sec</li>
<li>At any moment, 200 √ó 3 = 600 requests are in progress</li>
<li>Throughput is 200 TPS (if system can handle 600 concurrent requests)</li>
</ul>
<h4>Summary Table</h4>
<table>
<thead>
<tr>
<th>Scenario</th>
<th>Throughput (TPS)</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Sequential processing</td>
<td>~0.333 TPS</td>
<td>System can only process 1 request every 3 seconds</td>
</tr>
<tr>
<td>Parallel processing capable</td>
<td>200 TPS</td>
<td>System handles 600 concurrent requests</td>
</tr>
</tbody>
</table>
<h4>Final Notes</h4>
<ul>
<li>If your system can process 200 TPS and each takes 3 sec, it must handle 600 concurrent requests</li>
<li>Throughput is 200 TPS only if concurrency is supported</li>
<li>If not, throughput is limited by processing time</li>
</ul>
<hr>
<h2>How to Use Little's Law in Practice</h2>
<h3>1. Monitoring and Metrics</h3>
<p>Track all three variables:</p>
<ul>
<li><strong>L</strong>: Monitor active connections, pending requests</li>
<li><strong>Œª</strong>: Track incoming request rates</li>
<li><strong>W</strong>: Measure end-to-end response times</li>
</ul>
<h3>2. Capacity Planning</h3>
<p>Use Little's Law for proactive scaling:</p>
<pre><code class="language-javascript">// Example capacity calculation
const targetResponseTime = 0.2; // 200ms SLA
const expectedLoad = 1000; // requests/second
const requiredCapacity = expectedLoad * targetResponseTime; // 200 concurrent requests
</code></pre>
<h3>3. Performance Optimization</h3>
<ul>
<li>Reduce <strong>W</strong>: Optimize code, use caching, improve DB queries</li>
<li>Manage <strong>Œª</strong>: Rate limiting, load balancing, batching</li>
<li>Control <strong>L</strong>: Set connection limits, use circuit breakers</li>
</ul>
<hr>
<h2>Advanced Considerations</h2>
<ul>
<li><strong>System Stability</strong>: Law assumes arrival rate ‚âà departure rate (steady state)</li>
<li><strong>Multiple Service Centers</strong>: Apply to each stage/component</li>
<li><strong>Non-Uniform Distributions</strong>: High variance in service times can impact user experience</li>
</ul>
<hr>
<h2>Conclusion</h2>
<p>Little's Law is more than a mathematical curiosity‚Äîit's a practical tool for system architects and engineers. Whether you're running a bakery or building distributed systems, understanding the relationship between arrival rate, wait time, and queue length is crucial for optimal performance.</p>
<p><strong>Key Takeaway:</strong></p>
<ul>
<li>Measure what matters</li>
<li>Use Little's Law to guide design and scaling</li>
<li>Build systems that scale gracefully under load</li>
</ul>
13:Tbfff,<h1>LLM Engineering Mastery: Part 3 - Production Deployment and Scaling</h1>
<p>In this final part of the LLM Engineering Mastery series, we'll cover everything you need to deploy, scale, and maintain LLM applications in production environments. From infrastructure patterns to monitoring and security, this guide provides the practical knowledge needed for enterprise-grade deployments.</p>
<h2>Infrastructure Patterns for LLM Applications</h2>
<h3>1. Microservices Architecture for LLM Systems</h3>
<pre><code class="language-python">from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from typing import List, Optional
import asyncio
import httpx
from datetime import datetime
import logging

# Data models
class ChatRequest(BaseModel):
    messages: List[dict]
    model: str = "gpt-3.5-turbo"
    temperature: float = 0.7
    max_tokens: int = 1000

class RAGRequest(BaseModel):
    query: str
    collection: str = "default"
    top_k: int = 5

class ChatResponse(BaseModel):
    response: str
    model_used: str
    tokens_used: int
    processing_time: float
    request_id: str

# LLM Service
class LLMService:
    def __init__(self):
        self.app = FastAPI(title="LLM Service", version="1.0.0")
        self.setup_routes()
        self.setup_middleware()
    
    def setup_middleware(self):
        @self.app.middleware("http")
        async def log_requests(request, call_next):
            start_time = datetime.now()
            
            response = await call_next(request)
            
            processing_time = (datetime.now() - start_time).total_seconds()
            
            logging.info(
                "Request processed",
                extra={
                    "method": request.method,
                    "url": str(request.url),
                    "status_code": response.status_code,
                    "processing_time": processing_time
                }
            )
            
            return response
    
    def setup_routes(self):
        @self.app.post("/chat/completions", response_model=ChatResponse)
        async def chat_completion(request: ChatRequest):
            start_time = datetime.now()
            
            try:
                # Route to appropriate model provider
                if request.model.startswith("gpt"):
                    result = await self._call_openai(request)
                elif request.model.startswith("claude"):
                    result = await self._call_anthropic(request)
                else:
                    raise HTTPException(status_code=400, detail="Unsupported model")
                
                processing_time = (datetime.now() - start_time).total_seconds()
                
                return ChatResponse(
                    response=result["content"],
                    model_used=request.model,
                    tokens_used=result["tokens"],
                    processing_time=processing_time,
                    request_id=result["request_id"]
                )
                
            except Exception as e:
                logging.error("Chat completion failed", extra={"error": str(e)})
                raise HTTPException(status_code=500, detail="Internal server error")
        
        @self.app.get("/health")
        async def health_check():
            return {"status": "healthy", "timestamp": datetime.now().isoformat()}
        
        @self.app.get("/models")
        async def list_models():
            return {
                "available_models": [
                    "gpt-3.5-turbo",
                    "gpt-4-turbo", 
                    "claude-3-sonnet",
                    "claude-3-haiku"
                ]
            }
    
    async def _call_openai(self, request: ChatRequest) -> dict:
        # Implementation for OpenAI API calls
        # This would include the robust client from Part 1
        pass
    
    async def _call_anthropic(self, request: ChatRequest) -> dict:
        # Implementation for Anthropic API calls
        pass

# RAG Service
class RAGService:
    def __init__(self, llm_service_url: str):
        self.app = FastAPI(title="RAG Service", version="1.0.0")
        self.llm_service_url = llm_service_url
        self.setup_routes()
    
    def setup_routes(self):
        @self.app.post("/rag/query")
        async def rag_query(request: RAGRequest):
            try:
                # Retrieve relevant documents
                relevant_docs = await self._retrieve_documents(
                    request.query, 
                    request.collection, 
                    request.top_k
                )
                
                # Build context
                context = self._build_context(relevant_docs)
                
                # Generate response using LLM service
                llm_request = ChatRequest(
                    messages=[
                        {
                            "role": "system",
                            "content": "Answer based on the provided context."
                        },
                        {
                            "role": "user", 
                            "content": "Context:\n" + context + "\n\nQuestion: " + request.query
                        }
                    ]
                )
                
                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        self.llm_service_url + "/chat/completions",
                        json=llm_request.dict()
                    )
                    response.raise_for_status()
                    llm_response = response.json()
                
                return {
                    "answer": llm_response["response"],
                    "sources": relevant_docs,
                    "tokens_used": llm_response["tokens_used"]
                }
                
            except Exception as e:
                logging.error("RAG query failed", extra={"error": str(e)})
                raise HTTPException(status_code=500, detail="RAG processing failed")
    
    async def _retrieve_documents(self, query: str, collection: str, top_k: int):
        # Implementation for document retrieval
        # This would use the vector store from Part 2
        pass
    
    def _build_context(self, documents: List[dict]) -> str:
        context_parts = []
        for i, doc in enumerate(documents, 1):
            context_parts.append("Document " + str(i) + ":")
            context_parts.append(doc["content"])
            context_parts.append("")
        return "\n".join(context_parts)

# API Gateway
class APIGateway:
    def __init__(self, llm_service_url: str, rag_service_url: str):
        self.app = FastAPI(title="LLM API Gateway", version="1.0.0")
        self.llm_service_url = llm_service_url
        self.rag_service_url = rag_service_url
        self.setup_routes()
        self.setup_middleware()
    
    def setup_middleware(self):
        # Rate limiting, authentication, etc.
        pass
    
    def setup_routes(self):
        @self.app.post("/v1/chat/completions")
        async def proxy_chat(request: ChatRequest):
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.llm_service_url + "/chat/completions",
                    json=request.dict(),
                    timeout=60.0
                )
                response.raise_for_status()
                return response.json()
        
        @self.app.post("/v1/rag/query")
        async def proxy_rag(request: RAGRequest):
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.rag_service_url + "/rag/query",
                    json=request.dict(),
                    timeout=60.0
                )
                response.raise_for_status()
                return response.json()

# Docker Compose for local development
docker_compose_content = """
version: '3.8'

services:
  llm-service:
    build: ./llm-service
    ports:
      - "8001:8000"
    environment:      - OPENAI_API_KEY=\$\{OPENAI_API_KEY\}
      - ANTHROPIC_API_KEY=\$\{ANTHROPIC_API_KEY\}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  rag-service:
    build: ./rag-service
    ports:
      - "8002:8000"
    environment:
      - LLM_SERVICE_URL=http://llm-service:8000
      - VECTOR_DB_URL=\$\{VECTOR_DB_URL\}
    depends_on:
      - llm-service
      - vector-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build: ./api-gateway
    ports:
      - "8000:8000"
    environment:
      - LLM_SERVICE_URL=http://llm-service:8000
      - RAG_SERVICE_URL=http://rag-service:8000
    depends_on:
      - llm-service
      - rag-service

  vector-db:
    image: chromadb/chroma:latest
    ports:
      - "8003:8000"
    volumes:
      - vector_data:/chroma/chroma

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  vector_data:
"""
</code></pre>
<h3>2. Kubernetes Deployment Configuration</h3>
<pre><code class="language-yaml"># llm-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-service
  labels:
    app: llm-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: llm-service
  template:
    metadata:
      labels:
        app: llm-service
    spec:
      containers:
      - name: llm-service
        image: your-registry/llm-service:latest
        ports:
        - containerPort: 8000
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: openai-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: anthropic-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: llm-service
spec:
  selector:
    app: llm-service
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: llm-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: llm-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: llm-ingress
  annotations:
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.yourdomain.com
    secretName: llm-tls
  rules:
  - host: api.yourdomain.com
    http:
      paths:
      - path: /v1
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80
</code></pre>
<h2>Monitoring and Observability</h2>
<h3>1. Comprehensive Monitoring System</h3>
<pre><code class="language-python">import logging
import time
from prometheus_client import Counter, Histogram, Gauge, start_http_server
from functools import wraps
import structlog
from typing import Any, Callable
import asyncio

# Prometheus metrics
REQUEST_COUNT = Counter(
    'llm_requests_total',
    'Total number of LLM requests',
    ['model', 'endpoint', 'status']
)

REQUEST_DURATION = Histogram(
    'llm_request_duration_seconds',
    'Time spent processing LLM requests',
    ['model', 'endpoint']
)

TOKEN_USAGE = Counter(
    'llm_tokens_total',
    'Total number of tokens processed',
    ['model', 'type']  # type: input/output
)

COST_TRACKING = Counter(
    'llm_cost_total_usd',
    'Total cost in USD',
    ['model', 'provider']
)

ACTIVE_REQUESTS = Gauge(
    'llm_active_requests',
    'Number of currently active requests',
    ['model']
)

ERROR_RATE = Counter(
    'llm_errors_total',
    'Total number of errors',
    ['model', 'error_type']
)

class MetricsCollector:
    def __init__(self):
        self.logger = structlog.get_logger()
    
    def record_request(self, model: str, endpoint: str, status: str):
        """Record a request with its status"""
        REQUEST_COUNT.labels(model=model, endpoint=endpoint, status=status).inc()
    
    def record_duration(self, model: str, endpoint: str, duration: float):
        """Record request duration"""
        REQUEST_DURATION.labels(model=model, endpoint=endpoint).observe(duration)
    
    def record_token_usage(self, model: str, input_tokens: int, output_tokens: int):
        """Record token usage"""
        TOKEN_USAGE.labels(model=model, type='input').inc(input_tokens)
        TOKEN_USAGE.labels(model=model, type='output').inc(output_tokens)
    
    def record_cost(self, model: str, provider: str, cost: float):
        """Record cost"""
        COST_TRACKING.labels(model=model, provider=provider).inc(cost)
    
    def record_error(self, model: str, error_type: str):
        """Record error"""
        ERROR_RATE.labels(model=model, error_type=error_type).inc()
    
    def track_active_request(self, model: str, increment: bool = True):
        """Track active requests"""
        if increment:
            ACTIVE_REQUESTS.labels(model=model).inc()
        else:
            ACTIVE_REQUESTS.labels(model=model).dec()

# Monitoring decorator
def monitor_llm_request(model: str, endpoint: str):
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def async_wrapper(*args, **kwargs) -> Any:
            metrics = MetricsCollector()
            start_time = time.time()
            
            metrics.track_active_request(model, increment=True)
            
            try:
                result = await func(*args, **kwargs)
                
                # Record success metrics
                duration = time.time() - start_time
                metrics.record_request(model, endpoint, 'success')
                metrics.record_duration(model, endpoint, duration)
                
                # Record token usage if available
                if hasattr(result, 'tokens_used'):
                    metrics.record_token_usage(
                        model, 
                        result.input_tokens, 
                        result.output_tokens
                    )
                
                return result
                
            except Exception as e:
                # Record error metrics
                duration = time.time() - start_time
                metrics.record_request(model, endpoint, 'error')
                metrics.record_duration(model, endpoint, duration)
                metrics.record_error(model, type(e).__name__)
                
                # Log structured error
                structlog.get_logger().error(
                    "LLM request failed",
                    model=model,
                    endpoint=endpoint,
                    error=str(e),
                    duration=duration
                )
                
                raise
            
            finally:
                metrics.track_active_request(model, increment=False)
        
        return async_wrapper
    return decorator

# Usage example
class MonitoredLLMClient:
    def __init__(self, model: str):
        self.model = model
        self.metrics = MetricsCollector()
    
    @monitor_llm_request("gpt-3.5-turbo", "chat_completion")
    async def chat_completion(self, messages: list, **kwargs):
        # Your LLM API call implementation
        pass

# Structured logging configuration
def setup_logging():
    structlog.configure(
        processors=[
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.processors.UnicodeDecoder(),
            structlog.processors.JSONRenderer()
        ],
        context_class=dict,
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )

# Health check endpoint with detailed diagnostics
class HealthChecker:
    def __init__(self, llm_client, vector_store):
        self.llm_client = llm_client
        self.vector_store = vector_store
    
    async def comprehensive_health_check(self) -> dict:
        """Perform comprehensive health check"""
        checks = {}
        overall_healthy = True
        
        # Check LLM service connectivity
        try:
            test_response = await self.llm_client.complete([
                {"role": "user", "content": "Health check test"}
            ], max_tokens=5)
            
            checks["llm_service"] = {
                "status": "healthy",
                "response_time": 0.5,  # Calculate actual response time
                "last_check": time.time()
            }
        except Exception as e:
            checks["llm_service"] = {
                "status": "unhealthy",
                "error": str(e),
                "last_check": time.time()
            }
            overall_healthy = False
        
        # Check vector store connectivity
        try:
            # Test vector store query
            test_results = self.vector_store.search("health check", top_k=1)
            
            checks["vector_store"] = {
                "status": "healthy",
                "documents_count": len(test_results),
                "last_check": time.time()
            }
        except Exception as e:
            checks["vector_store"] = {
                "status": "unhealthy", 
                "error": str(e),
                "last_check": time.time()
            }
            overall_healthy = False
        
        # Check system resources
        import psutil
        
        checks["system_resources"] = {
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_percent": psutil.disk_usage('/').percent
        }
        
        # Check if resources are within acceptable limits
        if (checks["system_resources"]["cpu_percent"] > 90 or 
            checks["system_resources"]["memory_percent"] > 90):
            overall_healthy = False
        
        return {
            "status": "healthy" if overall_healthy else "unhealthy",
            "timestamp": time.time(),
            "checks": checks
        }

# Start metrics server
def start_metrics_server(port: int = 8080):
    start_http_server(port)
    print("Metrics server started on port " + str(port))
</code></pre>
<h3>2. Custom Dashboards and Alerting</h3>
<pre><code class="language-python"># Grafana dashboard configuration (JSON)
grafana_dashboard = {
    "dashboard": {
        "title": "LLM Application Monitoring",
        "panels": [
            {
                "title": "Request Rate",
                "type": "graph",
                "targets": [
                    {
                        "expr": "rate(llm_requests_total[5m])",
                        "legendFormat": "\\{\\{model\\}\\} - \\{\\{endpoint\\}\\}"
                    }
                ]
            },
            {
                "title": "Response Time",
                "type": "graph", 
                "targets": [
                    {
                        "expr": "histogram_quantile(0.95, rate(llm_request_duration_seconds_bucket[5m]))",
                        "legendFormat": "95th percentile"
                    },
                    {
                        "expr": "histogram_quantile(0.50, rate(llm_request_duration_seconds_bucket[5m]))",
                        "legendFormat": "50th percentile"
                    }
                ]
            },
            {
                "title": "Error Rate",
                "type": "graph",
                "targets": [
                    {
                        "expr": "rate(llm_errors_total[5m]) / rate(llm_requests_total[5m])",
                        "legendFormat": "Error Rate"
                    }
                ]
            },
            {
                "title": "Token Usage",
                "type": "graph",
                "targets": [
                    {
                        "expr": "rate(llm_tokens_total[5m])",
                        "legendFormat": "\\{\\{type\\}\\} tokens"
                    }
                ]
            },
            {
                "title": "Cost Tracking",
                "type": "singlestat",
                "targets": [
                    {
                        "expr": "sum(llm_cost_total_usd)",
                        "legendFormat": "Total Cost (USD)"
                    }
                ]
            }
        ]
    }
}

# Alerting rules for Prometheus
alerting_rules = """
groups:
- name: llm_application_alerts
  rules:
  - alert: HighErrorRate
    expr: rate(llm_errors_total[5m]) / rate(llm_requests_total[5m]) > 0.1
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "High error rate detected"
      description: "Error rate is \\{\\{ $value | humanizePercentage \\}\\} for the last 5 minutes"

  - alert: HighResponseTime
    expr: histogram_quantile(0.95, rate(llm_request_duration_seconds_bucket[5m])) > 10
    for: 5m
    labels:
      severity: warning
    annotations:
      summary: "High response time detected"
      description: "95th percentile response time is \\{\\{ $value \\}\\}s"

  - alert: ServiceDown
    expr: up{job="llm-service"} == 0
    for: 1m
    labels:
      severity: critical
    annotations:
      summary: "LLM service is down"
      description: "LLM service has been down for more than 1 minute"

  - alert: HighCostBurn
    expr: increase(llm_cost_total_usd[1h]) > 50
    for: 0m
    labels:
      severity: warning
    annotations:
      summary: "High cost burn rate"
      description: "Cost increased by $\\{\\{ $value \\}\\} in the last hour"
"""

# Slack alerting integration
import requests
import json

class SlackAlerter:
    def __init__(self, webhook_url: str, channel: str = "#alerts"):
        self.webhook_url = webhook_url
        self.channel = channel
    
    def send_alert(self, title: str, message: str, severity: str = "warning"):
        """Send alert to Slack"""
        
        color_map = {
            "info": "#36a64f",     # green
            "warning": "#ffaa00",  # orange  
            "critical": "#ff0000"  # red
        }
        
        payload = {
            "channel": self.channel,
            "username": "LLM Monitor",
            "attachments": [
                {
                    "color": color_map.get(severity, "#808080"),
                    "title": title,
                    "text": message,
                    "fields": [
                        {
                            "title": "Severity",
                            "value": severity.upper(),
                            "short": True
                        },
                        {
                            "title": "Timestamp", 
                            "value": time.strftime("%Y-%m-%d %H:%M:%S"),
                            "short": True
                        }
                    ]
                }
            ]
        }
        
        try:
            response = requests.post(
                self.webhook_url,
                data=json.dumps(payload),
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            response.raise_for_status()
        except Exception as e:
            logging.error("Failed to send Slack alert", extra={"error": str(e)})
</code></pre>
<h2>Security and Compliance</h2>
<h3>1. Authentication and Authorization</h3>
<pre><code class="language-python">from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import jwt
from datetime import datetime, timedelta
import hashlib
import secrets
from typing import Optional, List
import redis
import asyncio

class SecurityManager:
    def __init__(self, secret_key: str, redis_client: redis.Redis):
        self.secret_key = secret_key
        self.redis_client = redis_client
        self.security = HTTPBearer()
    
    def create_access_token(self, user_id: str, scopes: List[str]) -> str:
        """Create JWT access token with scopes"""
        to_encode = {
            "sub": user_id,
            "scopes": scopes,
            "exp": datetime.utcnow() + timedelta(hours=24),
            "iat": datetime.utcnow(),
            "type": "access"
        }
        
        encoded_jwt = jwt.encode(to_encode, self.secret_key, algorithm="HS256")
        return encoded_jwt
    
    def create_api_key(self, user_id: str, name: str, scopes: List[str]) -> tuple:
        """Create API key for service-to-service communication"""
        api_key = "ak_" + secrets.token_urlsafe(32)
        api_secret = secrets.token_urlsafe(64)
        
        # Hash the secret for storage
        secret_hash = hashlib.sha256(api_secret.encode()).hexdigest()
        
        # Store in Redis
        key_data = {
            "user_id": user_id,
            "name": name,
            "scopes": ",".join(scopes),
            "secret_hash": secret_hash,
            "created_at": datetime.utcnow().isoformat(),
            "last_used": None
        }
        
        self.redis_client.hset("api_keys:" + api_key, mapping=key_data)
        
        return api_key, api_secret
    
    async def verify_token(self, credentials: HTTPAuthorizationCredentials) -> dict:
        """Verify JWT token"""
        try:
            payload = jwt.decode(
                credentials.credentials, 
                self.secret_key, 
                algorithms=["HS256"]
            )
            
            user_id = payload.get("sub")
            scopes = payload.get("scopes", [])
            
            if user_id is None:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid token"
                )
            
            return {"user_id": user_id, "scopes": scopes}
            
        except jwt.ExpiredSignatureError:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token has expired"
            )
        except jwt.JWTError:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token"
            )
    
    async def verify_api_key(self, api_key: str, api_secret: str) -> dict:
        """Verify API key and secret"""
        key_data = self.redis_client.hgetall("api_keys:" + api_key)
        
        if not key_data:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid API key"
            )
        
        # Verify secret
        secret_hash = hashlib.sha256(api_secret.encode()).hexdigest()
        if secret_hash != key_data[b"secret_hash"].decode():
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid API secret"
            )
        
        # Update last used timestamp
        self.redis_client.hset(
            "api_keys:" + api_key, 
            "last_used", 
            datetime.utcnow().isoformat()
        )
        
        return {
            "user_id": key_data[b"user_id"].decode(),
            "scopes": key_data[b"scopes"].decode().split(",")
        }
    
    def require_scope(self, required_scope: str):
        """Decorator to require specific scope"""
        def decorator(func):
            @wraps(func)
            async def wrapper(*args, **kwargs):
                # Extract auth info from kwargs or dependency injection
                auth_info = kwargs.get("auth_info")
                if not auth_info or required_scope not in auth_info.get("scopes", []):
                    raise HTTPException(
                        status_code=status.HTTP_403_FORBIDDEN,
                        detail="Insufficient permissions"
                    )
                return await func(*args, **kwargs)
            return wrapper
        return decorator

# Rate limiting
class RateLimiter:
    def __init__(self, redis_client: redis.Redis):
        self.redis_client = redis_client
    
    async def is_allowed(
        self, 
        key: str, 
        limit: int, 
        window_seconds: int
    ) -> tuple[bool, dict]:
        """Check if request is allowed under rate limit"""
        
        current_time = int(time.time())
        window_start = current_time - window_seconds
        
        pipe = self.redis_client.pipeline()
        
        # Remove old entries
        pipe.zremrangebyscore(key, 0, window_start)
        
        # Count current requests
        pipe.zcard(key)
        
        # Add current request
        pipe.zadd(key, {str(current_time): current_time})
        
        # Set expiry
        pipe.expire(key, window_seconds)
        
        results = pipe.execute()
        current_requests = results[1]
        
        allowed = current_requests &#x3C; limit
        
        return allowed, {
            "limit": limit,
            "current": current_requests,
            "remaining": max(0, limit - current_requests - 1),
            "reset_time": current_time + window_seconds
        }

# Secure FastAPI application
def create_secure_app() -> FastAPI:
    app = FastAPI(title="Secure LLM API")
    
    redis_client = redis.Redis(host='localhost', port=6379, db=0)
    security_manager = SecurityManager("your-secret-key", redis_client)
    rate_limiter = RateLimiter(redis_client)
    
    @app.middleware("http")
    async def security_middleware(request, call_next):
        # Add security headers
        response = await call_next(request)
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        return response
    
    async def get_current_user(
        credentials: HTTPAuthorizationCredentials = Depends(security_manager.security)
    ):
        return await security_manager.verify_token(credentials)
    
    @app.post("/v1/chat/completions")
    @security_manager.require_scope("llm:chat")
    async def secure_chat_completion(
        request: ChatRequest,
        auth_info: dict = Depends(get_current_user)
    ):
        user_id = auth_info["user_id"]
        
        # Apply rate limiting
        allowed, rate_info = await rate_limiter.is_allowed(
            "user:" + user_id,
            limit=100,  # 100 requests per hour
            window_seconds=3600
        )
        
        if not allowed:
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Rate limit exceeded",
                headers={
                    "X-RateLimit-Limit": str(rate_info["limit"]),
                    "X-RateLimit-Remaining": str(rate_info["remaining"]),
                    "X-RateLimit-Reset": str(rate_info["reset_time"])
                }
            )
        
        # Process the request
        # ... your chat completion logic here
        
        return {"message": "Chat completion processed securely"}
    
    return app
</code></pre>
<h3>2. Data Privacy and Compliance</h3>
<pre><code class="language-python">import hashlib
import hmac
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import json
import asyncio

class DataPrivacyManager:
    def __init__(self, encryption_key: str):
        self.encryption_key = encryption_key.encode()
    
    def anonymize_user_data(self, user_id: str) -> str:
        """Create anonymous user identifier"""
        return hmac.new(
            self.encryption_key,
            user_id.encode(),
            hashlib.sha256
        ).hexdigest()[:16]
    
    def sanitize_conversation(self, messages: List[dict]) -> List[dict]:
        """Remove PII from conversation data"""
        sanitized = []
        
        pii_patterns = [
            r'\b\d{3}-\d{2}-\d{4}\b',  # SSN
            r'\b\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\b',  # Credit card
            r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',  # Email
            r'\b\d{3}-\d{3}-\d{4}\b',  # Phone number
        ]
        
        for message in messages:
            content = message.get("content", "")
            
            # Replace PII patterns with placeholders
            for pattern in pii_patterns:
                content = re.sub(pattern, "[REDACTED]", content)
            
            sanitized.append({
                **message,
                "content": content
            })
        
        return sanitized
    
    def log_data_access(self, user_id: str, data_type: str, purpose: str):
        """Log data access for compliance"""
        access_log = {
            "timestamp": datetime.utcnow().isoformat(),
            "user_id": self.anonymize_user_data(user_id),
            "data_type": data_type,
            "purpose": purpose,
            "access_granted": True
        }
        
        # Store in compliance log (implement your storage mechanism)
        self._store_compliance_log(access_log)
    
    def handle_data_deletion_request(self, user_id: str) -> bool:
        """Handle GDPR/CCPA deletion requests"""
        try:
            # Delete user conversations
            # Delete user preferences
            # Delete user analytics data
            # Update logs to reflect deletion
            
            deletion_log = {
                "timestamp": datetime.utcnow().isoformat(),
                "user_id": self.anonymize_user_data(user_id),
                "action": "data_deletion",
                "status": "completed"
            }
            
            self._store_compliance_log(deletion_log)
            return True
            
        except Exception as e:
            logging.error("Data deletion failed", extra={"error": str(e)})
            return False
    
    def _store_compliance_log(self, log_entry: dict):
        """Store compliance log entry"""
        # Implement your preferred storage mechanism
        # Could be database, file system, or external compliance service
        pass

# Content filtering for safety
class ContentFilter:
    def __init__(self):
        self.harmful_patterns = [
            r'\b(kill|murder|suicide)\b',
            r'\b(bomb|explosive|weapon)\b',
            r'\b(hack|exploit|vulnerability)\b',
            # Add more patterns based on your safety requirements
        ]
    
    async def filter_content(self, content: str) -> tuple[bool, List[str]]:
        """Filter content for harmful patterns"""
        violations = []
        
        for pattern in self.harmful_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                violations.append(pattern)
        
        is_safe = len(violations) == 0
        return is_safe, violations
    
    async def filter_request(self, request: ChatRequest) -> ChatRequest:
        """Filter incoming request"""
        filtered_messages = []
        
        for message in request.messages:
            content = message.get("content", "")
            is_safe, violations = await self.filter_content(content)
            
            if not is_safe:
                # Log the violation
                logging.warning(
                    "Content violation detected",
                    extra={
                        "violations": violations,
                        "content_preview": content[:100]
                    }
                )
                
                # Replace with safe content or reject
                message["content"] = "[Content filtered for safety]"
            
            filtered_messages.append(message)
        
        return ChatRequest(
            **{**request.dict(), "messages": filtered_messages}
        )
</code></pre>
<h2>Scaling Strategies and Performance Optimization</h2>
<h3>1. Caching Strategies</h3>
<pre><code class="language-python">import redis
import json
import hashlib
from typing import Optional, Any
import asyncio

class LLMCache:
    def __init__(self, redis_client: redis.Redis):
        self.redis_client = redis_client
        self.default_ttl = 3600  # 1 hour
    
    def _generate_cache_key(self, messages: List[dict], model: str, **kwargs) -> str:
        """Generate deterministic cache key"""
        # Create a deterministic representation
        cache_data = {
            "messages": messages,
            "model": model,
            **{k: v for k, v in kwargs.items() if k in ["temperature", "max_tokens"]}
        }
        
        # Sort for deterministic ordering
        cache_string = json.dumps(cache_data, sort_keys=True)
        
        # Hash for compact key
        return "llm_cache:" + hashlib.md5(cache_string.encode()).hexdigest()
    
    async def get(self, messages: List[dict], model: str, **kwargs) -> Optional[dict]:
        """Get cached response"""
        cache_key = self._generate_cache_key(messages, model, **kwargs)
        
        try:
            cached_data = self.redis_client.get(cache_key)
            if cached_data:
                return json.loads(cached_data)
        except Exception as e:
            logging.warning("Cache retrieval failed", extra={"error": str(e)})
        
        return None
    
    async def set(
        self, 
        messages: List[dict], 
        model: str, 
        response: dict, 
        ttl: Optional[int] = None,
        **kwargs
    ):
        """Cache response"""
        cache_key = self._generate_cache_key(messages, model, **kwargs)
        ttl = ttl or self.default_ttl
        
        try:
            self.redis_client.setex(
                cache_key,
                ttl,
                json.dumps(response)
            )
        except Exception as e:
            logging.warning("Cache storage failed", extra={"error": str(e)})
    
    async def invalidate_pattern(self, pattern: str):
        """Invalidate cache entries matching pattern"""
        try:
            keys = self.redis_client.keys(pattern)
            if keys:
                self.redis_client.delete(*keys)
        except Exception as e:
            logging.warning("Cache invalidation failed", extra={"error": str(e)})

class CachedLLMClient:
    def __init__(self, llm_client, cache: LLMCache):
        self.llm_client = llm_client
        self.cache = cache
    
    async def complete(self, messages: List[dict], **kwargs) -> dict:
        """Complete with caching"""
        
        # Check cache first
        cached_response = await self.cache.get(messages, self.llm_client.model, **kwargs)
        if cached_response:
            logging.info("Cache hit", extra={"cache_key": "hit"})
            return cached_response
        
        # Call LLM API
        response = await self.llm_client.complete(messages, **kwargs)
        
        # Cache the response
        await self.cache.set(messages, self.llm_client.model, response, **kwargs)
        
        return response

# Connection pooling and load balancing
class LLMLoadBalancer:
    def __init__(self, providers: List[dict]):
        """
        providers: [
            {"name": "openai", "client": openai_client, "weight": 0.7},
            {"name": "anthropic", "client": anthropic_client, "weight": 0.3}
        ]
        """
        self.providers = providers
        self.current_loads = {p["name"]: 0 for p in providers}
    
    async def select_provider(self, request_type: str = "chat") -> dict:
        """Select provider based on load and weights"""
        
        # Calculate weighted scores based on current load
        best_provider = None
        best_score = float('in')
        
        for provider in self.providers:
            current_load = self.current_loads[provider["name"]]
            weight = provider["weight"]
            
            # Score = load / weight (lower is better)
            score = current_load / weight
            
            if score &#x3C; best_score:
                best_score = score
                best_provider = provider
        
        # Update load tracking
        if best_provider:
            self.current_loads[best_provider["name"]] += 1
        
        return best_provider
    
    async def complete_with_load_balancing(self, messages: List[dict], **kwargs) -> dict:
        """Complete request with load balancing"""
        
        provider = await self.select_provider()
        
        try:
            response = await provider["client"].complete(messages, **kwargs)
            return response
        except Exception as e:
            logging.error(
                "Provider failed, attempting fallback",
                extra={"provider": provider["name"], "error": str(e)}
            )
            
            # Try other providers as fallback
            for fallback_provider in self.providers:
                if fallback_provider["name"] != provider["name"]:
                    try:
                        return await fallback_provider["client"].complete(messages, **kwargs)
                    except Exception as fe:
                        logging.error(
                            "Fallback provider failed",
                            extra={"provider": fallback_provider["name"], "error": str(fe)}
                        )
            
            # If all providers fail, raise the original exception
            raise e
        
        finally:
            # Decrease load counter
            self.current_loads[provider["name"]] -= 1

# Async request batching
class RequestBatcher:
    def __init__(self, batch_size: int = 10, max_wait_time: float = 0.1):
        self.batch_size = batch_size
        self.max_wait_time = max_wait_time
        self.pending_requests = []
        self.batch_timer = None
    
    async def add_request(self, request: dict, response_future: asyncio.Future):
        """Add request to batch"""
        self.pending_requests.append({
            "request": request,
            "future": response_future
        })
        
        # Start timer if this is the first request
        if len(self.pending_requests) == 1:
            self.batch_timer = asyncio.create_task(
                self._wait_and_process_batch()
            )
        
        # Process immediately if batch is full
        if len(self.pending_requests) >= self.batch_size:
            if self.batch_timer:
                self.batch_timer.cancel()
            await self._process_batch()
    
    async def _wait_and_process_batch(self):
        """Wait for max_wait_time then process batch"""
        try:
            await asyncio.sleep(self.max_wait_time)
            await self._process_batch()
        except asyncio.CancelledError:
            pass
    
    async def _process_batch(self):
        """Process current batch of requests"""
        if not self.pending_requests:
            return
        
        batch = self.pending_requests.copy()
        self.pending_requests.clear()
        
        # Process batch requests
        try:
            # Implement batch processing logic here
            # This could involve parallel API calls or optimized batch API endpoints
            
            responses = await self._execute_batch([req["request"] for req in batch])
            
            # Resolve futures with responses
            for i, batch_item in enumerate(batch):
                batch_item["future"].set_result(responses[i])
                
        except Exception as e:
            # Reject all futures with the error
            for batch_item in batch:
                batch_item["future"].set_exception(e)
    
    async def _execute_batch(self, requests: List[dict]) -> List[dict]:
        """Execute batch of requests"""
        # Implement parallel execution
        tasks = []
        for request in requests:
            task = asyncio.create_task(self._execute_single_request(request))
            tasks.append(task)
        
        return await asyncio.gather(*tasks)
    
    async def _execute_single_request(self, request: dict) -> dict:
        """Execute single request (implement your LLM client call here)"""
        # This is where you'.format(
            "request": request,
            "future": response_future
        )d call your actual LLM client
        pass
</code></pre>
<h2>Key Takeaways for Part 3</h2>
<ol>
<li><strong>Infrastructure Patterns</strong>: Use microservices architecture with proper service separation</li>
<li><strong>Monitoring is Essential</strong>: Implement comprehensive monitoring with metrics, logging, and alerting</li>
<li><strong>Security First</strong>: Implement authentication, authorization, rate limiting, and content filtering</li>
<li><strong>Performance Optimization</strong>: Use caching, load balancing, and request batching for scale</li>
<li><strong>Compliance Matters</strong>: Handle data privacy, PII protection, and regulatory requirements</li>
</ol>
<h2>Series Conclusion</h2>
<p>Congratulations! You've completed the <strong>LLM Engineering Mastery</strong> series. You now have the practical knowledge to:</p>
<ul>
<li>Select and integrate foundation models effectively</li>
<li>Build advanced RAG systems with proper evaluation</li>
<li>Deploy and scale LLM applications in production</li>
<li>Monitor and maintain enterprise-grade systems</li>
<li>Implement security and compliance best practices</li>
</ul>
<p>The field of LLM engineering is rapidly evolving, but these foundational patterns and practices will serve you well as you build the next generation of AI-powered applications.</p>
<h3>Next Steps</h3>
<ol>
<li><strong>Practice</strong>: Implement these patterns in your own projects</li>
<li><strong>Stay Updated</strong>: Follow LLM research and new model releases</li>
<li><strong>Community</strong>: Join LLM engineering communities and share your experiences</li>
<li><strong>Experiment</strong>: Try new techniques and optimization strategies</li>
<li><strong>Scale Gradually</strong>: Start small and scale based on real usage patterns</li>
</ol>
<hr>
<p><em>This concludes the LLM Engineering Mastery series. Keep building amazing AI applications!</em></p>
14:T8ed1,<h1>LLM Engineering Mastery: Part 2 - Advanced Prompt Engineering and RAG Systems</h1>
<p>Building on the foundation model integration from Part 1, we now dive deep into advanced prompt engineering techniques and Retrieval-Augmented Generation (RAG) systems that can dramatically enhance your LLM applications' capabilities and reliability.</p>
<h2>Advanced Prompt Engineering Techniques</h2>
<h3>1. Few-Shot Learning Patterns</h3>
<p>Few-shot prompting provides examples to guide the model's behavior and output format.</p>
<pre><code class="language-python">class FewShotPromptBuilder:
    def __init__(self):
        self.examples = {}
    
    def add_example(self, category: str, input_text: str, output_text: str):
        """Add an example for few-shot learning"""
        if category not in self.examples:
            self.examples[category] = []
        
        self.examples[category].append({
            "input": input_text,
            "output": output_text
        })
    
    def build_prompt(self, category: str, query: str, max_examples: int = 3) -> str:
        """Build a few-shot prompt with examples"""
        if category not in self.examples:
            return query
        
        examples = self.examples[category][:max_examples]
        
        prompt_parts = [
            "Here are some examples of the expected format:",
            ""
        ]
        
        for i, example in enumerate(examples, 1):
            prompt_parts.extend([
                "Example " + str(i) + ":",
                "Input: " + example["input"],
                "Output: " + example["output"],
                ""
            ])
        
        prompt_parts.extend([
            "Now, please process this input:",
            "Input: " + query,
            "Output:"
        ])
        
        return "\n".join(prompt_parts)

# Usage for code generation
prompt_builder = FewShotPromptBuilder()

# Add examples for Python function generation
prompt_builder.add_example(
    "python_function",
    "Create a function to calculate factorial",
    """def factorial(n):
    if n &#x3C;= 1:
        return 1
    return n * factorial(n - 1)"""
)

prompt_builder.add_example(
    "python_function", 
    "Create a function to check if a string is palindrome",
    """def is_palindrome(s):
    s = s.lower().replace(' ', '')
    return s == s[::-1]"""
)

# Generate prompt for new task
prompt = prompt_builder.build_prompt(
    "python_function",
    "Create a function to find the maximum element in a list"
)
</code></pre>
<h3>2. Chain-of-Thought (CoT) Reasoning</h3>
<p>Chain-of-thought prompting encourages step-by-step reasoning for complex problems.</p>
<pre><code class="language-python">class ChainOfThoughtPrompt:
    def __init__(self):
        self.reasoning_templates = {
            "problem_solving": """Let's solve this step by step:

1. First, I need to understand what the problem is asking
2. Then, I'll identify the key information given
3. Next, I'll determine what approach to use
4. Finally, I'll work through the solution step by step

Problem: {problem}

Step-by-step solution:""",
            
            "code_debugging": """Let me debug this code systematically:

1. First, I'll read through the code to understand its purpose
2. Then, I'll identify potential issues or errors
3. Next, I'll analyze the logic flow
4. Finally, I'll provide the corrected version with explanations

Code to debug: {code}

Debugging analysis:""",
            
            "data_analysis": """Let me analyze this data step by step:

1. First, I'll examine the data structure and format
2. Then, I'll identify patterns and key metrics
3. Next, I'll consider what insights can be drawn
4. Finally, I'll provide conclusions and recommendations

Data: {data}

Analysis:"""
        }
    
    def generate_cot_prompt(self, template_type: str, **kwargs) -> str:
        """Generate a chain-of-thought prompt"""
        if template_type not in self.reasoning_templates:
            raise ValueError("Unknown template type: " + template_type)
        
        return self.reasoning_templates[template_type].format(**kwargs)
    
    def create_custom_cot(self, problem_description: str, steps: list) -> str:
        """Create a custom chain-of-thought prompt"""
        prompt_parts = [
            "Let's approach this systematically:",
            ""
        ]
        
        for i, step in enumerate(steps, 1):
            prompt_parts.append(str(i) + ". " + step)
        
        prompt_parts.extend([
            "",
            "Problem: " + problem_description,
            "",
            "Step-by-step solution:"
        ])
        
        return "\n".join(prompt_parts)

# Usage example
cot = ChainOfThoughtPrompt()

# For complex problem solving
math_prompt = cot.generate_cot_prompt(
    "problem_solving",
    problem="A company's revenue increased by 25% in Q1, decreased by 15% in Q2, and increased by 30% in Q3. If the Q3 revenue was $169,000, what was the initial revenue?"
)

# For code debugging
debug_prompt = cot.generate_cot_prompt(
    "code_debugging",
    code="""def find_average(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

result = find_average([])"""
)
</code></pre>
<h3>3. Tree-of-Thought for Complex Decision Making</h3>
<p>Tree-of-thought explores multiple reasoning paths and evaluates them.</p>
<pre><code class="language-python">class TreeOfThoughtPrompt:
    def __init__(self, llm_client):
        self.client = llm_client
    
    async def generate_thoughts(self, problem: str, num_thoughts: int = 3) -> list:
        """Generate multiple initial thought paths"""
        prompt = """Problem: {problem}

Generate {num_thoughts} different approaches or initial thoughts for solving this problem. 
Format each as:
Thought X: [brief approach description]

Thoughts:""".format(problem=problem, num_thoughts=num_thoughts)
        
        response = await self.client.complete([
            {"role": "user", "content": prompt}
        ], temperature=0.8)
        
        # Parse thoughts from response
        content = response["choices"][0]["message"]["content"]
        thoughts = []
        
        for line in content.split('\n'):
            if line.strip().startswith('Thought'):
                thought = line.split(':', 1)[1].strip() if ':' in line else line.strip()
                thoughts.append(thought)
        
        return thoughts[:num_thoughts]
    
    async def evaluate_thought(self, problem: str, thought: str) -> float:
        """Evaluate the quality/feasibility of a thought"""
        eval_prompt = """Problem: {problem}

Proposed approach: {thought}

Evaluate this approach on a scale of 1-10 considering:
- Feasibility (can it actually work?)
- Efficiency (is it a good use of resources?)
- Completeness (does it address the full problem?)

Provide only a numeric score (1-10):""".format(problem=problem, thought=thought)
        
        response = await self.client.complete([
            {"role": "user", "content": eval_prompt}
        ], temperature=0.1, max_tokens=10)
        
        try:
            score = float(response["choices"][0]["message"]["content"].strip())
            return min(max(score, 1), 10)  # Clamp between 1-10
        except ValueError:
            return 5.0  # Default score if parsing fails
    
    async def expand_thought(self, problem: str, thought: str) -> str:
        """Expand a thought into detailed steps"""
        expand_prompt = """Problem: {problem}

Approach: {thought}

Expand this approach into detailed, actionable steps. Be specific and practical:

Detailed steps:""".format(problem=problem, thought=thought)
        
        response = await self.client.complete([
            {"role": "user", "content": expand_prompt}
        ], temperature=0.3)
        
        return response["choices"][0]["message"]["content"]
    
    async def solve_with_tot(self, problem: str) -> dict:
        """Solve a problem using tree-of-thought approach"""
        # Generate initial thoughts
        thoughts = await self.generate_thoughts(problem)
        
        # Evaluate each thought
        evaluations = []
        for thought in thoughts:
            score = await self.evaluate_thought(problem, thought)
            evaluations.append((thought, score))
        
        # Sort by score and select best thoughts
        evaluations.sort(key=lambda x: x[1], reverse=True)
        best_thoughts = evaluations[:2]  # Top 2 thoughts
        
        # Expand the best thoughts
        expanded_solutions = []
        for thought, score in best_thoughts:
            expanded = await self.expand_thought(problem, thought)
            expanded_solutions.append({
                "approach": thought,
                "score": score,
                "detailed_solution": expanded
            })
        
        return {
            "problem": problem,
            "all_thoughts": evaluations,
            "best_solutions": expanded_solutions
        }

# Usage example
async def main():
    # Assuming you have an LLM client
    tot = TreeOfThoughtPrompt(llm_client)
    
    result = await tot.solve_with_tot(
        "Design a system to handle 1 million concurrent users for a social media platform"
    )
    
    print("Best Solutions:")
    for i, solution in enumerate(result["best_solutions"], 1):
        print("Solution " + str(i) + " (Score: " + str(solution["score"]) + "):")
        print(solution["approach"])
        print(solution["detailed_solution"])
        print("-" * 50)
</code></pre>
<h2>Building Production-Ready RAG Systems</h2>
<h3>1. RAG Architecture and Components</h3>
<pre><code class="language-python">import numpy as np
from typing import List, Dict, Any, Optional
import chromadb
from sentence_transformers import SentenceTransformer
import asyncio

class DocumentChunker:
    def __init__(self, chunk_size: int = 1000, overlap: int = 200):
        self.chunk_size = chunk_size
        self.overlap = overlap
    
    def chunk_text(self, text: str, metadata: dict = None) -> List[dict]:
        """Split text into overlapping chunks"""
        words = text.split()
        chunks = []
        
        for i in range(0, len(words), self.chunk_size - self.overlap):
            chunk_words = words[i:i + self.chunk_size]
            chunk_text = ' '.join(chunk_words)
            
            chunk_metadata = {
                "chunk_index": len(chunks),
                "start_word": i,
                "end_word": i + len(chunk_words),
                **(metadata or {})
            }
            
            chunks.append({
                "content": chunk_text,
                "metadata": chunk_metadata
            })
        
        return chunks
    
    def semantic_chunking(self, text: str, encoder, similarity_threshold: float = 0.8) -> List[dict]:
        """Chunk text based on semantic similarity"""
        sentences = text.split('. ')
        if len(sentences) &#x3C; 2:
            return [{"content": text, "metadata": {"chunk_index": 0}}]
        
        # Encode sentences
        embeddings = encoder.encode(sentences)
        
        chunks = []
        current_chunk = [sentences[0]]
        
        for i in range(1, len(sentences)):
            # Calculate similarity with current chunk
            current_embedding = np.mean([embeddings[j] for j in range(len(current_chunk))], axis=0)
            similarity = np.dot(current_embedding, embeddings[i]) / (
                np.linalg.norm(current_embedding) * np.linalg.norm(embeddings[i])
            )
            
            if similarity > similarity_threshold and len(' '.join(current_chunk)) &#x3C; self.chunk_size:
                current_chunk.append(sentences[i])
            else:
                # Finalize current chunk and start new one
                chunks.append({
                    "content": '. '.join(current_chunk),
                    "metadata": {"chunk_index": len(chunks)}
                })
                current_chunk = [sentences[i]]
        
        # Add final chunk
        if current_chunk:
            chunks.append({
                "content": '. '.join(current_chunk),
                "metadata": {"chunk_index": len(chunks)}
            })
        
        return chunks

class VectorStore:
    def __init__(self, collection_name: str = "documents"):
        self.client = chromadb.Client()
        self.collection = self.client.create_collection(collection_name)
        self.encoder = SentenceTransformer('all-MiniLM-L6-v2')
    
    def add_documents(self, documents: List[dict]):
        """Add documents to the vector store"""
        contents = [doc["content"] for doc in documents]
        metadatas = [doc["metadata"] for doc in documents]
        ids = [str(i) for i in range(len(documents))]
        
        # Generate embeddings
        embeddings = self.encoder.encode(contents).tolist()
        
        self.collection.add(
            embeddings=embeddings,
            documents=contents,
            metadatas=metadatas,
            ids=ids
        )
    
    def search(self, query: str, top_k: int = 5) -> List[dict]:
        """Search for relevant documents"""
        query_embedding = self.encoder.encode([query]).tolist()
        
        results = self.collection.query(
            query_embeddings=query_embedding,
            n_results=top_k
        )
        
        documents = []
        for i in range(len(results["documents"][0])):
            documents.append({
                "content": results["documents"][0][i],
                "metadata": results["metadatas"][0][i],
                "distance": results["distances"][0][i]
            })
        
        return documents

class RAGSystem:
    def __init__(self, llm_client, vector_store: VectorStore):
        self.llm_client = llm_client
        self.vector_store = vector_store
        self.chunker = DocumentChunker()
    
    def ingest_document(self, content: str, metadata: dict = None):
        """Ingest a document into the RAG system"""
        chunks = self.chunker.chunk_text(content, metadata)
        self.vector_store.add_documents(chunks)
    
    async def retrieve_and_generate(
        self, 
        query: str, 
        top_k: int = 5,
        system_prompt: str = None
    ) -> dict:
        """Retrieve relevant documents and generate response"""
        
        # Retrieve relevant documents
        relevant_docs = self.vector_store.search(query, top_k=top_k)
        
        # Build context from retrieved documents
        context_parts = []
        for i, doc in enumerate(relevant_docs, 1):
            context_parts.append("Document " + str(i) + ":")
            context_parts.append(doc["content"])
            context_parts.append("")
        
        context = "\n".join(context_parts)
        
        # Build RAG prompt
        default_system = """You are a helpful assistant that answers questions based on the provided context. 
Use only the information from the context to answer questions. If the answer cannot be found in the context, say so clearly."""
        
        system_message = system_prompt or default_system
        
        user_prompt = """Context:
{context}

Question: {query}

Please provide a detailed answer based on the context above:""".format(
            context=context,
            query=query
        )
        
        # Generate response
        response = await self.llm_client.complete([
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_prompt}
        ])
        
        return {
            "query": query,
            "answer": response["choices"][0]["message"]["content"],
            "sources": relevant_docs,
            "context_used": context
        }
    
    async def conversational_rag(
        self, 
        query: str, 
        conversation_history: List[dict],
        top_k: int = 5
    ) -> dict:
        """RAG with conversation history"""
        
        # Create a comprehensive query including conversation context
        history_context = ""
        if conversation_history:
            recent_history = conversation_history[-3:]  # Last 3 exchanges
            history_parts = []
            for exchange in recent_history:
                if exchange["role"] == "user":
                    history_parts.append("User: " + exchange["content"])
                elif exchange["role"] == "assistant":
                    history_parts.append("Assistant: " + exchange["content"])
            
            history_context = "\n".join(history_parts)
        
        # Enhanced query for better retrieval
        enhanced_query = query
        if history_context:
            enhanced_query = "Previous conversation:\n" + history_context + "\n\nCurrent question: " + query
        
        # Use the enhanced query for retrieval
        relevant_docs = self.vector_store.search(enhanced_query, top_k=top_k)
        
        # Build context
        context_parts = []
        for i, doc in enumerate(relevant_docs, 1):
            context_parts.append("Document " + str(i) + ":")
            context_parts.append(doc["content"])
            context_parts.append("")
        
        context = "\n".join(context_parts)
        
        # Build conversational RAG prompt
        messages = [
            {
                "role": "system", 
                "content": """You are a helpful assistant that answers questions based on provided context and conversation history. 
Use the context and previous conversation to provide coherent, contextual responses."""
            }
        ]
        
        # Add conversation history
        messages.extend(conversation_history[-5:])  # Last 5 messages
        
        # Add current query with context
        current_prompt = """Context:
{context}

Question: {query}

Answer:""".format(context=context, query=query)
        
        messages.append({"role": "user", "content": current_prompt})
        
        response = await self.llm_client.complete(messages)
        
        return {
            "query": query,
            "answer": response["choices"][0]["message"]["content"],
            "sources": relevant_docs,
            "enhanced_query": enhanced_query
        }
</code></pre>
<h3>2. Advanced RAG Techniques</h3>
<h4>Hybrid Search (Keyword + Semantic)</h4>
<pre><code class="language-python">from elasticsearch import Elasticsearch
import numpy as np

class HybridSearchRAG:
    def __init__(self, llm_client, es_host: str = "localhost:9200"):
        self.llm_client = llm_client
        self.es_client = Elasticsearch([es_host])
        self.encoder = SentenceTransformer('all-MiniLM-L6-v2')
        self.index_name = "hybrid_docs"
    
    def create_index(self):
        """Create Elasticsearch index with dense vector support"""
        mapping = {
            "mappings": {
                "properties": {
                    "content": {"type": "text"},
                    "embedding": {
                        "type": "dense_vector",
                        "dims": 384  # all-MiniLM-L6-v2 dimension
                    },
                    "metadata": {"type": "object"}
                }
            }
        }
        
        if self.es_client.indices.exists(index=self.index_name):
            self.es_client.indices.delete(index=self.index_name)
        
        self.es_client.indices.create(index=self.index_name, body=mapping)
    
    def add_document(self, content: str, metadata: dict = None):
        """Add document with both text and vector representation"""
        embedding = self.encoder.encode(content).tolist()
        
        doc = {
            "content": content,
            "embedding": embedding,
            "metadata": metadata or {}
        }
        
        self.es_client.index(index=self.index_name, body=doc)
    
    def hybrid_search(self, query: str, top_k: int = 5, alpha: float = 0.5) -> List[dict]:
        """
        Perform hybrid search combining keyword and semantic search
        alpha: weight for semantic search (1-alpha for keyword search)
        """
        
        # Keyword search
        keyword_query = {
            "query": {
                "match": {
                    "content": query
                }
            },
            "size": top_k * 2  # Get more results for reranking
        }
        
        keyword_results = self.es_client.search(index=self.index_name, body=keyword_query)
        
        # Semantic search
        query_embedding = self.encoder.encode(query).tolist()
        semantic_query = {
            "query": {
                "script_score": {
                    "query": {"match_all": {}},
                    "script": {
                        "source": "cosineSimilarity(params.query_vector, 'embedding') + 1.0",
                        "params": {"query_vector": query_embedding}
                    }
                }
            },
            "size": top_k * 2
        }
        
        semantic_results = self.es_client.search(index=self.index_name, body=semantic_query)
        
        # Combine and rerank results
        combined_scores = {}
        
        # Add keyword scores
        for hit in keyword_results["hits"]["hits"]:
            doc_id = hit["_id"]
            keyword_score = hit["_score"]
            combined_scores[doc_id] = {
                "keyword_score": keyword_score,
                "semantic_score": 0,
                "doc": hit["_source"]
            }
        
        # Add semantic scores
        for hit in semantic_results["hits"]["hits"]:
            doc_id = hit["_id"]
            semantic_score = hit["_score"]
            
            if doc_id in combined_scores:
                combined_scores[doc_id]["semantic_score"] = semantic_score
            else:
                combined_scores[doc_id] = {
                    "keyword_score": 0,
                    "semantic_score": semantic_score,
                    "doc": hit["_source"]
                }
        
        # Calculate final scores and rank
        final_results = []
        for doc_id, scores in combined_scores.items():
            # Normalize scores (simple min-max normalization)
            keyword_normalized = scores["keyword_score"] / 10.0  # Adjust based on your data
            semantic_normalized = (scores["semantic_score"] - 1.0) / 1.0  # Cosine similarity range
            
            final_score = alpha * semantic_normalized + (1 - alpha) * keyword_normalized
            
            final_results.append({
                "content": scores["doc"]["content"],
                "metadata": scores["doc"]["metadata"],
                "final_score": final_score,
                "keyword_score": scores["keyword_score"],
                "semantic_score": scores["semantic_score"]
            })
        
        # Sort by final score and return top k
        final_results.sort(key=lambda x: x["final_score"], reverse=True)
        return final_results[:top_k]
    
    async def query_with_hybrid_search(self, query: str, top_k: int = 5) -> dict:
        """Query using hybrid search and generate response"""
        relevant_docs = self.hybrid_search(query, top_k)
        
        # Build context
        context_parts = []
        for i, doc in enumerate(relevant_docs, 1):
            context_parts.append("Document " + str(i) + " (Score: " + str(round(doc["final_score"], 3)) + "):")
            context_parts.append(doc["content"])
            context_parts.append("")
        
        context = "\n".join(context_parts)
        
        # Generate response
        prompt = """Context:
{context}

Question: {query}

Based on the context above, provide a comprehensive answer:""".format(
            context=context,
            query=query
        )
        
        response = await self.llm_client.complete([
            {"role": "user", "content": prompt}
        ])
        
        return {
            "query": query,
            "answer": response["choices"][0]["message"]["content"],
            "sources": relevant_docs
        }
</code></pre>
<h4>Multi-Query RAG</h4>
<pre><code class="language-python">class MultiQueryRAG:
    def __init__(self, llm_client, vector_store: VectorStore):
        self.llm_client = llm_client
        self.vector_store = vector_store
    
    async def generate_query_variations(self, original_query: str, num_variations: int = 3) -> List[str]:
        """Generate variations of the original query for better retrieval"""
        prompt = """Given the following question, generate {num_variations} different ways to ask the same question. 
These variations should help retrieve more comprehensive information.

Original question: {query}

Generate {num_variations} question variations (one per line):""".format(
            query=original_query,
            num_variations=num_variations
        )
        
        response = await self.llm_client.complete([
            {"role": "user", "content": prompt}
        ], temperature=0.7)
        
        variations = []
        lines = response["choices"][0]["message"]["content"].strip().split('\n')
        
        for line in lines:
            line = line.strip()
            if line and not line.startswith('Original'):
                # Remove numbering if present
                if line[0].isdigit() and '.' in line[:3]:
                    line = line.split('.', 1)[1].strip()
                variations.append(line)
        
        return variations[:num_variations]
    
    async def multi_query_retrieve(
        self, 
        query: str, 
        num_variations: int = 3,
        docs_per_query: int = 3
    ) -> List[dict]:
        """Retrieve documents using multiple query variations"""
        
        # Generate query variations
        query_variations = await self.generate_query_variations(query, num_variations)
        all_queries = [query] + query_variations
        
        # Retrieve documents for each query
        all_docs = []
        seen_content = set()
        
        for q in all_queries:
            docs = self.vector_store.search(q, top_k=docs_per_query)
            
            for doc in docs:
                # Avoid duplicates based on content
                content_hash = hash(doc["content"])
                if content_hash not in seen_content:
                    doc["retrieved_by_query"] = q
                    all_docs.append(doc)
                    seen_content.add(content_hash)
        
        # Sort by relevance score and return top documents
        all_docs.sort(key=lambda x: x["distance"])
        return all_docs[:docs_per_query * len(all_queries)]
    
    async def answer_with_multi_query(self, query: str) -> dict:
        """Answer using multi-query RAG approach"""
        
        # Retrieve using multiple queries
        relevant_docs = await self.multi_query_retrieve(query)
        
        # Build enhanced context
        context_parts = []
        context_parts.append("Retrieved information from multiple search perspectives:")
        context_parts.append("")
        
        for i, doc in enumerate(relevant_docs, 1):
            context_parts.append("Source " + str(i) + " (found via: '" + doc["retrieved_by_query"] + "'):")
            context_parts.append(doc["content"])
            context_parts.append("")
        
        context = "\n".join(context_parts)
        
        # Generate comprehensive response
        prompt = """You have been provided with information retrieved using multiple search approaches for better coverage.

{context}

Original question: {query}

Provide a comprehensive answer that synthesizes information from all the sources:""".format(
            context=context,
            query=query
        )
        
        response = await self.llm_client.complete([
            {"role": "user", "content": prompt}
        ])
        
        return {
            "query": query,
            "answer": response["choices"][0]["message"]["content"],
            "sources": relevant_docs,
            "num_sources": len(relevant_docs)
        }
</code></pre>
<h2>Evaluation and Quality Assurance</h2>
<h3>RAG Evaluation Framework</h3>
<pre><code class="language-python">class RAGEvaluator:
    def __init__(self, llm_client):
        self.llm_client = llm_client
    
    async def evaluate_relevance(self, query: str, retrieved_docs: List[dict]) -> List[float]:
        """Evaluate relevance of retrieved documents to the query"""
        relevance_scores = []
        
        for doc in retrieved_docs:
            prompt = """Evaluate how relevant this document is to the given query on a scale of 1-10.

Query: {query}

Document: {document}

Consider:
- Does the document contain information that helps answer the query?
- How directly related is the content to the query?
- Would this document be useful for someone trying to answer the query?

Provide only a numeric score (1-10):""".format(
                query=query,
                document=doc["content"]
            )
            
            response = await self.llm_client.complete([
                {"role": "user", "content": prompt}
            ], temperature=0.1, max_tokens=5)
            
            try:
                score = float(response["choices"][0]["message"]["content"].strip())
                relevance_scores.append(min(max(score, 1), 10))
            except ValueError:
                relevance_scores.append(5.0)  # Default score
        
        return relevance_scores
    
    async def evaluate_answer_quality(
        self, 
        query: str, 
        generated_answer: str, 
        ground_truth: str = None
    ) -> dict:
        """Evaluate the quality of the generated answer"""
        
        evaluation_criteria = [
            "Accuracy: Is the information factually correct?",
            "Completeness: Does it fully address the query?", 
            "Clarity: Is it easy to understand?",
            "Relevance: Does it stay focused on the query?"
        ]
        
        evaluation_results = {}
        
        for criterion in evaluation_criteria:
            prompt = """Evaluate the following answer based on this criterion: {criterion}

Query: {query}
Answer: {answer}

Rate on a scale of 1-10 and provide a brief explanation.

Format: Score: X/10
Explanation: [brief explanation]""".format(
                criterion=criterion,
                query=query,
                answer=generated_answer
            )
            
            response = await self.llm_client.complete([
                {"role": "user", "content": prompt}
            ], temperature=0.2)
            
            content = response["choices"][0]["message"]["content"]
            
            # Parse score and explanation
            score = 5.0  # default
            explanation = content
            
            if "Score:" in content:
                try:
                    score_line = [line for line in content.split('\n') if 'Score:' in line][0]
                    score = float(score_line.split('Score:')[1].split('/')[0].strip())
                except:
                    pass
            
            criterion_name = criterion.split(':')[0].lower()
            evaluation_results[criterion_name] = {
                "score": score,
                "explanation": explanation
            }
        
        # Calculate overall score
        overall_score = sum(result["score"] for result in evaluation_results.values()) / len(evaluation_results)
        evaluation_results["overall"] = {"score": overall_score}
        
        return evaluation_results
    
    async def evaluate_rag_system(
        self, 
        test_queries: List[dict],  # [{"query": "...", "expected_answer": "..."}]
        rag_system
    ) -> dict:
        """Comprehensive evaluation of RAG system"""
        
        results = {
            "total_queries": len(test_queries),
            "average_relevance": 0,
            "average_quality": 0,
            "detailed_results": []
        }
        
        total_relevance = 0
        total_quality = 0
        
        for test_case in test_queries:
            query = test_case["query"]
            expected = test_case.get("expected_answer", "")
            
            # Get RAG response
            rag_response = await rag_system.retrieve_and_generate(query)
            
            # Evaluate retrieval relevance
            relevance_scores = await self.evaluate_relevance(query, rag_response["sources"])
            avg_relevance = sum(relevance_scores) / len(relevance_scores) if relevance_scores else 0
            
            # Evaluate answer quality
            quality_eval = await self.evaluate_answer_quality(
                query, 
                rag_response["answer"], 
                expected
            )
            
            result = {
                "query": query,
                "answer": rag_response["answer"],
                "relevance_score": avg_relevance,
                "quality_score": quality_eval["overall"]["score"],
                "sources_count": len(rag_response["sources"]),
                "detailed_quality": quality_eval
            }
            
            results["detailed_results"].append(result)
            total_relevance += avg_relevance
            total_quality += quality_eval["overall"]["score"]
        
        results["average_relevance"] = total_relevance / len(test_queries)
        results["average_quality"] = total_quality / len(test_queries)
        
        return results

# Usage example
async def main():
    evaluator = RAGEvaluator(llm_client)
    
    test_queries = [
        {
            "query": "What are the benefits of using Python for data science?",
            "expected_answer": "Python offers libraries like pandas, numpy, excellent community support..."
        },
        {
            "query": "How do you implement a REST API?",
            "expected_answer": "REST APIs can be implemented using frameworks like Flask, FastAPI..."
        }
    ]
    
    evaluation_results = await evaluator.evaluate_rag_system(test_queries, rag_system)
    
    print("Average Relevance Score:", evaluation_results["average_relevance"])
    print("Average Quality Score:", evaluation_results["average_quality"])
</code></pre>
<h2>Key Takeaways for Part 2</h2>
<ol>
<li><strong>Advanced Prompting</strong>: Use few-shot, chain-of-thought, and tree-of-thought techniques for better results</li>
<li><strong>RAG Architecture</strong>: Build robust retrieval systems with proper chunking and vector storage</li>
<li><strong>Hybrid Search</strong>: Combine keyword and semantic search for better retrieval</li>
<li><strong>Multi-Query Approach</strong>: Use query variations to capture more relevant information</li>
<li><strong>Evaluation is Critical</strong>: Implement systematic evaluation for both retrieval and generation quality</li>
</ol>
<h2>What's Next?</h2>
<p>In <strong>Part 3</strong>, we'll focus on production deployment and scaling of LLM applications, covering infrastructure patterns, monitoring, security, and performance optimization strategies.</p>
<p>We'll cover:</p>
<ul>
<li>Infrastructure and deployment patterns</li>
<li>Monitoring and observability for LLM applications</li>
<li>Security, safety, and compliance considerations</li>
<li>Scaling strategies and performance optimization</li>
<li>Cost optimization and resource management</li>
</ul>
<hr>
<p><em>This series provides practical, implementation-focused guidance for engineers building production LLM applications.</em></p>
2:["$","article",null,{"className":"min-h-screen bg-gradient-to-br from-slate-50 via-white to-emerald-50","children":[["$","div",null,{"className":"bg-white/90 backdrop-blur-sm border-b border-emerald-100 shadow-sm","children":["$","div",null,{"className":"bg-white","children":["$","div",null,{"className":"max-w-4xl mx-auto px-6 py-8","children":[["$","nav",null,{"className":"flex items-center space-x-2 text-sm text-gray-600 mb-8","children":[["$","$Lb",null,{"href":"/","className":"hover:text-gray-900 transition-colors","children":"Home"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-chevron-right w-4 h-4","children":[["$","path","mthhwq",{"d":"m9 18 6-6-6-6"}],"$undefined"]}],["$","$Lb",null,{"href":"/posts","className":"hover:text-gray-900 transition-colors","children":"Blog"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-chevron-right w-4 h-4","children":[["$","path","mthhwq",{"d":"m9 18 6-6-6-6"}],"$undefined"]}],["$","$Lb",null,{"href":"/posts?category=Multi-Agent","className":"hover:text-gray-900 transition-colors","children":"Multi Agent"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-chevron-right w-4 h-4","children":[["$","path","mthhwq",{"d":"m9 18 6-6-6-6"}],"$undefined"]}],["$","span",null,{"className":"text-gray-900 font-medium","children":"Multi-Agent Systems: Collaboration and Coordination in Agentic Software"}]]}],["$","h1",null,{"className":"text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight","children":"Multi-Agent Systems: Collaboration and Coordination in Agentic Software"}],["$","div",null,{"className":"flex items-center space-x-6 text-gray-600 mb-8 flex-wrap","children":[["$","div",null,{"className":"flex items-center space-x-2","children":["$","span",null,{"children":["By ","Abstract Algorithms"]}]}],["$","div",null,{"className":"flex items-center space-x-2","children":["$","span",null,{"children":"Jun 21, 2025"}]}],["$","div",null,{"className":"flex items-center space-x-2","children":["$","span",null,{"children":"1 min read"}]}],["$","$Lc",null,{"postId":"a1b2c3d4-multi-agent-001","size":"md","showTrending":true}]]}],["$","div",null,{"className":"mb-8","children":["$","div",null,{"className":"relative aspect-[16/9] rounded-xl overflow-hidden","children":["$","$Ld",null,{"src":"/posts/multi-agent-systems-in-practice/assets/overview.png","alt":"Multi-Agent Systems: Collaboration and Coordination in Agentic Software","fill":true,"className":"object-cover","priority":true}]}]}]]}]}]}],["$","div",null,{"className":"max-w-5xl mx-auto px-6 py-12","children":[["$","div",null,{"className":"bg-white/90 backdrop-blur-sm rounded-2xl border border-slate-200/50 shadow-xl shadow-slate-100/50 overflow-hidden","children":["$","div",null,{"className":"p-8 lg:p-12","children":["$","$Le",null,{"slug":"multi-agent-systems-in-practice"}]}]}],["$","div",null,{"className":"mt-16","children":[["$","h2",null,{"className":"text-3xl font-bold text-slate-900 mb-8 text-center","children":"Related Articles"}],["$","$Lf",null,{"posts":[{"slug":"agentic-software-development-a-custom-incident-handling-agent","postId":"b7e2c1a4-2f3d-4e8a-9c1b-1a2b3c4d5e6f","title":"Getting Started with Agentic Software Development: A Custom Incident Handling Agent","date":"2025-06-24","excerpt":"Learn how to build a custom incident handling agent using LLMs and LangChain. This post introduces the principles of agentic software development and walks through a real-world use case of automating incident response with memory, log search, ticketing, and remediation.","content":"$10","author":"Abstract Algorithms","tags":["Agentic Software","LLM Agents","Incident Management","LangChain","OpenAI","Autonomous Agents"],"categories":[],"readingTime":"3 min read","coverImage":"/posts/agentic-software-development-a-custom-incident-handling-agent/assets/overview.png"},{"slug":"intro-to-langchain-and-langgraph","postId":"a1b2c3d4-langchain-001","title":"Introduction to LangChain and LangGraph: Building Agentic Workflows","date":"2025-06-22","excerpt":"A practical introduction to LangChain and LangGraph, the leading frameworks for building agentic LLM-powered applications.","content":"<p>This post introduces LangChain and LangGraph, two powerful frameworks for building agentic software with LLMs.</p>\n<h2>What is LangChain?</h2>\n<ul>\n<li>An open-source framework for developing applications powered by LLMs and tools.</li>\n<li>Provides abstractions for agents, tools, memory, and chains.</li>\n</ul>\n<h2>What is LangGraph?</h2>\n<ul>\n<li>A framework for building multi-agent and graph-based agentic workflows.</li>\n<li>Enables complex, stateful, and collaborative agent systems.</li>\n</ul>\n<h2>Key Features</h2>\n<ul>\n<li>Tool integration, memory management, agent orchestration, graph workflows.</li>\n<li>Extensible and production-ready.</li>\n</ul>\n<h2>Example Use Cases</h2>\n<ul>\n<li>Autonomous research agents</li>\n<li>Workflow automation</li>\n<li>Multi-agent chat systems</li>\n</ul>\n<hr>\n<p><em>See our other posts for foundational concepts and multi-agent patterns.</em></p>\n","author":"Abstract Algorithms","tags":["LangChain","LangGraph","LLM Agents","Workflows"],"categories":[],"readingTime":"1 min read","coverImage":"/posts/intro-to-langchain-and-langgraph/assets/overview.png"},{"slug":"intro-to-llms-and-agents","postId":"a1b2c3d4-llms-agents-001","title":"Introduction to LLMs and Agents: Foundations for Agentic Software","date":"2025-06-20","excerpt":"A beginner-friendly introduction to Large Language Models (LLMs) and the concept of agents, setting the stage for agentic software development.","content":"$11","author":"Abstract Algorithms","tags":["LLM","Agents","AI","Foundations"],"categories":[],"readingTime":"1 min read","coverImage":"/posts/intro-to-llms-and-agents/assets/overview.png"},{"slug":"little's-law","postId":"7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b","title":"Little's Law: Understanding Queue Performance in Distributed Systems","date":"2024-03-05","excerpt":"Master Little's Law to optimize system performance, predict throughput, and design scalable distributed systems with practical queuing theory.","content":"$12","author":"Abstract Algorithms","tags":["queueing-theory","performance","system-design","mathematics","distributed-systems","scalability"],"categories":[],"readingTime":"5 min read","coverImage":"/posts/little's-law/assets/overview.png"},{"slug":"llm-engineering-mastery-part-3","postId":"2a8f6e4c-7b5d-4e9a-a1c3-6d8e9f0a1b2c","title":"LLM Engineering Mastery: Part 3 - Production Deployment and Scaling","date":"2024-02-10","excerpt":"Part 3 of the LLM Engineering Mastery series: Master production deployment, scaling strategies, monitoring, and security for enterprise-grade LLM applications.","content":"$13","author":"Abstract Algorithms","tags":["llm","production","deployment","scaling","monitoring","security"],"categories":[],"readingTime":"19 min read","coverImage":"/posts/llm-engineering-mastery-part-3/assets/overview.png","series":{"name":"LLM Engineering Mastery","order":3,"total":3,"prev":"/posts/llm-engineering-mastery-part-2/","next":null}},{"slug":"llm-engineering-mastery-part-2","postId":"8e7d5b2c-9f3a-4e1b-8c6d-1a2b3c4d5e6f","title":"LLM Engineering Mastery: Part 2 - Advanced Prompt Engineering and RAG Systems","date":"2024-02-03","excerpt":"Part 2 of the LLM Engineering Mastery series: Master advanced prompt engineering techniques and build production-ready RAG systems for enhanced LLM applications.","content":"$14","author":"Abstract Algorithms","tags":["llm","prompt-engineering","rag","vector-databases","retrieval"],"categories":[],"readingTime":"16 min read","coverImage":"/posts/llm-engineering-mastery-part-2/assets/overview.png","series":{"name":"LLM Engineering Mastery","order":2,"total":3,"prev":"/posts/llm-engineering-mastery-part-1/","next":"/posts/llm-engineering-mastery-part-3/"}}]}]]}],["$","div",null,{"className":"mt-16","children":["$","div",null,{"className":"bg-white/80 backdrop-blur-sm rounded-2xl p-8 border border-slate-200/50 shadow-lg shadow-slate-100/30","children":[["$","h3",null,{"className":"text-2xl font-bold text-slate-900 mb-6","children":"Discussion"}],["$","$L15",null,{}]]}]}]]}],["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"Multi-Agent Systems: Collaboration and Coordination in Agentic Software\",\"description\":\"Explore how multiple agents can collaborate, communicate, and coordinate to solve complex problems in agentic software.\",\"datePublished\":\"2025-06-21\",\"dateModified\":\"2025-06-21\",\"author\":{\"@type\":\"Person\",\"name\":\"Abstract Algorithms\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Abstract Algorithms\",\"url\":\"https://abstractalgorithms.github.io\"},\"url\":\"https://abstractalgorithms.github.io/posts/multi-agent-systems-in-practice\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://abstractalgorithms.github.io/posts/multi-agent-systems-in-practice\"},\"image\":{\"@type\":\"ImageObject\",\"url\":\"https://abstractalgorithms.github.io/posts/multi-agent-systems-in-practice/assets/overview.png\"}}"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Multi-Agent Systems: Collaboration and Coordination in Agentic Software | AbstractAlgorithms"}],["$","meta","3",{"name":"description","content":"Explore how multiple agents can collaborate, communicate, and coordinate to solve complex problems in agentic software."}],["$","meta","4",{"name":"author","content":"AbstractAlgorithms"}],["$","meta","5",{"name":"keywords","content":"algorithms,data structures,system design,software engineering,programming,computer science,performance optimization,big o notation,hash tables,database indexing"}],["$","meta","6",{"name":"creator","content":"AbstractAlgorithms"}],["$","meta","7",{"name":"publisher","content":"AbstractAlgorithms"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","10",{"property":"og:title","content":"Multi-Agent Systems: Collaboration and Coordination in Agentic Software"}],["$","meta","11",{"property":"og:description","content":"Explore how multiple agents can collaborate, communicate, and coordinate to solve complex problems in agentic software."}],["$","meta","12",{"property":"og:type","content":"article"}],["$","meta","13",{"property":"article:published_time","content":"2025-06-21"}],["$","meta","14",{"property":"article:author","content":"Abstract Algorithms"}],["$","meta","15",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","16",{"name":"twitter:title","content":"AbstractAlgorithms"}],["$","meta","17",{"name":"twitter:description","content":"A comprehensive blog about algorithms, data structures, system design, and software engineering best practices"}],["$","link","18",{"rel":"icon","href":"/logo/tab-logo.png","type":"image/png"}],["$","link","19",{"rel":"icon","href":"/favicon.svg","type":"image/svg+xml"}],["$","link","20",{"rel":"icon","href":"/icon.svg","type":"image/svg+xml","sizes":"32x32"}],["$","link","21",{"rel":"apple-touch-icon","href":"/logo/tab-logo.png","type":"image/png","sizes":"180x180"}],["$","link","22",{"rel":"apple-touch-icon","href":"/apple-icon.svg","type":"image/svg+xml","sizes":"180x180"}],["$","meta","23",{"name":"next-size-adjust"}]]
1:null
