"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2358],{62358:function(n,e,r){r.r(e),r.d(e,{default:function(){return l},frontmatter:function(){return t},metadata:function(){return i}});var s=r(57437),a=r(75595);let t=void 0,i={id:"stack-basics-java-20250718",slug:"stack-basics-java",title:"Stack Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the stack data structure, allowed operations, Java implementation, and see where stacks are used in advanced algorithms.",author:"Abstract Algorithms",tags:["stack","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/overview-600x400.jpg"};function c(n){let e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"TLDR:"})," Stacks are a foundational data structure for recursion, parsing, and backtracking. This guide covers stack basics, allowed operations, Java implementation, and links to advanced posts using stacks."]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Navigation:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#what-is-a-stack-",children:"What is a Stack? \uD83D\uDE80"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#how-to-design-a-stack-in-java-",children:"How to Design a Stack in Java \uD83D\uDCBB"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#where-stacks-are-used-",children:"Where Stacks Are Used \uD83E\uDDE9"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,s.jsx)(e.h2,{children:"What is a Stack? \uD83D\uDE80"}),"\n",(0,s.jsx)(e.p,{children:"A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. The last element added is the first to be removed."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Purpose:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Manage function calls (recursion)"}),"\n",(0,s.jsx)(e.li,{children:"Undo operations"}),"\n",(0,s.jsx)(e.li,{children:"Expression parsing"}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{children:"Allowed Operations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"push(x):"})," Add element x to the top"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"pop():"})," Remove and return the top element"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"peek():"})," Return the top element without removing"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"isEmpty():"})," Check if the stack is empty"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"size():"})," Return the number of elements"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{children:"How to Design a Stack in Java \uD83D\uDCBB"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Approach:"}),"\r\nYou can use Java's built-in ",(0,s.jsx)(e.code,{children:"Stack"})," class, or design your own using a linked list or array."]}),"\n",(0,s.jsx)(e.h3,{children:"Using Java's Built-in Stack"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"Stack<Integer> stack = new Stack<>();\r\nstack.push(10);\r\nint top = stack.pop();\n"})}),"\n",(0,s.jsx)(e.h3,{children:"Custom Stack Implementation (Array)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"class MyStack {\r\n    private int[] arr;\r\n    private int top;\r\n    public MyStack(int capacity) {\r\n        arr = new int[capacity];\r\n        top = -1;\r\n    }\r\n    public void push(int x) {\r\n        arr[++top] = x;\r\n    }\r\n    public int pop() {\r\n        return arr[top--];\r\n    }\r\n    public int peek() {\r\n        return arr[top];\r\n    }\r\n    public boolean isEmpty() {\r\n        return top == -1;\r\n    }\r\n    public int size() {\r\n        return top + 1;\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{children:"Where Stacks Are Used \uD83E\uDDE9"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/posts/monotonic-stack-interview-analysis-java",children:"Monotonic Stack: Interview Scenarios, Analysis, and Java Implementation"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/posts/depth-first-search-dfs-interview-analysis-java",children:"DFS: Interview Scenarios, Analysis, and Java Implementation"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/posts/linkedlist-inplace-reversal-interview-analysis-java",children:"Linked List In-place Reversal: Interview Scenarios, Analysis, and Java Implementation"})}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Clarify stack capacity and allowed operations"}),"\n",(0,s.jsx)(e.li,{children:"Draw stack changes for each operation"}),"\n",(0,s.jsx)(e.li,{children:"Explain your approach and edge cases"}),"\n",(0,s.jsx)(e.li,{children:"Practice both built-in and custom implementations"}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Summary:"}),"\r\nStacks are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice implementing stacks in Java to build a strong foundation."]})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},75595:function(n,e,r){r.d(e,{a:function(){return t}});var s=r(2265);let a=s.createContext({});function t(n){let e=s.useContext(a);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}}}]);