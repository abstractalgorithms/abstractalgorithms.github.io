"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5780],{5780:function(n,i,e){e.r(i),e.d(i,{default:function(){return d},frontmatter:function(){return s},metadata:function(){return o}});var r=e(57437),t=e(75595);let s=void 0,o={id:"unionfind-basics-java-20250718",slug:"unionfind-basics-java",title:"Union-Find (Disjoint Set) Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the union-find (disjoint set) data structure, allowed operations, Java implementation, and see where union-find is used in advanced algorithms.",author:"Abstract Algorithms",tags:["union-find","disjoint-set","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/unionfind-overview-600x400.jpg"};function a(n){let i={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"TLDR:"})," Union-Find (Disjoint Set) efficiently manages partitioned sets and supports fast union and find operations, making it ideal for connectivity and grouping problems. This guide covers union-find basics, allowed operations, Java implementation, and links to advanced posts using union-find."]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Navigation:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"#what-is-union-find-",children:"What is Union-Find? \uD83D\uDE80"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"#how-to-design-union-find-in-java-",children:"How to Design Union-Find in Java \uD83D\uDCBB"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"#where-union-find-is-used-",children:"Where Union-Find Is Used \uD83E\uDDE9"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,r.jsx)(i.h2,{children:"What is Union-Find? \uD83D\uDE80"}),"\n",(0,r.jsx)(i.p,{children:"Union-Find (Disjoint Set) is a data structure that keeps track of a set of elements partitioned into disjoint (non-overlapping) subsets. It supports efficient union and find operations, often with path compression and union by rank optimizations."}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Purpose:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Track connected components"}),"\n",(0,r.jsx)(i.li,{children:"Group elements into disjoint sets"}),"\n",(0,r.jsx)(i.li,{children:"Support efficient union and find queries"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{children:"Allowed Operations"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"find(x):"})," Find the representative (root) of the set containing x"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"union(x, y):"})," Merge the sets containing x and y"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"connected(x, y):"})," Check if x and y are in the same set"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"size():"})," Return the number of disjoint sets"]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{children:"How to Design Union-Find in Java \uD83D\uDCBB"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Approach:"}),"\r\nUse an array to track parent pointers and optionally rank/size for optimizations."]}),"\n",(0,r.jsx)(i.h3,{children:"Custom Union-Find Implementation"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"class UnionFind {\r\n    private int[] parent, rank;\r\n    public UnionFind(int n) {\r\n        parent = new int[n];\r\n        rank = new int[n];\r\n        for (int i = 0; i < n; i++) parent[i] = i;\r\n    }\r\n    public int find(int x) {\r\n        if (parent[x] != x) parent[x] = find(parent[x]); // Path compression\r\n        return parent[x];\r\n    }\r\n    public void union(int x, int y) {\r\n        int rootX = find(x), rootY = find(y);\r\n        if (rootX == rootY) return;\r\n        if (rank[rootX] < rank[rootY]) parent[rootX] = rootY;\r\n        else if (rank[rootX] > rank[rootY]) parent[rootY] = rootX;\r\n        else {\r\n            parent[rootY] = rootX;\r\n            rank[rootX]++;\r\n        }\r\n    }\r\n    public boolean connected(int x, int y) {\r\n        return find(x) == find(y);\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{children:"Where Union-Find Is Used \uD83E\uDDE9"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/posts/genai-mastery-series/part-11",children:"Connected Components in Graphs"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/posts/genai-mastery-series/part-12",children:"Kruskal's Minimum Spanning Tree"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/posts/genai-mastery-series/part-10",children:"Grouping and Clustering Problems"})}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Explain path compression and union by rank"}),"\n",(0,r.jsx)(i.li,{children:"Know time/space complexity for operations"}),"\n",(0,r.jsx)(i.li,{children:"Practice both union and find operations"}),"\n",(0,r.jsx)(i.li,{children:"Use union-find for connectivity and grouping problems"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Summary:"}),"\r\nUnion-Find is essential for connectivity and grouping problems. Master the basics, understand allowed operations, and practice implementing union-find in Java to build a strong foundation."]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}={...(0,t.a)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}},75595:function(n,i,e){e.d(i,{a:function(){return s}});var r=e(2265);let t=r.createContext({});function s(n){let i=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}}}]);