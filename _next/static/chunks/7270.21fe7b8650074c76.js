"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7270],{67270:function(e,n,r){r.r(n),r.d(n,{default:function(){return l},frontmatter:function(){return i},metadata:function(){return t}});var s=r(57437),a=r(75595);let i=void 0,t={id:"graph-basics-java-20250718",slug:"graph-basics-java",title:"Graph Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the graph data structure, allowed operations, Java implementation, and see where graphs are used in advanced algorithms.",author:"Abstract Algorithms",tags:["graph","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/graph-overview-600x400.jpg"};function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TLDR:"})," Graphs are versatile data structures for modeling relationships and networks. This guide covers graph basics, allowed operations, Java implementation, and links to advanced posts using graphs."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#what-is-a-graph-",children:"What is a Graph? \uD83D\uDE80"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#how-to-represent-graphs-in-java-",children:"How to Represent Graphs in Java \uD83D\uDCBB"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#where-graphs-are-used-",children:"Where Graphs Are Used \uD83E\uDDE9"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"What is a Graph? \uD83D\uDE80"}),"\n",(0,s.jsx)(n.p,{children:"A graph is a collection of nodes (vertices) and edges (connections) that can represent relationships, networks, and paths. Graphs can be directed or undirected, weighted or unweighted."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Model networks (social, computer, transport)"}),"\n",(0,s.jsx)(n.li,{children:"Represent relationships and dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Enable pathfinding and connectivity analysis"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Allowed Operations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"addNode(x):"})," Add a node to the graph"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"addEdge(u, v):"})," Add an edge between nodes u and v"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"removeNode(x):"})," Remove a node and its edges"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"removeEdge(u, v):"})," Remove an edge"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"neighbors(x):"})," Get adjacent nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"traverse():"})," Visit all nodes (BFS, DFS)"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"How to Represent Graphs in Java \uD83D\uDCBB"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Approach:"}),"\r\nGraphs can be represented using adjacency lists, adjacency matrices, or edge lists. Java provides flexible ways to implement these."]}),"\n",(0,s.jsx)(n.h3,{children:"Adjacency List Representation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Graph {\r\n    private Map<Integer, List<Integer>> adj = new HashMap<>();\r\n    public void addNode(int v) {\r\n        adj.putIfAbsent(v, new ArrayList<>());\r\n    }\r\n    public void addEdge(int u, int v) {\r\n        adj.putIfAbsent(u, new ArrayList<>());\r\n        adj.get(u).add(v);\r\n    }\r\n    public List<Integer> neighbors(int v) {\r\n        return adj.getOrDefault(v, new ArrayList<>());\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{children:"Adjacency Matrix Representation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"int n = 5;\r\nint[][] matrix = new int[n][n];\r\n// matrix[u][v] = 1 means edge from u to v\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Where Graphs Are Used \uD83E\uDDE9"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/depth-first-search-dfs-interview-analysis-java",children:"DFS: Interview Scenarios, Analysis, and Java Implementation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/breadth-first-search-bfs-interview-analysis-java",children:"BFS and Shortest Path Problems"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/genai-mastery-series/part-11",children:"Topological Sorting and Dependency Resolution"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Clarify graph type (directed, undirected, weighted, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"Draw graph diagrams for each operation"}),"\n",(0,s.jsx)(n.li,{children:"Practice both adjacency list and matrix representations"}),"\n",(0,s.jsx)(n.li,{children:"Know time/space complexity for operations"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Summary:"}),"\r\nGraphs are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice representing graphs in Java to build a strong foundation."]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},75595:function(e,n,r){r.d(n,{a:function(){return i}});var s=r(2265);let a=s.createContext({});function i(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);