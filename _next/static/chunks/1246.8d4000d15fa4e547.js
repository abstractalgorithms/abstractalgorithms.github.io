"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1246],{1246:function(e,r,n){n.r(r),n.d(r,{default:function(){return l},frontmatter:function(){return a},metadata:function(){return t}});var i=n(57437),s=n(75595);let a=void 0,t={id:"circularqueue-basics-java-20250718",slug:"circularqueue-basics-java",title:"Circular Queue Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the circular queue data structure, allowed operations, Java implementation, and see where circular queues are used in advanced algorithms.",author:"Abstract Algorithms",tags:["circular-queue","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/circularqueue-overview-600x400.jpg"};function u(e){let r={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"TLDR:"})," Circular queues efficiently use fixed-size buffers for scheduling, buffering, and streaming. This guide covers circular queue basics, allowed operations, Java implementation, and links to advanced posts using circular queues."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Navigation:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#what-is-a-circular-queue-",children:"What is a Circular Queue? \uD83D\uDE80"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#how-to-design-a-circular-queue-in-java-",children:"How to Design a Circular Queue in Java \uD83D\uDCBB"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#where-circular-queues-are-used-",children:"Where Circular Queues Are Used \uD83E\uDDE9"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{children:"What is a Circular Queue? \uD83D\uDE80"}),"\n",(0,i.jsx)(r.p,{children:"A circular queue is a linear data structure that connects the end of the queue back to the front, forming a circle. It efficiently utilizes space in fixed-size buffers and is ideal for scheduling and streaming."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Purpose:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Efficient use of fixed-size buffers"}),"\n",(0,i.jsx)(r.li,{children:"Scheduling and round-robin tasks"}),"\n",(0,i.jsx)(r.li,{children:"Streaming and buffering data"}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{children:"Allowed Operations"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"offer(x):"})," Add element x to the rear"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"poll():"})," Remove and return the front element"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"peek():"})," Return the front element without removing"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"isEmpty():"})," Check if the queue is empty"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"isFull():"})," Check if the queue is full"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"size():"})," Return the number of elements"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{children:"How to Design a Circular Queue in Java \uD83D\uDCBB"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Approach:"}),"\r\nImplement a fixed-size array with front and rear pointers that wrap around using modulo arithmetic."]}),"\n",(0,i.jsx)(r.h3,{children:"Custom Circular Queue Implementation"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'class CircularQueue {\r\n    private int[] arr;\r\n    private int front, rear, size, capacity;\r\n    public CircularQueue(int capacity) {\r\n        arr = new int[capacity];\r\n        this.capacity = capacity;\r\n        front = 0; rear = -1; size = 0;\r\n    }\r\n    public void offer(int x) {\r\n        if (isFull()) throw new RuntimeException("Queue full");\r\n        rear = (rear + 1) % capacity;\r\n        arr[rear] = x;\r\n        size++;\r\n    }\r\n    public int poll() {\r\n        if (isEmpty()) throw new RuntimeException("Queue empty");\r\n        int val = arr[front];\r\n        front = (front + 1) % capacity;\r\n        size--;\r\n        return val;\r\n    }\r\n    public int peek() {\r\n        if (isEmpty()) throw new RuntimeException("Queue empty");\r\n        return arr[front];\r\n    }\r\n    public boolean isEmpty() { return size == 0; }\r\n    public boolean isFull() { return size == capacity; }\r\n    public int size() { return size; }\r\n}\n'})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{children:"Where Circular Queues Are Used \uD83E\uDDE9"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/posts/genai-mastery-series/part-10",children:"Task Scheduling and Round-Robin Algorithms"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/posts/genai-mastery-series/part-4",children:"Streaming and Buffering Data"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/posts/genai-mastery-series/part-7",children:"Fixed-Size Resource Management"})}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Clarify queue capacity and wrap-around logic"}),"\n",(0,i.jsx)(r.li,{children:"Know time/space complexity for operations"}),"\n",(0,i.jsx)(r.li,{children:"Practice both enqueue and dequeue operations"}),"\n",(0,i.jsx)(r.li,{children:"Use circular queues for buffering and scheduling"}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Summary:"}),"\r\nCircular queues are essential for efficient buffering and scheduling. Master the basics, understand allowed operations, and practice implementing circular queues in Java to build a strong foundation."]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},75595:function(e,r,n){n.d(r,{a:function(){return a}});var i=n(2265);let s=i.createContext({});function a(e){let r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}}}]);