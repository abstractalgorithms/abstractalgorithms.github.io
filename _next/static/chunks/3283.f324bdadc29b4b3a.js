"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3283],{3283:function(e,s,n){n.r(s),n.d(s,{default:function(){return a},frontmatter:function(){return t},metadata:function(){return o}});var r=n(57437),i=n(75595);let t=void 0,o={id:"72a4ee58-af98-4a97-a286-620b2e74e32e",slug:"consensus-algorithms-raft-paxos-and-beyond",title:"Consensus Algorithms: Raft, Paxos, and Beyond",date:"2025-06-26",excerpt:"How consensus algorithms like Raft and Paxos work, their fault tolerance properties, and the trade-offs involved in distributed systems.",author:"Abstract Algorithms",tags:["distributed systems","consensus","raft","paxos","fault tolerance"],status:"published",coverImage:"./assets/overview-600x400.jpg"};function l(e){let s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{children:"Consensus Algorithms: Raft, Paxos, and Beyond"}),"\n",(0,r.jsx)(s.p,{children:"Consensus algorithms are the backbone of reliable distributed systems. They ensure that a group of computers (nodes) can agree on a single value or sequence of actions—even when some nodes fail or messages are delayed. This is critical for databases, distributed caches, and any system where consistency matters."}),"\n",(0,r.jsx)(s.h2,{children:"Why Consensus Matters"}),"\n",(0,r.jsx)(s.p,{children:"Imagine a group of friends trying to decide on a restaurant via group chat. Some may be offline, some may send conflicting suggestions, and messages might arrive out of order. Yet, the group needs to agree on one place. Distributed systems face similar challenges—except the stakes are data integrity and system reliability."}),"\n",(0,r.jsx)(s.h2,{children:"The Consensus Problem"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Goal:"}),(0,r.jsx)(s.br,{}),"\n","Ensure all non-faulty nodes agree on the same value, even if some nodes crash or network issues occur."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Key Properties:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Safety:"})," No two nodes decide on different values."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Liveness:"})," Nodes eventually reach a decision."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Fault Tolerance:"})," The system can handle failures up to a certain threshold."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{children:"Paxos: The Classic Approach"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Paxos"})," is a family of protocols introduced by Leslie Lamport. It’s mathematically elegant but notoriously hard to implement and reason about."]}),"\n",(0,r.jsx)(s.h3,{children:"How Paxos Works (Simplified)"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Proposers"})," suggest values."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Acceptors"})," vote on proposals."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Learners"})," learn the chosen value."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"A value is chosen when a majority (quorum) of acceptors agree."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Analogy:"}),(0,r.jsx)(s.br,{}),"\n","Think of a group voting on a proposal. If more than half agree, the decision is made—even if some voters are absent."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Pseudocode (Paxos Proposal Phase):"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"# Proposer sends a proposal with a unique number\r\nsend_prepare(proposal_number)\r\n\r\n# Acceptors respond if proposal_number is highest seen\r\nif proposal_number > highest_seen:\r\n  reply_promise(proposal_number, last_accepted_value)\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Visual Aid Suggestion:"}),(0,r.jsx)(s.br,{}),"\n","A diagram showing proposers, acceptors, and learners with arrows for message flow."]}),"\n",(0,r.jsx)(s.h2,{children:"Raft: Understandable Consensus"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Raft"})," was designed to be easier to understand and implement than Paxos, while providing the same guarantees. It’s widely used in modern systems like etcd and Consul."]}),"\n",(0,r.jsx)(s.h3,{children:"Raft’s Key Components"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Leader Election:"})," One node becomes the leader; others are followers."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Log Replication:"})," Leader receives client requests, appends them to its log, and replicates to followers."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Safety:"})," Ensures all nodes apply the same sequence of operations."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Analogy:"}),(0,r.jsx)(s.br,{}),"\n","A team elects a captain (leader). The captain makes decisions, and everyone follows the same playbook (log)."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Raft Leader Election (Pseudocode):"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"# If follower doesn't hear from leader, it starts an election\r\nif timeout:\r\n  become_candidate()\r\n  send_request_vote(term)\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Visual Aid Suggestion:"}),(0,r.jsx)(s.br,{}),"\n","Timeline showing leader election, log replication, and follower states."]}),"\n",(0,r.jsx)(s.h2,{children:"Comparing Paxos and Raft"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Feature"}),(0,r.jsx)(s.th,{children:"Paxos"}),(0,r.jsx)(s.th,{children:"Raft"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Complexity"})}),(0,r.jsx)(s.td,{children:"High (hard to implement)"}),(0,r.jsx)(s.td,{children:"Lower (designed for clarity)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Adoption"})}),(0,r.jsx)(s.td,{children:"Academic, some production"}),(0,r.jsx)(s.td,{children:"Widely used in industry"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Leader Role"})}),(0,r.jsx)(s.td,{children:"Optional/implicit"}),(0,r.jsx)(s.td,{children:"Explicit leader"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Log Replication"})}),(0,r.jsx)(s.td,{children:"Not specified"}),(0,r.jsx)(s.td,{children:"Built-in"})]})]})]}),"\n",(0,r.jsx)(s.h2,{children:"Fault Tolerance and Quorums"}),"\n",(0,r.jsxs)(s.p,{children:["Both algorithms require a ",(0,r.jsx)(s.strong,{children:"majority (quorum)"})," to make progress. In a cluster of ",(0,r.jsx)(s.code,{children:"N"})," nodes, they can tolerate up to ",(0,r.jsx)(s.code,{children:"(N-1)/2"})," failures."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"5 nodes → can tolerate 2 failures (need 3 to agree)"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{children:"Trade-offs and Challenges"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Performance:"})," Consensus adds coordination overhead, impacting throughput and latency."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Availability:"})," If a majority is unavailable, the system cannot make progress."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Complexity:"})," Paxos is theoretically robust but hard to implement; Raft is simpler but still non-trivial."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{children:"Real-World Use Cases"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Distributed Databases:"})," CockroachDB, etcd, TiKV"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Service Discovery:"})," Consul, ZooKeeper (uses a Paxos variant)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Leader Election:"})," Microservices, container orchestration"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{children:"Summary & Key Takeaways"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Consensus algorithms are essential for reliable distributed systems."}),"\n",(0,r.jsx)(s.li,{children:"Paxos is foundational but complex; Raft is more approachable and widely adopted."}),"\n",(0,r.jsx)(s.li,{children:"Both require a majority of nodes to function correctly."}),"\n",(0,r.jsx)(s.li,{children:"Understanding consensus helps you design and operate resilient systems."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{children:"Practice Questions"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Why is a majority required for consensus in distributed systems?"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"What are the main differences between Paxos and Raft?"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Describe a real-world scenario where consensus is critical."})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"What happens if the leader in Raft fails?"})}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"For deeper dives, see the diagrams and links in the Further Reading section below."})}),"\n",(0,r.jsx)(s.h2,{children:"Further Reading"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://raft.github.io/",children:"The Raft Consensus Algorithm"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://lamport.azurewebsites.net/pubs/paxos-simple.pdf",children:"Paxos Made Simple (Leslie Lamport)"})}),"\n"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},75595:function(e,s,n){n.d(s,{a:function(){return t}});var r=n(2265);let i=r.createContext({});function t(e){let s=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}}}]);