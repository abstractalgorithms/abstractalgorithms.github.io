"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7783],{7783:function(n,e,s){s.r(e),s.d(e,{default:function(){return c},frontmatter:function(){return a},metadata:function(){return l}});var r=s(57437),i=s(75595);let a=void 0,l={id:"7e2b8c1a-2f3d-4b6a-9c1e-8a2b7c3d1e4b",slug:"python-for-java-developers-translating-language-fundamentals-to-python",title:"Python for Java Developers: Translating Language Fundamentals to Python",date:"2025-07-12",excerpt:'"A comprehensive, hands-on guide for Java developers to learn Python basics—syntax, variables, control flow, functions, OOP, collections, exception handling, file I/O, and more—with direct Java-to-Python code comparisons and practical migration tips."',author:"Abstract Algorithms",tags:["python","java","tutorial","guide"],status:"published",coverImage:"./assets/overview-600x400.jpg"};function t(n){let e={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Navigation"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"TL;DR:"}),'\n"A comprehensive, hands-on guide for Java developers to learn Python basics—syntax, variables, control flow, functions, OOP, collections, exception handling, file I/O, and more—with direct Java-to-Python code comparisons and practical migration tips."']}),"\n",(0,r.jsx)(e.h2,{children:"TLDR"}),"\n",(0,r.jsx)(e.p,{children:"This guide helps Java developers quickly learn Python by comparing syntax, variables, control flow, functions, OOP, collections, exception handling, and file I/O side-by-side. Each section provides direct Java-to-Python code comparisons and practical migration tips for a smooth transition."}),"\n",(0,r.jsx)(e.h2,{children:"Navigation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#1-syntax-and-structure",children:"Syntax and Structure"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#2-variables-and-types",children:"Variables and Types"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#3-control-flow",children:"Control Flow"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#4-functions",children:"Functions"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#5-object-oriented-programming-oop",children:"Object-Oriented Programming (OOP)"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#6-collections",children:"Collections"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#7-exception-handling",children:"Exception Handling"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#8-file-io",children:"File I/O"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#9-advanced-topics",children:"Advanced Topics"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#10-migration-tips",children:"Migration Tips"})}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"This guide is designed for Java developers who want to master Python by comparing every major language feature, syntax, and paradigm side-by-side. Each section includes direct code comparisons, practical tips, and migration gotchas."}),"\n",(0,r.jsx)(e.h2,{children:"1. Syntax and Structure"}),"\n",(0,r.jsxs)(e.p,{children:["Python's syntax is concise and readable, making it easy for Java developers to pick up. Unlike Java, Python uses indentation to define code blocks instead of braces ",(0,r.jsx)(e.code,{children:"{}"}),". This section covers basic syntax and how to write simple programs in both languages."]}),"\n",(0,r.jsx)(e.h3,{children:"Hello World"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'print("Hello, World!")\n'})}),"\n",(0,r.jsx)(e.h3,{children:"Indentation and Blocks"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'if (x > 0) {\n    System.out.println("Positive");\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'if x > 0:\n    print("Positive")\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Key Difference:"})," Python uses indentation instead of braces ",(0,r.jsx)(e.code,{children:"{}"}),"."]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"2. Variables and Types"}),"\n",(0,r.jsx)(e.p,{children:"Python is dynamically typed, so you don't need to declare variable types as in Java. This section shows how to declare and check types in both languages, highlighting Python's flexibility and simplicity."}),"\n",(0,r.jsx)(e.h3,{children:"Declaration"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'int a = 5;\nString name = "Alice";\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'a = 5\nname = "Alice"\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Key Difference:"})," Python is dynamically typed; no need to declare types."]}),"\n",(0,r.jsx)(e.h3,{children:"Type Checking"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"System.out.println(a instanceof Integer); // true\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"print(isinstance(a, int)) # True\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"3. Control Flow"}),"\n",(0,r.jsxs)(e.p,{children:["Control flow in Python is straightforward, using ",(0,r.jsx)(e.code,{children:"if"}),", ",(0,r.jsx)(e.code,{children:"elif"}),", and ",(0,r.jsx)(e.code,{children:"else"})," for conditionals, and ",(0,r.jsx)(e.code,{children:"for"}),"/",(0,r.jsx)(e.code,{children:"while"})," loops for iteration. The syntax is simpler than Java, and indentation replaces braces."]}),"\n",(0,r.jsx)(e.h3,{children:"Conditionals"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"if (x > 0) {\n    // ...\n} else if (x < 0) {\n    // ...\n} else {\n    // ...\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"if x > 0:\n    # ...\nelif x < 0:\n    # ...\nelse:\n    # ...\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Loops"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"for (int i = 0; i < 5; i++) {\n    System.out.println(i);\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"for i in range(5):\n    print(i)\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"4. Functions and Methods"}),"\n",(0,r.jsxs)(e.p,{children:["Functions in Python are defined using ",(0,r.jsx)(e.code,{children:"def"}),", and can be passed around as first-class objects. Lambdas provide anonymous functions, similar to Java's lambda expressions, but with simpler syntax."]}),"\n",(0,r.jsx)(e.h3,{children:"Defining Functions"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public int add(int a, int b) {\n    return a + b;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def add(a, b):\n    return a + b\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Lambda Expressions"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"List<Integer> nums = Arrays.asList(1, 2, 3);\nnums.forEach(n -> System.out.println(n));\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"nums = [1, 2, 3]\nlist(map(lambda n: print(n), nums))\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"5. Classes and OOP"}),"\n",(0,r.jsx)(e.p,{children:"Python supports object-oriented programming with classes, inheritance, and polymorphism. The syntax is more concise than Java, and you don't need to declare member variables or types explicitly."}),"\n",(0,r.jsx)(e.h3,{children:"Class Definition"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public class Person {\n    private String name;\n    public Person(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"class Person:\n    def __init__(self, name):\n        self.name = name\n    def get_name(self):\n        return self.name\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Inheritance"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public class Student extends Person {\n    public Student(String name) {\n        super(name);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"class Student(Person):\n    def __init__(self, name):\n        super().__init__(name)\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"6. Collections"}),"\n",(0,r.jsx)(e.p,{children:"Python provides built-in data structures like lists and dictionaries, which are more flexible and easier to use than Java's arrays and collections. This section compares how to work with collections in both languages."}),"\n",(0,r.jsx)(e.h3,{children:"Lists/Arrays"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"int[] arr = {1, 2, 3};\nArrayList<Integer> list = new ArrayList<>();\nlist.add(1);\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"arr = [1, 2, 3]\nlist_ = []\nlist_.append(1)\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Dictionaries/Maps"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'Map<String, Integer> map = new HashMap<>();\nmap.put("a", 1);\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'map_ = {"a": 1}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"7. Exception Handling"}),"\n",(0,r.jsxs)(e.p,{children:["Exception handling in Python uses ",(0,r.jsx)(e.code,{children:"try"})," and ",(0,r.jsx)(e.code,{children:"except"})," blocks, similar to Java's ",(0,r.jsx)(e.code,{children:"try"})," and ",(0,r.jsx)(e.code,{children:"catch"}),". Python's approach is simpler and doesn't require specifying exception types unless needed."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'try {\n    int x = 1 / 0;\n} catch (ArithmeticException e) {\n    System.out.println("Error: " + e.getMessage());\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'try:\n    x = 1 / 0\nexcept Exception as e:\n    print("Error:", e)\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"8. File I/O"}),"\n",(0,r.jsxs)(e.p,{children:["File operations in Python are straightforward with the ",(0,r.jsx)(e.code,{children:"open"})," function and context managers. Java requires more boilerplate for reading and writing files."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'BufferedReader reader = new BufferedReader(new FileReader("file.txt"));\nString line = reader.readLine();\nreader.close();\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'with open("file.txt") as f:\n    line = f.readline()\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"9. Useful Libraries"}),"\n",(0,r.jsx)(e.p,{children:"Both Java and Python have rich ecosystems of libraries and frameworks. This section lists some of the most popular ones for each language, useful for web development, data science, and more."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Collections, Streams, Apache Commons, Spring"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"NumPy, pandas, requests, Flask, Django"}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"11. Functional Programming"}),"\n",(0,r.jsx)(e.p,{children:"Python supports functional programming with first-class functions, map/filter/reduce, and list comprehensions. Java's Streams API offers similar capabilities, but Python's syntax is more concise and expressive."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java (Streams API):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"List<Integer> nums = Arrays.asList(1, 2, 3);\nList<Integer> squares = nums.stream().map(n -> n * n).collect(Collectors.toList());\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"nums = [1, 2, 3]\nsquares = list(map(lambda n: n * n, nums))\n# Or with list comprehensions\nsquares = [n * n for n in nums]\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"12. Decorators"}),"\n",(0,r.jsxs)(e.p,{children:["Decorators in Python are a way to modify or enhance functions and methods using the ",(0,r.jsx)(e.code,{children:"@"})," syntax. They are similar to Java annotations, but can execute code before and after the decorated function runs."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java (Annotations):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@Override\npublic void run() { ... }\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print("Before function")\n        result = func(*args, **kwargs)\n        print("After function")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print("Hello!")\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"13. Context Managers"}),"\n",(0,r.jsxs)(e.p,{children:["Context managers in Python (the ",(0,r.jsx)(e.code,{children:"with"})," statement) handle resource setup and cleanup automatically, such as opening and closing files. Java's try-with-resources provides similar functionality, but Python's approach is more flexible and can be extended to custom resources."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java (try-with-resources):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'try (BufferedReader reader = new BufferedReader(new FileReader("file.txt"))) {\n    String line = reader.readLine();\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'with open("file.txt") as f:\n    line = f.readline()\n'})}),"\n",(0,r.jsxs)(e.p,{children:["You can create custom context managers with ",(0,r.jsx)(e.code,{children:"__enter__"})," and ",(0,r.jsx)(e.code,{children:"__exit__"})," or use ",(0,r.jsx)(e.code,{children:"contextlib"}),"."]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"14. Type Hinting"}),"\n",(0,r.jsx)(e.p,{children:"Type hinting in Python lets you annotate function arguments and return types, improving code clarity and enabling better tooling. While Java enforces types at compile time, Python's hints are optional but highly recommended for maintainability."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public int add(int a, int b) { ... }\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def add(a: int, b: int) -> int:\n    return a + b\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"15. Data Classes"}),"\n",(0,r.jsxs)(e.p,{children:["Python's ",(0,r.jsx)(e.code,{children:"dataclass"})," decorator automatically generates boilerplate code for classes that store data, such as constructors and equality checks. In Java, you typically write POJOs (Plain Old Java Objects) with explicit fields and methods, but Python makes this much simpler."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java (POJO):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public class Point {\n    private int x, y;\n    public Point(int x, int y) { this.x = x; this.y = y; }\n    // getters/setters\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"16. Higher-Order Functions"}),"\n",(0,r.jsx)(e.p,{children:"Higher-order functions are functions that take other functions as arguments or return them as results. Both Java (with lambdas and functional interfaces) and Python support this, but Python's syntax is more direct and flexible for functional programming."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"Function<Integer, Integer> doubler = n -> n * 2;\nint result = doubler.apply(5);\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def doubler(n):\n    return n * 2\nresult = doubler(5)\n\ndef apply_func(f, value):\n    return f(value)\nprint(apply_func(doubler, 10))\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"17. List Comprehensions"}),"\n",(0,r.jsx)(e.p,{children:"List comprehensions in Python provide a concise way to create lists from existing iterables, often replacing loops and map/filter calls. Java's Streams API offers similar capabilities, but Python's syntax is shorter and easier to read."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"List<Integer> evens = nums.stream().filter(n -> n % 2 == 0).collect(Collectors.toList());\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"evens = [n for n in nums if n % 2 == 0]\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"18. Async Handling"}),"\n",(0,r.jsxs)(e.p,{children:["Python supports asynchronous programming with ",(0,r.jsx)(e.code,{children:"async"})," and ",(0,r.jsx)(e.code,{children:"await"}),", making it easy to write non-blocking code for I/O and concurrency. Java uses ",(0,r.jsx)(e.code,{children:"CompletableFuture"})," and threads for similar tasks, but Python's syntax is more concise and readable."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Java (CompletableFuture):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\n    // async code\n});\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Python:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    print("Async done!")\n\nasyncio.run(main())\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"19. Migration Tips & Gotchas (Expanded)"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Python uses indentation, not braces."}),"\n",(0,r.jsx)(e.li,{children:"No need to declare variable types."}),"\n",(0,r.jsx)(e.li,{children:"Lists and dicts are built-in and flexible."}),"\n",(0,r.jsx)(e.li,{children:"Exception handling is simpler."}),"\n",(0,r.jsx)(e.li,{children:"Use virtual environments for dependencies."}),"\n",(0,r.jsxs)(e.li,{children:["Use ",(0,r.jsx)(e.code,{children:"pip"})," for package management."]}),"\n",(0,r.jsx)(e.li,{children:"Follow PEP 8 for style."}),"\n",(0,r.jsx)(e.li,{children:"Use list comprehensions for concise code."}),"\n",(0,r.jsx)(e.li,{children:"Decorators and context managers are powerful tools."}),"\n",(0,r.jsx)(e.li,{children:"Type hints and data classes improve code clarity."}),"\n",(0,r.jsx)(e.li,{children:"Async/await for concurrency."}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{children:"Conclusion"}),"\n",(0,r.jsx)(e.p,{children:"Transitioning from Java to Python is straightforward if you focus on the key differences and similarities. Use this guide as a reference for syntax, OOP, collections, functional programming, and best practices. Practice by rewriting small Java programs in Python to build fluency."})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(t,{...n})}):t(n)}},75595:function(n,e,s){s.d(e,{a:function(){return a}});var r=s(2265);let i=r.createContext({});function a(n){let e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}}}]);