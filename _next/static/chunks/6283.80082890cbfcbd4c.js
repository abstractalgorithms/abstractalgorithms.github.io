"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6283],{86283:function(e,n,r){r.r(n),r.d(n,{default:function(){return h},frontmatter:function(){return s},metadata:function(){return t}});var i=r(57437),a=r(75595);let s=void 0,t={id:"heap-basics-java-20250718",slug:"heap-basics-java",title:"Heap Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the heap data structure, allowed operations, Java implementation, and see where heaps are used in advanced algorithms.",author:"Abstract Algorithms",tags:["heap","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/heap-overview-600x400.jpg"};function l(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TLDR:"})," Heaps are specialized tree-based data structures for efficient min/max retrieval, used in priority queues, sorting, and scheduling. This guide covers heap basics, allowed operations, Java implementation, and links to advanced posts using heaps."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#what-is-a-heap-",children:"What is a Heap? \uD83D\uDE80"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#how-to-use-heaps-in-java-",children:"How to Use Heaps in Java \uD83D\uDCBB"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#where-heaps-are-used-",children:"Where Heaps Are Used \uD83E\uDDE9"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{children:"What is a Heap? \uD83D\uDE80"}),"\n",(0,i.jsx)(n.p,{children:"A heap is a complete binary tree that satisfies the heap property: in a min-heap, each parent is less than or equal to its children; in a max-heap, each parent is greater than or equal to its children."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Efficiently retrieve min or max element"}),"\n",(0,i.jsx)(n.li,{children:"Implement priority queues"}),"\n",(0,i.jsx)(n.li,{children:"Support heap sort and scheduling"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Allowed Operations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"insert(x):"})," Add element x to the heap"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"peek():"})," Return the min/max element without removing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"poll():"})," Remove and return the min/max element"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"size():"})," Return the number of elements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"isEmpty():"})," Check if the heap is empty"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"How to Use Heaps in Java \uD83D\uDCBB"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Approach:"}),"\r\nJava provides a built-in ",(0,i.jsx)(n.code,{children:"PriorityQueue"})," class (min-heap by default). You can also implement your own heap using an array."]}),"\n",(0,i.jsx)(n.h3,{children:"Using Java's Built-in PriorityQueue (Min-Heap)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"PriorityQueue<Integer> minHeap = new PriorityQueue<>();\r\nminHeap.offer(10);\r\nint min = minHeap.poll();\n"})}),"\n",(0,i.jsx)(n.h3,{children:"Max-Heap with PriorityQueue"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\r\nmaxHeap.offer(10);\r\nint max = maxHeap.poll();\n"})}),"\n",(0,i.jsx)(n.h3,{children:"Custom Min-Heap Implementation (Array)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'class MinHeap {\r\n    private int[] arr;\r\n    private int size;\r\n    public MinHeap(int capacity) {\r\n        arr = new int[capacity];\r\n        size = 0;\r\n    }\r\n    public void insert(int x) {\r\n        arr[size] = x;\r\n        int i = size;\r\n        size++;\r\n        while (i > 0 && arr[(i-1)/2] > arr[i]) {\r\n            int tmp = arr[i]; arr[i] = arr[(i-1)/2]; arr[(i-1)/2] = tmp;\r\n            i = (i-1)/2;\r\n        }\r\n    }\r\n    public int peek() {\r\n        if (size == 0) throw new RuntimeException("Heap empty");\r\n        return arr[0];\r\n    }\r\n    public int poll() {\r\n        if (size == 0) throw new RuntimeException("Heap empty");\r\n        int min = arr[0];\r\n        arr[0] = arr[--size];\r\n        heapify(0);\r\n        return min;\r\n    }\r\n    private void heapify(int i) {\r\n        int left = 2*i+1, right = 2*i+2, smallest = i;\r\n        if (left < size && arr[left] < arr[smallest]) smallest = left;\r\n        if (right < size && arr[right] < arr[smallest]) smallest = right;\r\n        if (smallest != i) {\r\n            int tmp = arr[i]; arr[i] = arr[smallest]; arr[smallest] = tmp;\r\n            heapify(smallest);\r\n        }\r\n    }\r\n    public int size() { return size; }\r\n    public boolean isEmpty() { return size == 0; }\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Where Heaps Are Used \uD83E\uDDE9"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/genai-mastery-series/part-8",children:"Priority Queue Problems"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/genai-mastery-series/part-9",children:"Heap Sort and Top-K Elements"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/genai-mastery-series/part-10",children:"Scheduling and Event Simulation"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Clarify min-heap vs max-heap requirements"}),"\n",(0,i.jsx)(n.li,{children:"Know time/space complexity for operations"}),"\n",(0,i.jsx)(n.li,{children:"Practice both built-in and custom implementations"}),"\n",(0,i.jsx)(n.li,{children:"Draw heap structure for each operation"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Summary:"}),"\r\nHeaps are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice using heaps in Java to build a strong foundation."]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},75595:function(e,n,r){r.d(n,{a:function(){return s}});var i=r(2265);let a=i.createContext({});function s(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);