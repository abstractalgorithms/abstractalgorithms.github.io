"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2275],{3642:function(e,n,s){s.r(n),s.d(n,{default:function(){return t},frontmatter:function(){return l}});var r=s(7437),i=s(4229);let l=void 0;function c(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{children:"Design a URL Shortener (TinyURL)"}),"\n",(0,r.jsx)(n.p,{children:"In this part, we'll apply our systematic methodology to design a URL shortener service like TinyURL or bit.ly. This is one of the most popular system design interview questions because it covers fundamental concepts while being simple enough to design in 45 minutes."}),"\n",(0,r.jsx)(n.h2,{children:"1. Functional Requirements"}),"\n",(0,r.jsx)(n.h3,{children:"Actors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL Creator"}),": Users who want to shorten long URLs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL Consumer"}),": Users who click on shortened URLs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"System Administrator"}),": Manages the service"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Use Cases"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"URL Creator"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create shortened URLs from long URLs"}),"\n",(0,r.jsx)(n.li,{children:"Set custom aliases (optional)"}),"\n",(0,r.jsx)(n.li,{children:"Set expiration dates for URLs"}),"\n",(0,r.jsx)(n.li,{children:"View analytics (click count, geographic data)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"URL Consumer"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Access original URLs via shortened links"}),"\n",(0,r.jsx)(n.li,{children:"Experience fast redirection (<100ms)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"System Administrator"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor system health and performance"}),"\n",(0,r.jsx)(n.li,{children:"Manage expired URLs and cleanup"}),"\n",(0,r.jsx)(n.li,{children:"Handle abuse and spam detection"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Functional Requirements"}),"\n",(0,r.jsxs)(n.p,{children:["✅ ",(0,r.jsx)(n.strong,{children:"In Scope"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Shorten long URLs to ~7 character format"}),"\n",(0,r.jsx)(n.li,{children:"Redirect shortened URLs to original URLs"}),"\n",(0,r.jsx)(n.li,{children:"Custom aliases for URLs"}),"\n",(0,r.jsx)(n.li,{children:"URL expiration functionality"}),"\n",(0,r.jsx)(n.li,{children:"Basic analytics (click count)"}),"\n",(0,r.jsx)(n.li,{children:"High availability for redirections"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["❌ ",(0,r.jsx)(n.strong,{children:"Out of Scope"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User authentication/accounts"}),"\n",(0,r.jsx)(n.li,{children:"Advanced analytics dashboard"}),"\n",(0,r.jsx)(n.li,{children:"Real-time collaboration features"}),"\n",(0,r.jsx)(n.li,{children:"API rate limiting (assume handled by infrastructure)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"2. Non-Functional Requirements"}),"\n",(0,r.jsx)(n.h3,{children:"Scalability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Support 100 million URLs shortened per month"}),"\n",(0,r.jsx)(n.li,{children:"Handle 10 billion redirections per month"}),"\n",(0,r.jsx)(n.li,{children:"Scale to serve global users"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Availability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"99.9% uptime for URL creation"}),"\n",(0,r.jsx)(n.li,{children:"99.99% uptime for URL redirection"}),"\n",(0,r.jsx)(n.li,{children:"Graceful degradation during failures"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Performance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"URL creation: <200ms response time"}),"\n",(0,r.jsx)(n.li,{children:"URL redirection: <100ms response time"}),"\n",(0,r.jsx)(n.li,{children:"Handle traffic spikes during viral content"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Data Consistency"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Strong consistency for URL creation"}),"\n",(0,r.jsx)(n.li,{children:"Eventual consistency acceptable for analytics"}),"\n",(0,r.jsx)(n.li,{children:"No duplicate shortened URLs"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"3. Estimations"}),"\n",(0,r.jsx)(n.h3,{children:"User Metrics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Daily Active Users"}),": 10 million"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URLs created per day"}),": 3.3 million (100M/month)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redirections per day"}),": 333 million (10B/month)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Throughput"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL Creation QPS"}),": 38 queries/second (3.3M/24/3600)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL Redirection QPS"}),": 3,858 queries/second (333M/24/3600)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Peak QPS"}),": 5x average = 19,290 QPS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read/Write Ratio"}),": 100:1 (heavy read workload)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Storage Estimations"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Per URL Storage"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Shortened URL: 7 bytes"}),"\n",(0,r.jsx)(n.li,{children:"Original URL: 500 bytes (average)"}),"\n",(0,r.jsx)(n.li,{children:"Metadata (creation date, expiration, etc.): 100 bytes"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total per URL"}),": ~600 bytes"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Storage Growth"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Per Day"}),": 3.3M \xd7 600 bytes = 2 GB/day"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Per Year"}),": 2 GB \xd7 365 = 730 GB/year"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Per 5 Years"}),": 730 GB \xd7 5 = 3.65 TB"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Memory Estimations"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cache Requirements"})," (80/20 rule):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"20% of URLs generate 80% of traffic"}),"\n",(0,r.jsx)(n.li,{children:"Daily hot URLs: 333M \xd7 20% = 66.6M URLs"}),"\n",(0,r.jsx)(n.li,{children:"Cache size: 66.6M \xd7 600 bytes = ~40 GB"}),"\n",(0,r.jsx)(n.li,{children:"With replication: 40 GB \xd7 3 = 120 GB total cache"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"4. Design Goals"}),"\n",(0,r.jsx)(n.h3,{children:"Performance Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Latency"}),": <100ms for redirections, <200ms for creation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Throughput"}),": 20K QPS peak capacity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistency"}),": Strong for writes, eventual for analytics"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Architecture Patterns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read-Heavy Workload"}),": Implement aggressive caching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event-Driven"}),": Use async processing for analytics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stateless Services"}),": Enable horizontal scaling"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Data Access Patterns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Random Access"}),": Database lookups by shortened URL key"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Write Once, Read Many"}),": URLs rarely modified after creation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cache-Friendly"}),": High cache hit ratios expected"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"5. High-Level Design"}),"\n",(0,r.jsx)(n.h3,{children:"Building Blocks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[Client] → [Load Balancer] → [Web Servers] → [Cache] → [Database]\r\n                                    ↓\r\n                            [Analytics Service] → [Analytics DB]\r\n                                    ↓\r\n                              [Message Queue]\n"})}),"\n",(0,r.jsx)(n.h3,{children:"Core Components"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Load Balancer"}),": Distributes traffic across web servers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Web Servers"}),": Handle URL creation and redirection logic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cache Layer"}),": Redis cluster for hot URL lookups"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database"}),": Primary storage for URL mappings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analytics Service"}),": Processes click events asynchronously"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Queue"}),": Decouples analytics from main flow"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"API Design"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create Short URL"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /api/v1/shorten\r\nContent-Type: application/json\r\n\r\n{\r\n  "long_url": "https://example.com/very/long/path",\r\n  "custom_alias": "mylink", // optional\r\n  "expiration_date": "2024-12-31" // optional\r\n}\r\n\r\nResponse:\r\n{\r\n  "short_url": "https://short.ly/abc123",\r\n  "long_url": "https://example.com/very/long/path",\r\n  "created_at": "2024-06-17T10:00:00Z",\r\n  "expires_at": "2024-12-31T23:59:59Z"\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Redirect URL"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /{short_code}\r\n\r\nResponse: 301 Redirect\r\nLocation: https://example.com/very/long/path\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Get Analytics"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'GET /api/v1/analytics/{short_code}\r\n\r\nResponse:\r\n{\r\n  "short_code": "abc123",\r\n  "click_count": 1542,\r\n  "created_at": "2024-06-17T10:00:00Z",\r\n  "last_accessed": "2024-06-17T15:30:00Z"\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{children:"Data Schema"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"URLs Table"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE urls (\r\n    short_code VARCHAR(7) PRIMARY KEY,\r\n    long_url TEXT NOT NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    expires_at TIMESTAMP,\r\n    click_count BIGINT DEFAULT 0,\r\n    created_by_ip VARCHAR(45)\r\n);\r\n\r\nCREATE INDEX idx_expires_at ON urls(expires_at);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Analytics Events Table"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE click_events (\r\n    id BIGINT AUTO_INCREMENT PRIMARY KEY,\r\n    short_code VARCHAR(7) NOT NULL,\r\n    clicked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    user_ip VARCHAR(45),\r\n    user_agent TEXT,\r\n    referer TEXT\r\n);\r\n\r\nCREATE INDEX idx_short_code_time ON click_events(short_code, clicked_at);\n"})}),"\n",(0,r.jsx)(n.h2,{children:"URL Encoding Algorithm"}),"\n",(0,r.jsx)(n.h3,{children:"Base62 Encoding"}),"\n",(0,r.jsx)(n.p,{children:"We'll use Base62 encoding (a-z, A-Z, 0-9) to generate short codes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def base62_encode(num):\r\n    base = 62\r\n    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"\r\n    encoded = ""\r\n    \r\n    while num > 0:\r\n        encoded = alphabet[num % base] + encoded\r\n        num //= base\r\n    \r\n    return encoded or alphabet[0]\r\n\r\ndef base62_decode(encoded):\r\n    base = 62\r\n    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"\r\n    num = 0\r\n    \r\n    for char in encoded:\r\n        num = num * base + alphabet.index(char)\r\n    \r\n    return num\n'})}),"\n",(0,r.jsx)(n.h3,{children:"Counter-Based Approach"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Use auto-incrementing database counter"}),"\n",(0,r.jsx)(n.li,{children:"Encode counter value to Base62"}),"\n",(0,r.jsx)(n.li,{children:"With 7 characters: 62^7 = 3.5 trillion possible URLs"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Advantages"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No collisions"}),"\n",(0,r.jsx)(n.li,{children:"Predictable, sequential generation"}),"\n",(0,r.jsx)(n.li,{children:"Simple implementation"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Disadvantages"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sequential patterns might be guessable"}),"\n",(0,r.jsx)(n.li,{children:"Single point of failure for counter"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Alternative: Hash-Based Approach"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import hashlib\r\n\r\ndef generate_short_code(long_url, timestamp):\r\n    data = f"{long_url}{timestamp}"\r\n    hash_value = hashlib.md5(data.encode()).hexdigest()\r\n    \r\n    # Take first 7 characters and convert to Base62\r\n    return hash_value[:7]\n'})}),"\n",(0,r.jsx)(n.h2,{children:"Detailed Design Deep Dive"}),"\n",(0,r.jsx)(n.h3,{children:"Caching Strategy"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Multi-Layer Caching"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Browser Cache"}),": Cache 301 redirects for 1 hour"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CDN Cache"}),": Cache popular URLs at edge locations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Application Cache"}),": Redis cluster with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TTL: 24 hours for hot URLs"}),"\n",(0,r.jsx)(n.li,{children:"LRU eviction policy"}),"\n",(0,r.jsx)(n.li,{children:"99% hit ratio target"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cache Key Strategy"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Key: "url:{short_code}"\r\nValue: {\r\n  "long_url": "https://example.com/path",\r\n  "expires_at": "2024-12-31T23:59:59Z"\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{children:"Database Sharding"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Shard by Short Code"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Consistent hashing on short_code"}),"\n",(0,r.jsx)(n.li,{children:"4 shards initially, plan for 16 shards"}),"\n",(0,r.jsx)(n.li,{children:"Each shard handles ~25% of traffic"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Shard Key"}),": First 2 characters of short_code"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Shard 1: aa-pz"}),"\n",(0,r.jsx)(n.li,{children:"Shard 2: qa-9z"}),"\n",(0,r.jsx)(n.li,{children:"Shard 3: Aa-Pz"}),"\n",(0,r.jsx)(n.li,{children:"Shard 4: Qa-9z"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Analytics Processing"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Async Event Processing"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"URL click triggers event"}),"\n",(0,r.jsx)(n.li,{children:"Event published to message queue"}),"\n",(0,r.jsx)(n.li,{children:"Analytics service processes events in batches"}),"\n",(0,r.jsx)(n.li,{children:"Updates click counts every 5 minutes"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Analytics Pipeline"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[Click Event] → [Kafka Queue] → [Analytics Worker] → [Analytics DB]\r\n                                        ↓\r\n                                [Real-time Dashboard]\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Scaling Considerations"}),"\n",(0,r.jsx)(n.h3,{children:"Handling Traffic Spikes"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Auto-Scaling Strategy"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor QPS and response time"}),"\n",(0,r.jsx)(n.li,{children:"Scale web servers horizontally"}),"\n",(0,r.jsx)(n.li,{children:"Pre-warm cache for viral content"}),"\n",(0,r.jsx)(n.li,{children:"Circuit breakers for graceful degradation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Geographic Distribution"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Multi-Region Deployment"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Primary region: US-East (main database)"}),"\n",(0,r.jsx)(n.li,{children:"Secondary regions: EU-West, Asia-Pacific"}),"\n",(0,r.jsx)(n.li,{children:"Read replicas in each region"}),"\n",(0,r.jsx)(n.li,{children:"Global load balancer routes to nearest region"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Performance Optimizations"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection Pooling"}),": Reuse database connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Async Processing"}),": Non-blocking I/O for analytics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Batch Operations"}),": Group database writes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CDN Integration"}),": Cache static assets and popular URLs"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{children:"Spam Prevention"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Rate limiting per IP address"}),"\n",(0,r.jsx)(n.li,{children:"URL validation and sanitization"}),"\n",(0,r.jsx)(n.li,{children:"Malicious URL detection"}),"\n",(0,r.jsx)(n.li,{children:"CAPTCHA for suspicious traffic"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Data Protection"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"HTTPS enforcement"}),"\n",(0,r.jsx)(n.li,{children:"SQL injection prevention"}),"\n",(0,r.jsx)(n.li,{children:"Input validation for custom aliases"}),"\n",(0,r.jsx)(n.li,{children:"Access logs for audit trails"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"URL Shortener Design Quiz"}),"\n",(0,r.jsx)(n.p,{children:"Test your understanding of URL shortener system design with the interactive quiz that appears after each part of this series."}),"\n",(0,r.jsx)(n.h2,{children:"Key Takeaways"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read-Heavy Optimization"}),": Aggressive caching is crucial for URL shorteners"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simple but Scalable"}),": Start simple, add complexity as needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analytics Separation"}),": Decouple analytics from core functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Global Distribution"}),": CDNs and regional deployments improve performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Failure Planning"}),": Design for graceful degradation during traffic spikes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"What's Next?"}),"\n",(0,r.jsx)(n.p,{children:"In Part 3, we'll design a real-time chat system like WhatsApp, which introduces new challenges around WebSocket connections, message delivery guarantees, and online presence management."})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},6022:function(e,n,s){s.r(n),s.d(n,{default:function(){return t},frontmatter:function(){return l}});var r=s(7437),i=s(4229);let l=void 0;function c(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{children:"Design a Chat System (WhatsApp)"}),"\n",(0,r.jsx)(n.p,{children:"In this part, we'll design a real-time chat system similar to WhatsApp or Slack. This problem introduces complex challenges around real-time communication, message delivery, and online presence management."}),"\n",(0,r.jsx)(n.h2,{children:"1. Functional Requirements"}),"\n",(0,r.jsx)(n.h3,{children:"Actors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Chat User"}),": Sends and receives messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Group Admin"}),": Manages group chats"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"System"}),": Handles presence and delivery"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Use Cases"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Chat User"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Send one-on-one messages"}),"\n",(0,r.jsx)(n.li,{children:"Participate in group chats (up to 500 members)"}),"\n",(0,r.jsx)(n.li,{children:"See online/offline status of contacts"}),"\n",(0,r.jsx)(n.li,{children:"Receive messages in real-time"}),"\n",(0,r.jsx)(n.li,{children:"View message delivery status (sent, delivered, read)"}),"\n",(0,r.jsx)(n.li,{children:"Share media files (images, videos, documents)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Group Admin"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create and manage group chats"}),"\n",(0,r.jsx)(n.li,{children:"Add/remove participants"}),"\n",(0,r.jsx)(n.li,{children:"Set group permissions"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"System Functions"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deliver messages reliably"}),"\n",(0,r.jsx)(n.li,{children:"Maintain message ordering"}),"\n",(0,r.jsx)(n.li,{children:"Handle offline message delivery"}),"\n",(0,r.jsx)(n.li,{children:"Manage user presence status"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Functional Requirements"}),"\n",(0,r.jsxs)(n.p,{children:["✅ ",(0,r.jsx)(n.strong,{children:"In Scope"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"One-on-one messaging"}),"\n",(0,r.jsx)(n.li,{children:"Group messaging (up to 500 members)"}),"\n",(0,r.jsx)(n.li,{children:"Real-time message delivery"}),"\n",(0,r.jsx)(n.li,{children:"Message delivery status"}),"\n",(0,r.jsx)(n.li,{children:"Online presence indicators"}),"\n",(0,r.jsx)(n.li,{children:"Media file sharing"}),"\n",(0,r.jsx)(n.li,{children:"Message history storage"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["❌ ",(0,r.jsx)(n.strong,{children:"Out of Scope"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Voice/video calling"}),"\n",(0,r.jsx)(n.li,{children:"Message encryption (assume handled by client)"}),"\n",(0,r.jsx)(n.li,{children:"Advanced group features (channels, threads)"}),"\n",(0,r.jsx)(n.li,{children:"Message search functionality"}),"\n",(0,r.jsx)(n.li,{children:"Push notifications (assume external service)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"2. Non-Functional Requirements"}),"\n",(0,r.jsx)(n.h3,{children:"Scalability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Support 1 billion users globally"}),"\n",(0,r.jsx)(n.li,{children:"Handle 50 billion messages per day"}),"\n",(0,r.jsx)(n.li,{children:"Support 10 million concurrent users"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Availability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"99.9% uptime for message delivery"}),"\n",(0,r.jsx)(n.li,{children:"Graceful degradation during failures"}),"\n",(0,r.jsx)(n.li,{children:"Message ordering must be preserved"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Performance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Message delivery: <100ms in same region"}),"\n",(0,r.jsx)(n.li,{children:"Cross-region delivery: <300ms"}),"\n",(0,r.jsx)(n.li,{children:"Group message fanout: <500ms"}),"\n",(0,r.jsx)(n.li,{children:"Support real-time presence updates"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Data Consistency"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Strong consistency for message ordering"}),"\n",(0,r.jsx)(n.li,{children:"Eventual consistency for presence status"}),"\n",(0,r.jsx)(n.li,{children:"At-least-once message delivery guarantee"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"3. Estimations"}),"\n",(0,r.jsx)(n.h3,{children:"User Metrics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total Users"}),": 1 billion"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Daily Active Users"}),": 500 million"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Concurrent Users"}),": 10 million peak"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Average sessions per user"}),": 4 per day"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Message Volume"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Messages per day"}),": 50 billion"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Messages per second"}),": 578K average"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Peak QPS"}),": 1.2 million"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Group messages"}),": 20% of total volume"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Storage Estimations"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Per Message Storage"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Message ID: 8 bytes"}),"\n",(0,r.jsx)(n.li,{children:"Sender ID: 8 bytes"}),"\n",(0,r.jsx)(n.li,{children:"Receiver/Group ID: 8 bytes"}),"\n",(0,r.jsx)(n.li,{children:"Message content: 100 bytes average"}),"\n",(0,r.jsx)(n.li,{children:"Metadata: 50 bytes"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total per message"}),": ~200 bytes"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Storage Growth"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Per Day"}),": 50B \xd7 200 bytes = 10 TB/day"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Per Year"}),": 10 TB \xd7 365 = 3.65 PB/year"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Per 5 Years"}),": 18.25 PB (with compression ~9 PB)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Connection Estimations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WebSocket connections"}),": 10 million concurrent"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory per connection"}),": 10KB"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total connection memory"}),": 100 GB"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Servers needed"}),": 200 servers (500MB per server)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"4. Design Goals"}),"\n",(0,r.jsx)(n.h3,{children:"Performance Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Latency"}),": <100ms same region, <300ms cross-region"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Throughput"}),": 1.2M messages/second peak"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Availability"}),": 99.9% uptime"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Architecture Patterns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event-Driven"}),": Message routing and delivery"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pub/Sub"}),": Real-time message distribution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Microservices"}),": Decomposed by functionality"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Usage Patterns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real-time Processing"}),": Immediate message delivery"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Write Heavy"}),": High message ingestion rate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection Heavy"}),": Millions of persistent connections"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"5. High-Level Design"}),"\n",(0,r.jsx)(n.h3,{children:"Building Blocks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[Mobile/Web Client] ↔ [WebSocket Gateway] → [Message Service] → [Message Queue]\r\n                                ↓                    ↓              ↓\r\n                        [Presence Service] → [User Service] → [Database Cluster]\r\n                                ↓                    ↓              ↓\r\n                        [Notification Service] → [Analytics] → [Message Storage]\n"})}),"\n",(0,r.jsx)(n.h3,{children:"Core Components"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WebSocket Gateway"}),": Manages persistent connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Service"}),": Core message processing logic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Presence Service"}),": Tracks user online status"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Service"}),": User profiles and friend lists"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Queue"}),": Reliable message delivery"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Cluster"}),": Distributed message storage"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"API Design"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"WebSocket Events"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Send Message"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n  "type": "send_message",\r\n  "data": {\r\n    "message_id": "msg_123456",\r\n    "chat_id": "chat_789",\r\n    "content": "Hello World!",\r\n    "message_type": "text",\r\n    "timestamp": "2024-06-17T10:00:00Z"\r\n  }\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Receive Message"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n  "type": "new_message",\r\n  "data": {\r\n    "message_id": "msg_123456",\r\n    "chat_id": "chat_789",\r\n    "sender_id": "user_456",\r\n    "content": "Hello World!",\r\n    "timestamp": "2024-06-17T10:00:00Z",\r\n    "delivery_status": "delivered"\r\n  }\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Presence Update"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n  "type": "presence_update",\r\n  "data": {\r\n    "user_id": "user_456",\r\n    "status": "online",\r\n    "last_seen": "2024-06-17T10:00:00Z"\r\n  }\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"REST APIs"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create Chat"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /api/v1/chats\r\n{\r\n  "type": "group",\r\n  "name": "Project Team",\r\n  "participants": ["user_123", "user_456", "user_789"]\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Get Chat History"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/v1/chats/{chat_id}/messages?limit=50&before=msg_123\n"})}),"\n",(0,r.jsx)(n.h3,{children:"Database Schema"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Users Table"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\r\n    user_id BIGINT PRIMARY KEY,\r\n    username VARCHAR(50) UNIQUE NOT NULL,\r\n    email VARCHAR(255) UNIQUE NOT NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    last_seen TIMESTAMP,\r\n    status ENUM('online', 'offline', 'away') DEFAULT 'offline'\r\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Chats Table"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE chats (\r\n    chat_id BIGINT PRIMARY KEY,\r\n    chat_type ENUM('direct', 'group') NOT NULL,\r\n    name VARCHAR(255),\r\n    created_by BIGINT,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Messages Table"})," (Partitioned by chat_id):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE messages (\r\n    message_id BIGINT PRIMARY KEY,\r\n    chat_id BIGINT NOT NULL,\r\n    sender_id BIGINT NOT NULL,\r\n    content TEXT NOT NULL,\r\n    message_type ENUM('text', 'image', 'file') DEFAULT 'text',\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    \r\n    INDEX idx_chat_time (chat_id, created_at),\r\n    INDEX idx_sender (sender_id)\r\n) PARTITION BY HASH(chat_id) PARTITIONS 100;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Chat Participants Table"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE chat_participants (\r\n    chat_id BIGINT,\r\n    user_id BIGINT,\r\n    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    role ENUM('member', 'admin') DEFAULT 'member',\r\n    \r\n    PRIMARY KEY (chat_id, user_id),\r\n    INDEX idx_user_chats (user_id)\r\n);\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Detailed Design Deep Dive"}),"\n",(0,r.jsx)(n.h3,{children:"WebSocket Connection Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Connection Gateway"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ConnectionGateway:\r\n    def __init__(self):\r\n        self.connections = {}  # user_id -> connection\r\n        self.user_servers = {}  # user_id -> server_id\r\n    \r\n    def handle_connection(self, user_id, websocket):\r\n        # Store connection mapping\r\n        self.connections[user_id] = websocket\r\n        self.user_servers[user_id] = self.server_id\r\n        \r\n        # Update presence service\r\n        self.presence_service.set_online(user_id, self.server_id)\r\n        \r\n        # Subscribe to user's message queue\r\n        self.message_queue.subscribe(f\"user_{user_id}\", self.deliver_message)\r\n    \r\n    def deliver_message(self, message):\r\n        user_id = message['recipient_id']\r\n        if user_id in self.connections:\r\n            self.connections[user_id].send(message)\r\n        else:\r\n            # User offline, store for later delivery\r\n            self.offline_storage.store(user_id, message)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Load Balancing Connections"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Consistent hashing by user_id"}),"\n",(0,r.jsx)(n.li,{children:"Session affinity for WebSocket connections"}),"\n",(0,r.jsx)(n.li,{children:"Health checks and failover"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Message Processing Pipeline"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Message Flow"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Client sends message via WebSocket"}),"\n",(0,r.jsx)(n.li,{children:"Gateway validates and adds metadata"}),"\n",(0,r.jsx)(n.li,{children:"Message service processes and stores"}),"\n",(0,r.jsx)(n.li,{children:"Fanout service delivers to recipients"}),"\n",(0,r.jsx)(n.li,{children:"Delivery confirmation sent back"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Message Service"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MessageService:\r\n    def process_message(self, message):\r\n        # 1. Validate message\r\n        if not self.validate_message(message):\r\n            return {"error": "Invalid message"}\r\n        \r\n        # 2. Generate unique message ID\r\n        message[\'message_id\'] = self.generate_id()\r\n        message[\'timestamp\'] = datetime.utcnow()\r\n        \r\n        # 3. Store message\r\n        self.store_message(message)\r\n        \r\n        # 4. Fanout to recipients\r\n        recipients = self.get_chat_participants(message[\'chat_id\'])\r\n        for recipient_id in recipients:\r\n            if recipient_id != message[\'sender_id\']:\r\n                self.message_queue.publish(f"user_{recipient_id}", message)\r\n        \r\n        # 5. Return acknowledgment\r\n        return {"status": "sent", "message_id": message[\'message_id\']}\n'})}),"\n",(0,r.jsx)(n.h3,{children:"Group Message Fanout"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Fanout Strategies"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pull Model"})," (Recommended for large groups):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def fanout_pull_model(message, chat_id):\r\n    # Store message once\r\n    message_storage.store(message)\r\n    \r\n    # Notify online participants\r\n    online_users = presence_service.get_online_users(chat_id)\r\n    for user_id in online_users:\r\n        notification_queue.publish(f"user_{user_id}", {\r\n            "type": "new_message_notification",\r\n            "chat_id": chat_id,\r\n            "message_id": message[\'message_id\']\r\n        })\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Push Model"})," (For small groups <50 members):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def fanout_push_model(message, chat_id):\r\n    participants = chat_service.get_participants(chat_id)\r\n    \r\n    for user_id in participants:\r\n        if user_id != message['sender_id']:\r\n            # Send full message to each participant\r\n            message_queue.publish(f\"user_{user_id}\", message)\n"})}),"\n",(0,r.jsx)(n.h3,{children:"Presence Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-time Presence Updates"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class PresenceService:\r\n    def __init__(self):\r\n        self.redis_client = redis.Redis()\r\n        self.heartbeat_interval = 30  # seconds\r\n    \r\n    def set_online(self, user_id, server_id):\r\n        self.redis_client.hset("user_presence", user_id, json.dumps({\r\n            "status": "online",\r\n            "server_id": server_id,\r\n            "last_seen": time.time()\r\n        }))\r\n        \r\n        # Notify contacts about status change\r\n        contacts = self.get_user_contacts(user_id)\r\n        for contact_id in contacts:\r\n            self.notify_presence_change(contact_id, user_id, "online")\r\n    \r\n    def heartbeat(self, user_id):\r\n        # Update last seen timestamp\r\n        presence = self.get_presence(user_id)\r\n        if presence:\r\n            presence[\'last_seen\'] = time.time()\r\n            self.redis_client.hset("user_presence", user_id, json.dumps(presence))\r\n    \r\n    def cleanup_offline_users(self):\r\n        # Background job to mark users offline after timeout\r\n        current_time = time.time()\r\n        for user_id, presence_data in self.redis_client.hgetall("user_presence").items():\r\n            presence = json.loads(presence_data)\r\n            if current_time - presence[\'last_seen\'] > 60:  # 1 minute timeout\r\n                self.set_offline(user_id)\n'})}),"\n",(0,r.jsx)(n.h3,{children:"Message Ordering and Delivery"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Message Ordering"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use logical timestamps (Lamport clocks)"}),"\n",(0,r.jsx)(n.li,{children:"Sequence numbers per chat"}),"\n",(0,r.jsx)(n.li,{children:"Vector clocks for concurrent updates"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Delivery Guarantees"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class MessageDelivery:\r\n    def deliver_with_retry(self, user_id, message, max_retries=3):\r\n        for attempt in range(max_retries):\r\n            try:\r\n                if self.is_user_online(user_id):\r\n                    self.send_via_websocket(user_id, message)\r\n                else:\r\n                    self.store_for_offline_delivery(user_id, message)\r\n                \r\n                # Wait for acknowledgment\r\n                if self.wait_for_ack(message['message_id'], timeout=5):\r\n                    return True\r\n                    \r\n            except Exception as e:\r\n                if attempt == max_retries - 1:\r\n                    # Final failure - store in dead letter queue\r\n                    self.dead_letter_queue.store(user_id, message)\r\n                    return False\r\n                \r\n                # Exponential backoff\r\n                time.sleep(2 ** attempt)\r\n        \r\n        return False\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Scaling Considerations"}),"\n",(0,r.jsx)(n.h3,{children:"Database Sharding"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Shard by Chat ID"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_shard(chat_id):\r\n    return chat_id % NUM_SHARDS\r\n\r\ndef route_message(message):\r\n    shard = get_shard(message['chat_id'])\r\n    return message_databases[shard]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hot Partition Problem"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Very active group chats can overwhelm a single shard"}),"\n",(0,r.jsx)(n.li,{children:"Solution: Further partition by time ranges"}),"\n",(0,r.jsx)(n.li,{children:"Move viral chats to dedicated high-performance shards"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Caching Strategy"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Multi-Level Caching"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"L1 Cache"}),": Recent messages in application memory"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"L2 Cache"}),": Redis cluster for chat metadata"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"L3 Cache"}),": Chat participant lists"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MessageCache:\r\n    def get_recent_messages(self, chat_id, limit=50):\r\n        # Try L1 cache first\r\n        cache_key = f"recent_messages:{chat_id}"\r\n        messages = self.memory_cache.get(cache_key)\r\n        \r\n        if not messages:\r\n            # Try L2 cache (Redis)\r\n            messages = self.redis_cache.get(cache_key)\r\n            \r\n            if not messages:\r\n                # Fetch from database\r\n                messages = self.database.get_messages(chat_id, limit)\r\n                \r\n                # Cache in both levels\r\n                self.redis_cache.set(cache_key, messages, ttl=300)\r\n            \r\n            self.memory_cache.set(cache_key, messages, ttl=60)\r\n        \r\n        return messages\n'})}),"\n",(0,r.jsx)(n.h3,{children:"Geographic Distribution"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Multi-Region Architecture"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"WebSocket gateways in each region"}),"\n",(0,r.jsx)(n.li,{children:"Message routing based on user location"}),"\n",(0,r.jsx)(n.li,{children:"Cross-region message replication"}),"\n",(0,r.jsx)(n.li,{children:"Regional presence services with global sync"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"Chat System Design Quiz"}),"\n",(0,r.jsx)(n.p,{children:"Test your understanding of real-time chat system design with the interactive quiz that appears after each part of this series."}),"\n",(0,r.jsx)(n.h2,{children:"Security and Privacy"}),"\n",(0,r.jsx)(n.h3,{children:"Message Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"End-to-end encryption (client-side)"}),"\n",(0,r.jsx)(n.li,{children:"Message integrity verification"}),"\n",(0,r.jsx)(n.li,{children:"Forward secrecy for key rotation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Privacy Protection"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Message retention policies"}),"\n",(0,r.jsx)(n.li,{children:"User data anonymization"}),"\n",(0,r.jsx)(n.li,{children:"GDPR compliance for data deletion"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Abuse Prevention"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Rate limiting for spam prevention"}),"\n",(0,r.jsx)(n.li,{children:"Content moderation pipelines"}),"\n",(0,r.jsx)(n.li,{children:"User reporting mechanisms"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"Key Takeaways"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real-time Architecture"}),": WebSockets enable bidirectional communication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Ordering"}),": Critical for user experience, requires careful design"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Presence Management"}),": Efficient tracking reduces system overhead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fanout Strategies"}),": Choose between push/pull based on group size"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Graceful Degradation"}),": System should handle failures without data loss"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"What's Next?"}),"\n",(0,r.jsx)(n.p,{children:"In Part 4, we'll design a social media feed system like Twitter, which introduces challenges around content ranking, timeline generation, and handling viral content."})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);