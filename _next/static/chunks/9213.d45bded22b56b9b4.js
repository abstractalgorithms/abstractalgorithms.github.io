"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9213],{79213:function(e,n,i){i.r(n),i.d(n,{default:function(){return h},frontmatter:function(){return a},metadata:function(){return t}});var r=i(57437),s=i(75595);let a=void 0,t={id:"minheap-basics-java-20250718",slug:"minheap-basics-java",title:"Min Heap Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the min heap data structure, allowed operations, Java implementation, and see where min heaps are used in advanced algorithms.",author:"Abstract Algorithms",tags:["min-heap","heap","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/minheap-overview-600x400.jpg"};function l(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TLDR:"})," Min heaps are complete binary trees for efficient minimum retrieval, used in priority queues, heap sort, and scheduling. This guide covers min heap basics, allowed operations, Java implementation, and links to advanced posts using min heaps."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#what-is-a-min-heap-",children:"What is a Min Heap? \uD83D\uDE80"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#how-to-use-min-heaps-in-java-",children:"How to Use Min Heaps in Java \uD83D\uDCBB"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#where-min-heaps-are-used-",children:"Where Min Heaps Are Used \uD83E\uDDE9"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"What is a Min Heap? \uD83D\uDE80"}),"\n",(0,r.jsx)(n.p,{children:"A min heap is a complete binary tree where each parent node is less than or equal to its children. Min heaps enable efficient retrieval and removal of the minimum element."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Efficiently retrieve the minimum element"}),"\n",(0,r.jsx)(n.li,{children:"Implement min-priority queues"}),"\n",(0,r.jsx)(n.li,{children:"Support heap sort and scheduling"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{children:"Allowed Operations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"insert(x):"})," Add element x to the heap"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"peek():"})," Return the minimum element without removing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"poll():"})," Remove and return the minimum element"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"size():"})," Return the number of elements"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"isEmpty():"})," Check if the heap is empty"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{children:"How to Use Min Heaps in Java \uD83D\uDCBB"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Approach:"}),"\r\nJava's ",(0,r.jsx)(n.code,{children:"PriorityQueue"})," is a min heap by default. You can also implement your own min heap using an array."]}),"\n",(0,r.jsx)(n.h3,{children:"Using Java's PriorityQueue as Min Heap"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"PriorityQueue<Integer> minHeap = new PriorityQueue<>();\r\nminHeap.offer(10);\r\nint min = minHeap.poll();\n"})}),"\n",(0,r.jsx)(n.h3,{children:"Custom Min Heap Implementation (Array)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class MinHeap {\r\n    private int[] arr;\r\n    private int size;\r\n    public MinHeap(int capacity) {\r\n        arr = new int[capacity];\r\n        size = 0;\r\n    }\r\n    public void insert(int x) {\r\n        arr[size] = x;\r\n        int i = size;\r\n        size++;\r\n        while (i > 0 && arr[(i-1)/2] > arr[i]) {\r\n            int tmp = arr[i]; arr[i] = arr[(i-1)/2]; arr[(i-1)/2] = tmp;\r\n            i = (i-1)/2;\r\n        }\r\n    }\r\n    public int peek() {\r\n        if (size == 0) throw new RuntimeException("Heap empty");\r\n        return arr[0];\r\n    }\r\n    public int poll() {\r\n        if (size == 0) throw new RuntimeException("Heap empty");\r\n        int min = arr[0];\r\n        arr[0] = arr[--size];\r\n        heapify(0);\r\n        return min;\r\n    }\r\n    private void heapify(int i) {\r\n        int left = 2*i+1, right = 2*i+2, smallest = i;\r\n        if (left < size && arr[left] < arr[smallest]) smallest = left;\r\n        if (right < size && arr[right] < arr[smallest]) smallest = right;\r\n        if (smallest != i) {\r\n            int tmp = arr[i]; arr[i] = arr[smallest]; arr[smallest] = tmp;\r\n            heapify(smallest);\r\n        }\r\n    }\r\n    public int size() { return size; }\r\n    public boolean isEmpty() { return size == 0; }\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{children:"Where Min Heaps Are Used \uD83E\uDDE9"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/posts/genai-mastery-series/part-9",children:"Top-K Elements and Heap Sort"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/posts/genai-mastery-series/part-10",children:"Task Scheduling and Event Simulation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/posts/genai-mastery-series/part-8",children:"Priority Queue Problems"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Clarify min-heap vs max-heap requirements"}),"\n",(0,r.jsx)(n.li,{children:"Know time/space complexity for operations"}),"\n",(0,r.jsx)(n.li,{children:"Practice both built-in and custom implementations"}),"\n",(0,r.jsx)(n.li,{children:"Use min heaps for top-K and scheduling problems"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Summary:"}),"\r\nMin heaps are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice implementing min heaps in Java to build a strong foundation."]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},75595:function(e,n,i){i.d(n,{a:function(){return a}});var r=i(2265);let s=r.createContext({});function a(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);