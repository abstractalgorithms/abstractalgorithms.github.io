"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6600],{16600:function(e,n,s){s.r(n),s.d(n,{default:function(){return o},frontmatter:function(){return i},metadata:function(){return a}});var t=s(57437),r=s(75595);let i=void 0,a={id:"set-basics-java-20250718",slug:"set-basics-java",title:"Set Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the set data structure, allowed operations, Java implementation, and see where sets are used in advanced algorithms.",author:"Abstract Algorithms",tags:["set","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/set-overview-600x400.jpg"};function l(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"TLDR:"})," Sets are collections of unique elements, used for fast membership checks, deduplication, and set operations. This guide covers set basics, allowed operations, Java implementation, and links to advanced posts using sets."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#what-is-a-set-",children:"What is a Set? \uD83D\uDE80"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#how-to-use-sets-in-java-",children:"How to Use Sets in Java \uD83D\uDCBB"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#where-sets-are-used-",children:"Where Sets Are Used \uD83E\uDDE9"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{children:"What is a Set? \uD83D\uDE80"}),"\n",(0,t.jsx)(n.p,{children:"A set is a data structure that stores unique elements with no particular order. Sets are used for fast membership testing, deduplication, and mathematical set operations (union, intersection, difference)."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Store unique elements"}),"\n",(0,t.jsx)(n.li,{children:"Fast membership checks"}),"\n",(0,t.jsx)(n.li,{children:"Support set operations"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{children:"Allowed Operations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"add(x):"})," Add element x to the set"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"remove(x):"})," Remove element x from the set"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"contains(x):"})," Check if x is in the set"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"size():"})," Return the number of elements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"iterate:"})," Loop through all elements"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{children:"How to Use Sets in Java \uD83D\uDCBB"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Approach:"}),"\r\nJava provides built-in ",(0,t.jsx)(n.code,{children:"HashSet"})," and ",(0,t.jsx)(n.code,{children:"TreeSet"})," classes. You can also implement a simple set using a hash map for learning."]}),"\n",(0,t.jsx)(n.h3,{children:"Using Java's Built-in HashSet"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"HashSet<Integer> set = new HashSet<>();\r\nset.add(10);\r\nboolean exists = set.contains(10);\r\nfor (int x : set) {\r\n    System.out.println(x);\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{children:"Simple Custom Set Implementation (using HashMap)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class MySet {\r\n    private HashMap<Integer, Boolean> map = new HashMap<>();\r\n    public void add(int x) { map.put(x, true); }\r\n    public void remove(int x) { map.remove(x); }\r\n    public boolean contains(int x) { return map.containsKey(x); }\r\n    public int size() { return map.size(); }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{children:"Where Sets Are Used \uD83E\uDDE9"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/posts/fast-slow-pointers-interview-analysis-java",children:"Sliding Window and Unique Elements"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/posts/genai-mastery-series/part-6",children:"Deduplication and Membership Problems"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/posts/depth-first-search-dfs-interview-analysis-java",children:"Graph Traversal (Visited Set)"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Clarify if order matters (use TreeSet for sorted order)"}),"\n",(0,t.jsx)(n.li,{children:"Know time/space complexity for operations"}),"\n",(0,t.jsx)(n.li,{children:"Practice both built-in and custom implementations"}),"\n",(0,t.jsx)(n.li,{children:"Use sets for fast lookups and deduplication"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Summary:"}),"\r\nSets are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice using sets in Java to build a strong foundation."]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},75595:function(e,n,s){s.d(n,{a:function(){return i}});var t=s(2265);let r=t.createContext({});function i(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);