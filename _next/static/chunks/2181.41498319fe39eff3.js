"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2181],{32181:function(e,n,i){i.r(n),i.d(n,{default:function(){return d},frontmatter:function(){return t},metadata:function(){return l}});var s=i(57437),r=i(75595);let t=void 0,l={id:"doublylinkedlist-basics-java-20250718",slug:"doublylinkedlist-basics-java",title:"Doubly Linked List Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the doubly linked list data structure, allowed operations, Java implementation, and see where doubly linked lists are used in advanced algorithms.",author:"Abstract Algorithms",tags:["doubly-linked-list","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/doublylinkedlist-overview-600x400.jpg"};function a(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TLDR:"})," Doubly linked lists allow efficient insertions and deletions from both ends, supporting bidirectional traversal. This guide covers doubly linked list basics, allowed operations, Java implementation, and links to advanced posts using doubly linked lists."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#what-is-a-doubly-linked-list-",children:"What is a Doubly Linked List? \uD83D\uDE80"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#how-to-design-a-doubly-linked-list-in-java-",children:"How to Design a Doubly Linked List in Java \uD83D\uDCBB"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#where-doubly-linked-lists-are-used-",children:"Where Doubly Linked Lists Are Used \uD83E\uDDE9"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"What is a Doubly Linked List? \uD83D\uDE80"}),"\n",(0,s.jsx)(n.p,{children:"A doubly linked list is a linear data structure where each node contains a value, a reference to the next node, and a reference to the previous node. This enables efficient insertions and deletions from both ends and bidirectional traversal."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Efficient insertions/deletions at both ends"}),"\n",(0,s.jsx)(n.li,{children:"Bidirectional traversal"}),"\n",(0,s.jsx)(n.li,{children:"Foundation for deques, LRU caches, and more"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Allowed Operations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"addFirst(x):"})," Insert element x at the beginning"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"addLast(x):"})," Insert element x at the end"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"removeFirst():"})," Remove and return the first element"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"removeLast():"})," Remove and return the last element"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"get(index):"})," Get the value at a specific index"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"isEmpty():"})," Check if the list is empty"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"size():"})," Return the number of elements"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"How to Design a Doubly Linked List in Java \uD83D\uDCBB"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Approach:"}),"\r\nImplement a node class with next and prev pointers. Java's ",(0,s.jsx)(n.code,{children:"LinkedList"})," class is a doubly linked list."]}),"\n",(0,s.jsx)(n.h3,{children:"Using Java's Built-in LinkedList"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"LinkedList<Integer> list = new LinkedList<>();\r\nlist.addFirst(10);\r\nlist.addLast(20);\r\nint first = list.removeFirst();\r\nint last = list.removeLast();\n"})}),"\n",(0,s.jsx)(n.h3,{children:"Custom Doubly Linked List Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'class Node {\r\n    int val;\r\n    Node prev, next;\r\n    Node(int val) { this.val = val; }\r\n}\r\nclass DoublyLinkedList {\r\n    private Node head, tail;\r\n    private int size;\r\n    public void addFirst(int x) {\r\n        Node node = new Node(x);\r\n        if (head == null) {\r\n            head = tail = node;\r\n        } else {\r\n            node.next = head;\r\n            head.prev = node;\r\n            head = node;\r\n        }\r\n        size++;\r\n    }\r\n    public void addLast(int x) {\r\n        Node node = new Node(x);\r\n        if (tail == null) {\r\n            head = tail = node;\r\n        } else {\r\n            tail.next = node;\r\n            node.prev = tail;\r\n            tail = node;\r\n        }\r\n        size++;\r\n    }\r\n    public int removeFirst() {\r\n        if (head == null) throw new RuntimeException("List empty");\r\n        int val = head.val;\r\n        head = head.next;\r\n        if (head != null) head.prev = null;\r\n        else tail = null;\r\n        size--;\r\n        return val;\r\n    }\r\n    public int removeLast() {\r\n        if (tail == null) throw new RuntimeException("List empty");\r\n        int val = tail.val;\r\n        tail = tail.prev;\r\n        if (tail != null) tail.next = null;\r\n        else head = null;\r\n        size--;\r\n        return val;\r\n    }\r\n    public boolean isEmpty() { return size == 0; }\r\n    public int size() { return size; }\r\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Where Doubly Linked Lists Are Used \uD83E\uDDE9"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/deque-basics-java",children:"Deque and LRU Cache Implementations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/genai-mastery-series/part-10",children:"Bidirectional Traversal Problems"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/genai-mastery-series/part-6",children:"Undo/Redo Functionality"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Draw node connections for each operation"}),"\n",(0,s.jsx)(n.li,{children:"Know time/space complexity for operations"}),"\n",(0,s.jsx)(n.li,{children:"Practice both built-in and custom implementations"}),"\n",(0,s.jsx)(n.li,{children:"Use doubly linked lists for bidirectional and deque problems"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Summary:"}),"\r\nDoubly linked lists are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice implementing doubly linked lists in Java to build a strong foundation."]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},75595:function(e,n,i){i.d(n,{a:function(){return t}});var s=i(2265);let r=s.createContext({});function t(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);