"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8487],{78487:function(e,n,r){r.r(n),r.d(n,{default:function(){return c},frontmatter:function(){return t},metadata:function(){return a}});var i=r(57437),s=r(75595);let t=void 0,a={id:"1n0o3j6k-7l8m-1i9h-6j0k-1l2m3n4o5p6q",slug:"depth-first-search-dfs-interview-analysis-java",title:"Depth-First Search (DFS): Interview Scenarios, Analysis, and Java Implementation",date:"2025-07-16",excerpt:"Master DFS for graphs and trees. Java code, scenarios, and interview tips for technical interviews.",author:"Abstract Algorithms",tags:["dfs","graph","algorithms","interview-prep","java"],status:"published",coverImage:"./assets/overview-600x400.jpg"};function l(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TLDR:"})," Depth-First Search (DFS) is a fundamental algorithm for traversing trees and graphs, used in cycle detection, path finding, and more. This guide covers the core concept, example problems, and practical tips for Java interviews."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#what-is-depth-first-search-dfs",children:"What is Depth-First Search (DFS)?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example-problem-dfs-in-binary-tree",children:"Example Problem: DFS in Binary Tree"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#interview-scenarios",children:"Interview Scenarios"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#practice-problems",children:"Practice Problems"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#key-takeaways",children:"Key Takeaways"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{children:"What is Depth-First Search (DFS)?"}),"\n",(0,i.jsx)(n.p,{children:"DFS is a traversal algorithm for trees and graphs, exploring as far as possible along each branch before backtracking."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why is it important for interviews?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Used in tree/graph traversal, cycle detection, and path finding."}),"\n",(0,i.jsx)(n.li,{children:"Tests recursion and stack usage."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{children:"Example Problem: DFS in Binary Tree"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Print all nodes in a binary tree using DFS."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," Use recursion."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public static void dfs(TreeNode root) {\r\n    if (root == null) return;\r\n    System.out.print(root.val + " ");\r\n    dfs(root.left);\r\n    dfs(root.right);\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{children:"Interview Scenarios"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"DFS in Graphs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Find All Paths"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Cycle Detection"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{children:"Practice Problems"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"LeetCode 200. Number of Islands"}),"\n",(0,i.jsx)(n.li,{children:"LeetCode 695. Max Area of Island"}),"\n",(0,i.jsx)(n.li,{children:"LeetCode 417. Pacific Atlantic Water Flow"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{children:"Key Takeaways"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"DFS is essential for tree and graph problems."}),"\n",(0,i.jsx)(n.li,{children:"Practice recursive and iterative DFS for interviews."}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},75595:function(e,n,r){r.d(n,{a:function(){return t}});var i=r(2265);let s=i.createContext({});function t(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);