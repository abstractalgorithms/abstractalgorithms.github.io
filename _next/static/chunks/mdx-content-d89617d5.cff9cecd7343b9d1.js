"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7359],{72183:function(e,r,n){n.r(r),n.d(r,{default:function(){return l},frontmatter:function(){return i},metadata:function(){return a}});var t=n(57437),s=n(52671);let i=void 0,a={postId:"183ea99d-02e5-4ecf-a7cc-a74bfaa0fa18",title:"Little's Law: Understanding Queue Performance in Distributed Systems",date:"2024-03-05",excerpt:"Master Little's Law to optimize system performance, predict throughput, and design scalable distributed systems with practical queuing theory.",author:"Abstract Algorithms",tags:["queueing-theory","performance","system-design","mathematics","distributed-systems","scalability"],status:"published"};function o(e){let r={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"Little's Law is a fundamental principle in queueing theory and system performance analysis. It provides a simple yet powerful relationship that governs how items flow through any stable system—whether it's customers in a bakery, requests in a web server, or tasks in a distributed pipeline."}),"\n",(0,t.jsx)(r.p,{children:"This article will help you:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Understand the intuition and math behind Little's Law"}),"\n",(0,t.jsx)(r.li,{children:"Apply it to real-world engineering scenarios"}),"\n",(0,t.jsx)(r.li,{children:"Use it for capacity planning, performance optimization, and system design"}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{children:"What is Little's Law?"}),"\n",(0,t.jsx)(r.p,{children:"Little's Law describes the relationship between:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"L"}),": Average number of items in the system (queue length)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"λ"}),": Average arrival rate (items per unit time)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"W"}),": Average time an item spends in the system (wait + service)"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"The formula is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"L = λ \xd7 W\n"})}),"\n",(0,t.jsxs)(r.p,{children:["This means: ",(0,t.jsx)(r.strong,{children:"The average number of items in a stable system equals the arrival rate times the average time each item spends in the system."})]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{children:"Why Does Little's Law Matter?"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Predict System Behavior"}),": Know any two variables, calculate the third"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Optimize Resource Allocation"}),": Right-size your system for demand"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Analyze Bottlenecks"}),": Find and fix performance limits"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Set Realistic SLAs"}),": Base agreements on math, not guesswork"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{children:"Intuition: The Bakery Analogy"}),"\n",(0,t.jsx)(r.p,{children:"Imagine a busy bakery:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"On average, 10 customers are in the shop (L = 10)"}),"\n",(0,t.jsx)(r.li,{children:"Each spends 5 minutes inside (W = 5)"}),"\n",(0,t.jsx)(r.li,{children:"New customers arrive at 120 per hour (λ = 120/hour = 2/minute)"}),"\n"]}),"\n",(0,t.jsx)("img",{src:"/posts/little's-law/assets/queue-example.png",alt:"Little's Law Queue Example - Arrivals → Queue → Service → Departures with L=10 customers, W=5 min, λ=120 cust/hr",className:"w-full my-8 rounded-lg shadow-sm"}),"\n",(0,t.jsx)(r.p,{children:"Using Little's Law:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"10 = 120 \xd7 (5/60) → 10 = 120 \xd7 0.083 = 10 ✓"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"This helps the owner balance staff and service to keep wait times low."}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{children:"Practical Engineering Examples"}),"\n",(0,t.jsx)(r.h3,{children:"1. Web Server Performance"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Server receives 100 requests/sec (λ = 100)"}),"\n",(0,t.jsx)(r.li,{children:"Average response time is 0.5 sec (W = 0.5)"}),"\n",(0,t.jsx)(r.li,{children:"L = 100 \xd7 0.5 = 50 concurrent requests"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{children:"2. Database Connection Pools"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"DB receives 200 queries/sec (λ = 200)"}),"\n",(0,t.jsx)(r.li,{children:"Avg. query time is 0.1 sec (W = 0.1)"}),"\n",(0,t.jsx)(r.li,{children:"L = 200 \xd7 0.1 = 20 concurrent connections needed"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{children:"3. Microservices Architecture"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Service processes 500 tasks/min (λ = 500)"}),"\n",(0,t.jsx)(r.li,{children:"Each task takes 2 min (W = 2)"}),"\n",(0,t.jsx)(r.li,{children:"L = 500 \xd7 2 = 1,000 tasks in the system"}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{children:"Advanced Example: Throughput, TPS, and Concurrency"}),"\n",(0,t.jsx)(r.p,{children:"Let's analyze a more complex scenario step-by-step."}),"\n",(0,t.jsx)(r.h3,{children:"Given:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"TPS (Transactions Per Second)"})," = 200"]}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Each request takes 3 seconds to process"})}),"\n"]}),"\n",(0,t.jsx)(r.h3,{children:"What is Throughput?"}),"\n",(0,t.jsx)(r.p,{children:"Throughput = requests completed per second."}),"\n",(0,t.jsx)(r.h3,{children:"Understanding the Problem"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"200 transactions arrive per second (TPS = 200)"}),"\n",(0,t.jsx)(r.li,{children:"Each takes 3 seconds to process"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{children:"Key Insight"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"If the system can process requests in parallel, throughput depends on concurrency"}),"\n",(0,t.jsx)(r.li,{children:"If sequential, throughput is limited by processing time"}),"\n"]}),"\n",(0,t.jsx)(r.h4,{children:"Case 1: Sequential Processing"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Each request takes 3 seconds"}),"\n",(0,t.jsx)(r.li,{children:"In 1 second, system can process 1/3 of a request"}),"\n",(0,t.jsx)(r.li,{children:"Throughput = 1/3 TPS ≈ 0.333 TPS"}),"\n"]}),"\n",(0,t.jsx)(r.h4,{children:"Case 2: Parallel Processing"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"System receives 200 requests/sec, each takes 3 sec"}),"\n",(0,t.jsx)(r.li,{children:"At any moment, 200 \xd7 3 = 600 requests are in progress"}),"\n",(0,t.jsx)(r.li,{children:"Throughput is 200 TPS (if system can handle 600 concurrent requests)"}),"\n"]}),"\n",(0,t.jsx)("img",{src:"/posts/little's-law/assets/throughput.png",alt:"Advanced Example - Throughput req/sec",className:"w-full my-8 rounded-lg shadow-sm"}),"\n",(0,t.jsx)(r.h4,{children:"Summary Table"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Scenario"}),(0,t.jsx)(r.th,{children:"Throughput (TPS)"}),(0,t.jsx)(r.th,{children:"Notes"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Sequential processing"}),(0,t.jsx)(r.td,{children:"~0.333 TPS"}),(0,t.jsx)(r.td,{children:"System can only process 1 request every 3 seconds"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Parallel processing capable"}),(0,t.jsx)(r.td,{children:"200 TPS"}),(0,t.jsx)(r.td,{children:"System handles 600 concurrent requests"})]})]})]}),"\n",(0,t.jsx)(r.h4,{children:"Final Notes"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"If your system can process 200 TPS and each takes 3 sec, it must handle 600 concurrent requests"}),"\n",(0,t.jsx)(r.li,{children:"Throughput is 200 TPS only if concurrency is supported"}),"\n",(0,t.jsx)(r.li,{children:"If not, throughput is limited by processing time"}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{children:"How to Use Little's Law in Practice"}),"\n",(0,t.jsx)(r.h3,{children:"1. Monitoring and Metrics"}),"\n",(0,t.jsx)(r.p,{children:"Track all three variables:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"L"}),": Monitor active connections, pending requests"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"λ"}),": Track incoming request rates"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"W"}),": Measure end-to-end response times"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{children:"2. Capacity Planning"}),"\n",(0,t.jsx)(r.p,{children:"Use Little's Law for proactive scaling:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Example capacity calculation\r\nconst targetResponseTime = 0.2; // 200ms SLA\r\nconst expectedLoad = 1000; // requests/second\r\nconst requiredCapacity = expectedLoad * targetResponseTime; // 200 concurrent requests\n"})}),"\n",(0,t.jsx)(r.h3,{children:"3. Performance Optimization"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Reduce ",(0,t.jsx)(r.strong,{children:"W"}),": Optimize code, use caching, improve DB queries"]}),"\n",(0,t.jsxs)(r.li,{children:["Manage ",(0,t.jsx)(r.strong,{children:"λ"}),": Rate limiting, load balancing, batching"]}),"\n",(0,t.jsxs)(r.li,{children:["Control ",(0,t.jsx)(r.strong,{children:"L"}),": Set connection limits, use circuit breakers"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{children:"Advanced Considerations"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"System Stability"}),": Law assumes arrival rate ≈ departure rate (steady state)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Multiple Service Centers"}),": Apply to each stage/component"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Non-Uniform Distributions"}),": High variance in service times can impact user experience"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{children:"Conclusion"}),"\n",(0,t.jsx)(r.p,{children:"Little's Law is more than a mathematical curiosity—it's a practical tool for system architects and engineers. Whether you're running a bakery or building distributed systems, understanding the relationship between arrival rate, wait time, and queue length is crucial for optimal performance."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Key Takeaway:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Measure what matters"}),"\n",(0,t.jsx)(r.li,{children:"Use Little's Law to guide design and scaling"}),"\n",(0,t.jsx)(r.li,{children:"Build systems that scale gracefully under load"}),"\n"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},11824:function(e,r,n){n.r(r),n.d(r,{default:function(){return l},frontmatter:function(){return i},metadata:function(){return a}});var t=n(57437),s=n(52671);let i=void 0,a={postId:"3ae8a2ac-3949-4407-985e-e2c9b0f50106",title:"LLM Engineering Mastery - Complete Series",date:"2024-01-27",excerpt:"Complete LLM Engineering Mastery series with 3 parts covering Part 1 of the LLM Engineering Mastery series: Master foundation models from an engineering perspective - understanding capabilities, limitations, and practical integration strategies.",author:"Abstract Algorithms",tags:["llm","genai","engineering","foundation-models","practical-ai"],status:"published",coverImage:"./assets/llm-engineering-series.png",series:{name:"LLM Engineering Mastery",total:3,isOverview:!0,parts:[{order:1,title:"LLM Engineering Mastery: Part 1 - Understanding and Leveraging Foundation Models",url:"/posts/llm-engineering-part-1/",excerpt:"Part 1 of the LLM Engineering Mastery series: Master foundation models from an engineering perspective - understanding capabilities, limitations, and practical integration strategies."},{order:2,title:"LLM Engineering Mastery: Part 2 - Advanced Prompt Engineering and RAG Systems",url:"/posts/llm-engineering-part-2/",excerpt:"Part 2 of the LLM Engineering Mastery series: Master advanced prompt engineering techniques and build production-ready RAG systems for enhanced LLM applications."},{order:3,title:"LLM Engineering Mastery: Part 3 - Production Deployment and Scaling",url:"/posts/llm-engineering-part-3/",excerpt:"Part 3 of the LLM Engineering Mastery series: Master production deployment, scaling strategies, monitoring, and security for enterprise-grade LLM applications."}]}};function o(e){let r={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{children:"LLM Engineering Mastery"}),"\n",(0,t.jsx)(r.p,{children:"Part 1 of the LLM Engineering Mastery series: Master foundation models from an engineering perspective - understanding capabilities, limitations, and practical integration strategies."}),"\n",(0,t.jsx)(r.h2,{children:"Series Overview"}),"\n",(0,t.jsx)(r.p,{children:"This comprehensive 3-part series covers:"}),"\n",(0,t.jsx)(r.h3,{children:"1. LLM Engineering Mastery: Part 1 - Understanding and Leveraging Foundation Models"}),"\n",(0,t.jsx)(r.p,{children:"Part 1 of the LLM Engineering Mastery series: Master foundation models from an engineering perspective - understanding capabilities, limitations, and practical integration strategies."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"/posts/llm-engineering-part-1/",children:"Read Part 1 →"})}),"\n",(0,t.jsx)(r.h3,{children:"2. LLM Engineering Mastery: Part 2 - Advanced Prompt Engineering and RAG Systems"}),"\n",(0,t.jsx)(r.p,{children:"Part 2 of the LLM Engineering Mastery series: Master advanced prompt engineering techniques and build production-ready RAG systems for enhanced LLM applications."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"/posts/llm-engineering-part-2/",children:"Read Part 2 →"})}),"\n",(0,t.jsx)(r.h3,{children:"3. LLM Engineering Mastery: Part 3 - Production Deployment and Scaling"}),"\n",(0,t.jsx)(r.p,{children:"Part 3 of the LLM Engineering Mastery series: Master production deployment, scaling strategies, monitoring, and security for enterprise-grade LLM applications."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"/posts/llm-engineering-part-3/",children:"Read Part 3 →"})}),"\n",(0,t.jsx)(r.h2,{children:"Getting Started"}),"\n",(0,t.jsx)(r.p,{children:"Ready to dive in? Start with Part 1 and work your way through the series:"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"/posts/llm-engineering-part-1/",children:"Begin with Part 1 →"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:"This series is designed to be read sequentially for the best learning experience."})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},59438:function(e,r,n){n.r(r),n.d(r,{default:function(){return l},frontmatter:function(){return i},metadata:function(){return a}});var t=n(57437),s=n(52671);let i=void 0,a={postId:"f47ac10b-58cc-4372-a567-0e02b2c3d479",title:"LLM Engineering Mastery: Part 1 - Understanding and Leveraging Foundation Models",date:"2024-01-27",excerpt:"Part 1 of the LLM Engineering Mastery series: Master foundation models from an engineering perspective - understanding capabilities, limitations, and practical integration strategies.",author:"Abstract Algorithms",tags:["llm","genai","engineering","foundation-models","practical-ai"],status:"published",series:{name:"LLM Engineering Mastery",order:1,total:3,next:"/posts/llm-engineering-mastery-part-2-advanced-prompt-engineering-and-rag-systems",coverImage:"./assets/llm-engineering-series.png",overview:"/posts/llm-engineering-mastery-series/"}};function o(e){let r={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{children:"LLM Engineering Mastery: Part 1 - Understanding and Leveraging Foundation Models"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Part 1 of the LLM Engineering Mastery Series"}),(0,t.jsx)(r.br,{}),"\n","This focused 3-part series is designed for engineers who want to master Large Language Models from a practical, implementation-oriented perspective. Start here to understand foundation models and selection frameworks."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["Welcome to the ",(0,t.jsx)(r.strong,{children:"LLM Engineering Mastery"})," series! This focused 3-part series is designed for engineers who want to master Large Language Models from a practical, implementation-oriented perspective."]}),"\n",(0,t.jsx)(r.h2,{children:"Series Overview"}),"\n",(0,t.jsxs)(r.p,{children:["This series focuses on the ",(0,t.jsx)(r.strong,{children:"engineering perspective"})," of working with LLMs, emphasizing practical usage, integration, and optimization rather than theoretical underpinnings."]}),"\n",(0,t.jsx)(r.h3,{children:"What We'll Cover in This 3-Part Series"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Part 1: Understanding and Leveraging Foundation Models"})," (This part)"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Foundation model ecosystem and selection"}),"\n",(0,t.jsx)(r.li,{children:"API integration patterns and best practices"}),"\n",(0,t.jsx)(r.li,{children:"Performance optimization and cost management"}),"\n",(0,t.jsx)(r.li,{children:"Understanding model capabilities and limitations"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Part 2: Advanced Prompt Engineering and RAG Systems"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Advanced prompting techniques and optimization"}),"\n",(0,t.jsx)(r.li,{children:"Building production-ready RAG systems"}),"\n",(0,t.jsx)(r.li,{children:"Context management and information retrieval"}),"\n",(0,t.jsx)(r.li,{children:"Evaluation and quality assurance"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Part 3: Production Deployment and Scaling"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Infrastructure patterns for LLM applications"}),"\n",(0,t.jsx)(r.li,{children:"Monitoring, observability, and debugging"}),"\n",(0,t.jsx)(r.li,{children:"Security, safety, and compliance"}),"\n",(0,t.jsx)(r.li,{children:"Scaling strategies and performance optimization"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{children:"Part 1: Understanding and Leveraging Foundation Models"}),"\n",(0,t.jsx)(r.p,{children:"As an LLM engineer, your first challenge is understanding the landscape of available models and how to effectively integrate them into your applications."}),"\n",(0,t.jsx)(r.h3,{children:"The Foundation Model Ecosystem"}),"\n",(0,t.jsx)(r.h4,{children:"Major Model Families and Their Sweet Spots"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"OpenAI GPT Family"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"GPT-4 Turbo"}),": Best for complex reasoning, coding, analysis"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"GPT-3.5 Turbo"}),": Cost-effective for most conversational tasks"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use Cases"}),": Customer support, content generation, code assistance"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Anthropic Claude Family"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Claude-3 Opus"}),": Superior for safety-critical applications"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Claude-3 Sonnet"}),": Balanced performance and cost"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use Cases"}),": Content moderation, research assistance, ethical AI applications"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Google PaLM/Gemini Family"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Gemini Pro"}),": Strong multimodal capabilities"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"PaLM 2"}),": Excellent for multilingual applications"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use Cases"}),": Translation, multimodal applications, search enhancement"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Open Source Models"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Llama 2/Code Llama"}),": Self-hosted deployment"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Mistral"}),": European alternative with strong performance"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use Cases"}),": On-premises deployment, customization, cost control"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{children:"Model Selection Framework"}),"\n",(0,t.jsx)(r.h4,{children:"Performance vs. Cost Analysis"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class ModelSelectionFramework:\r\n    def __init__(self):\r\n        self.models = {\r\n            "gpt-4-turbo": {\r\n                "cost_per_1k_tokens": {"input": 0.01, "output": 0.03},\r\n                "context_window": 128000,\r\n                "strengths": ["reasoning", "coding", "analysis"],\r\n                "latency_ms": 2000\r\n            },\r\n            "gpt-3.5-turbo": {\r\n                "cost_per_1k_tokens": {"input": 0.0015, "output": 0.002},\r\n                "context_window": 16000,\r\n                "strengths": ["speed", "cost", "general"],\r\n                "latency_ms": 800\r\n            },\r\n            "claude-3-sonnet": {\r\n                "cost_per_1k_tokens": {"input": 0.003, "output": 0.015},\r\n                "context_window": 200000,\r\n                "strengths": ["safety", "long_context", "reasoning"],\r\n                "latency_ms": 1500\r\n            }\r\n        }\r\n    \r\n    def calculate_cost(self, model_name, input_tokens, output_tokens):\r\n        model = self.models[model_name]\r\n        input_cost = (input_tokens / 1000) * model["cost_per_1k_tokens"]["input"]\r\n        output_cost = (output_tokens / 1000) * model["cost_per_1k_tokens"]["output"]\r\n        return input_cost + output_cost\r\n    \r\n    def recommend_model(self, requirements):\r\n        """\r\n        Recommend model based on requirements:\r\n        - latency_sensitive: bool\r\n        - cost_sensitive: bool\r\n        - context_length: int\r\n        - task_type: str\r\n        """\r\n        scores = {}\r\n        for model_name, specs in self.models.items():\r\n            score = 0\r\n            \r\n            # Latency scoring\r\n            if requirements.get("latency_sensitive", False):\r\n                score += 10 if specs["latency_ms"] < 1000 else 5\r\n            \r\n            # Cost scoring\r\n            if requirements.get("cost_sensitive", False):\r\n                avg_cost = (specs["cost_per_1k_tokens"]["input"] + \r\n                           specs["cost_per_1k_tokens"]["output"]) / 2\r\n                score += 10 if avg_cost < 0.005 else 5\r\n            \r\n            # Context length scoring\r\n            if requirements.get("context_length", 0) > specs["context_window"]:\r\n                score = 0  # Disqualify if context too long\r\n            \r\n            # Task type scoring\r\n            task_type = requirements.get("task_type", "")\r\n            if task_type in specs["strengths"]:\r\n                score += 15\r\n            \r\n            scores[model_name] = score\r\n        \r\n        return max(scores, key=scores.get) if scores else None\r\n\r\n# Usage example\r\nframework = ModelSelectionFramework()\r\nrecommendation = framework.recommend_model({\r\n    "latency_sensitive": True,\r\n    "cost_sensitive": True,\r\n    "context_length": 8000,\r\n    "task_type": "general"\r\n})\r\nprint("Recommended model:", recommendation)\n'})}),"\n",(0,t.jsx)(r.h3,{children:"API Integration Patterns"}),"\n",(0,t.jsx)(r.h4,{children:"1. Robust Client Implementation"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'import asyncio\r\nimport aiohttp\r\nimport backoff\r\nfrom typing import Optional, Dict, Any\r\nimport logging\r\n\r\nclass LLMClient:\r\n    def __init__(self, api_key: str, base_url: str, model: str):\r\n        self.api_key = api_key\r\n        self.base_url = base_url\r\n        self.model = model\r\n        self.session = None\r\n        self.logger = logging.getLogger(__name__)\r\n    \r\n    async def __aenter__(self):\r\n        self.session = aiohttp.ClientSession(\r\n            headers={"Authorization": "Bearer {self.api_key}".format(self.api_key)},\r\n            timeout=aiohttp.ClientTimeout(total=60)\r\n        )\r\n        return self\r\n    \r\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\r\n        if self.session:\r\n            await self.session.close()\r\n    \r\n    @backoff.on_exception(\r\n        backoff.expo,\r\n        (aiohttp.ClientError, asyncio.TimeoutError),\r\n        max_tries=3,\r\n        max_time=300\r\n    )\r\n    async def complete(\r\n        self, \r\n        messages: list,\r\n        temperature: float = 0.7,\r\n        max_tokens: int = 1000,\r\n        **kwargs\r\n    ) -> Dict[str, Any]:\r\n        """\r\n        Complete a chat conversation with robust error handling\r\n        """\r\n        payload = {\r\n            "model": self.model,\r\n            "messages": messages,\r\n            "temperature": temperature,\r\n            "max_tokens": max_tokens,\r\n            **kwargs\r\n        }\r\n        \r\n        try:\r\n            async with self.session.post(\r\n                "{self.base_url}/chat/completions".format(self.base_url),\r\n                json=payload\r\n            ) as response:\r\n                response.raise_for_status()\r\n                result = await response.json()\r\n                \r\n                # Log usage for monitoring\r\n                usage = result.get("usage", {})\r\n                self.logger.info(\r\n                    "API call completed",\r\n                    extra={\r\n                        "model": self.model,\r\n                        "input_tokens": usage.get("prompt_tokens", 0),\r\n                        "output_tokens": usage.get("completion_tokens", 0),\r\n                        "total_tokens": usage.get("total_tokens", 0)\r\n                    }\r\n                )\r\n                \r\n                return result\r\n                \r\n        except aiohttp.ClientResponseError as e:\r\n            if e.status == 429:  # Rate limit\r\n                self.logger.warning("Rate limited, backing off")\r\n                raise\r\n            elif e.status == 400:  # Bad request\r\n                self.logger.error("Bad request", extra={"payload": payload})\r\n                raise ValueError("Invalid request parameters")\r\n            else:\r\n                self.logger.error("API error", extra={"status": e.status})\r\n                raise\r\n    \r\n    async def stream_complete(\r\n        self,\r\n        messages: list,\r\n        **kwargs\r\n    ):\r\n        """\r\n        Stream completion for real-time applications\r\n        """\r\n        payload = {\r\n            "model": self.model,\r\n            "messages": messages,\r\n            "stream": True,\r\n            **kwargs\r\n        }\r\n        \r\n        async with self.session.post(\r\n            "{self.base_url}/chat/completions".format(self.base_url),\r\n            json=payload\r\n        ) as response:\r\n            response.raise_for_status()\r\n            \r\n            async for line in response.content:\r\n                line = line.decode(\'utf-8\').strip()\r\n                if line.startswith(\'data: \'):\r\n                    data = line[6:]\r\n                    if data == \'[DONE]\':\r\n                        break\r\n                    try:\r\n                        yield json.loads(data)\r\n                    except json.JSONDecodeError:\r\n                        continue\r\n\r\n# Usage example\r\nasync def main():\r\n    async with LLMClient(\r\n        api_key="your-api-key",\r\n        base_url="https://api.openai.com/v1",\r\n        model="gpt-3.5-turbo"\r\n    ) as client:\r\n        \r\n        response = await client.complete(\r\n            messages=[\r\n                {"role": "user", "content": "Explain quantum computing"}\r\n            ],\r\n            temperature=0.3\r\n        )\r\n        \r\n        print(response["choices"][0]["message"]["content"])\n'})}),"\n",(0,t.jsx)(r.h4,{children:"2. Multi-Provider Abstraction Layer"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\nfrom enum import Enum\r\n\r\nclass Provider(Enum):\r\n    OPENAI = "openai"\r\n    ANTHROPIC = "anthropic"\r\n    GOOGLE = "google"\r\n\r\nclass LLMProvider(ABC):\r\n    @abstractmethod\r\n    async def complete(self, messages: list, **kwargs) -> Dict[str, Any]:\r\n        pass\r\n    \r\n    @abstractmethod\r\n    def estimate_tokens(self, text: str) -> int:\r\n        pass\r\n\r\nclass OpenAIProvider(LLMProvider):\r\n    def __init__(self, api_key: str, model: str = "gpt-3.5-turbo"):\r\n        self.client = LLMClient(api_key, "https://api.openai.com/v1", model)\r\n    \r\n    async def complete(self, messages: list, **kwargs) -> Dict[str, Any]:\r\n        async with self.client as client:\r\n            return await client.complete(messages, **kwargs)\r\n    \r\n    def estimate_tokens(self, text: str) -> int:\r\n        # Rough estimation: 1 token ≈ 4 characters\r\n        return len(text) // 4\r\n\r\nclass AnthropicProvider(LLMProvider):\r\n    def __init__(self, api_key: str, model: str = "claude-3-sonnet-20240229"):\r\n        self.api_key = api_key\r\n        self.model = model\r\n    \r\n    async def complete(self, messages: list, **kwargs) -> Dict[str, Any]:\r\n        # Implement Anthropic-specific API calls\r\n        # Convert messages format, handle different response structure\r\n        pass\r\n    \r\n    def estimate_tokens(self, text: str) -> int:\r\n        # Anthropic-specific token estimation\r\n        return len(text) // 4\r\n\r\nclass LLMManager:\r\n    def __init__(self):\r\n        self.providers = {}\r\n    \r\n    def register_provider(self, name: str, provider: LLMProvider):\r\n        self.providers[name] = provider\r\n    \r\n    async def complete(\r\n        self, \r\n        provider_name: str, \r\n        messages: list, \r\n        fallback_providers: list = None,\r\n        **kwargs\r\n    ) -> Dict[str, Any]:\r\n        """\r\n        Complete with primary provider, fallback to alternatives on failure\r\n        """\r\n        providers_to_try = [provider_name] + (fallback_providers or [])\r\n        \r\n        for provider in providers_to_try:\r\n            if provider not in self.providers:\r\n                continue\r\n                \r\n            try:\r\n                return await self.providers[provider].complete(messages, **kwargs)\r\n            except Exception as e:\r\n                logging.warning("Provider {provider} failed: {e}".format(e))\r\n                if provider == providers_to_try[-1]:  # Last provider\r\n                    raise\r\n                continue\r\n\r\n# Usage\r\nmanager = LLMManager()\r\nmanager.register_provider("openai", OpenAIProvider("openai-key"))\r\nmanager.register_provider("anthropic", AnthropicProvider("anthropic-key"))\r\n\r\nresponse = await manager.complete(\r\n    "openai",\r\n    messages=[{"role": "user", "content": "Hello"}],\r\n    fallback_providers=["anthropic"]\r\n)\n'})}),"\n",(0,t.jsx)(r.h3,{children:"Performance Optimization and Cost Management"}),"\n",(0,t.jsx)(r.h4,{children:"Token Usage Optimization"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class TokenOptimizer:\r\n    def __init__(self, provider: LLMProvider):\r\n        self.provider = provider\r\n    \r\n    def compress_conversation_history(\r\n        self, \r\n        messages: list, \r\n        max_tokens: int = 4000\r\n    ) -> list:\r\n        """\r\n        Intelligently compress conversation history to fit token limits\r\n        """\r\n        # Always keep system message and last user message\r\n        if len(messages) <= 2:\r\n            return messages\r\n        \r\n        system_msg = messages[0] if messages[0]["role"] == "system" else None\r\n        recent_messages = messages[-2:]  # Last user + assistant\r\n        middle_messages = messages[1:-2] if len(messages) > 2 else []\r\n        \r\n        # Estimate current token usage\r\n        current_tokens = sum(\r\n            self.provider.estimate_tokens(msg["content"]) \r\n            for msg in messages\r\n        )\r\n        \r\n        if current_tokens <= max_tokens:\r\n            return messages\r\n        \r\n        # Compress middle messages by summarizing them\r\n        if middle_messages:\r\n            summary_prompt = self._create_summary_prompt(middle_messages)\r\n            # Use cheaper model for summarization\r\n            summary_response = await self.provider.complete(\r\n                [{"role": "user", "content": summary_prompt}],\r\n                model="gpt-3.5-turbo",  # Cheaper model\r\n                max_tokens=200,\r\n                temperature=0.1\r\n            )\r\n            \r\n            summary_message = {\r\n                "role": "assistant",\r\n                "content": "[Previous conversation summary: " + summary_response[\'choices\'][0][\'message\'][\'content\'] + "]"\r\n            }\r\n            \r\n            compressed = [system_msg, summary_message] + recent_messages\r\n            return [msg for msg in compressed if msg is not None]\r\n        \r\n        return ([system_msg] if system_msg else []) + recent_messages\r\n    \r\n    def _create_summary_prompt(self, messages: list) -> str:\r\n        conversation = "\\n".join([\r\n            msg[\'role\'] + ": " + msg[\'content\'] for msg in messages\r\n        ])\r\n        return """Summarize this conversation concisely, preserving key context and decisions made:\r\n\r\n""" + conversation + """\r\n\r\nSummary (max 150 words):"""\r\n\r\n    async def optimize_prompt(self, prompt: str, task_type: str = "general") -> str:\r\n        """\r\n        Optimize prompt for clarity and token efficiency\r\n        """\r\n        optimization_prompts = {\r\n            "general": "Rewrite this prompt to be more concise while preserving meaning",\r\n            "coding": "Rewrite this coding prompt to be clear and specific",\r\n            "analysis": "Rewrite this analysis prompt to be focused and actionable"\r\n        }\r\n        \r\n        opt_prompt = optimization_prompts.get(task_type, optimization_prompts["general"])\r\n        \r\n        response = await self.provider.complete([\r\n            {\r\n                "role": "user", \r\n                "content": opt_prompt + ":\\n\\n" + prompt + "\\n\\nOptimized prompt:"\r\n            }\r\n        ], max_tokens=300, temperature=0.1)\r\n        \r\n        return response["choices"][0]["message"]["content"].strip()\n'})}),"\n",(0,t.jsx)(r.h4,{children:"Cost Monitoring and Budgeting"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'import asyncio\r\nfrom datetime import datetime, timedelta\r\nfrom dataclasses import dataclass\r\nfrom typing import Dict, List\r\n\r\n@dataclass\r\nclass UsageRecord:\r\n    timestamp: datetime\r\n    model: str\r\n    input_tokens: int\r\n    output_tokens: int\r\n    cost: float\r\n    operation: str\r\n\r\nclass CostMonitor:\r\n    def __init__(self, daily_budget: float = 100.0):\r\n        self.daily_budget = daily_budget\r\n        self.usage_records: List[UsageRecord] = []\r\n        self.model_costs = {\r\n            "gpt-4-turbo": {"input": 0.01, "output": 0.03},\r\n            "gpt-3.5-turbo": {"input": 0.0015, "output": 0.002},\r\n            "claude-3-sonnet": {"input": 0.003, "output": 0.015}\r\n        }\r\n    \r\n    def log_usage(\r\n        self, \r\n        model: str, \r\n        input_tokens: int, \r\n        output_tokens: int,\r\n        operation: str = "completion"\r\n    ):\r\n        """Log API usage for cost tracking"""\r\n        cost = self.calculate_cost(model, input_tokens, output_tokens)\r\n        \r\n        record = UsageRecord(\r\n            timestamp=datetime.now(),\r\n            model=model,\r\n            input_tokens=input_tokens,\r\n            output_tokens=output_tokens,\r\n            cost=cost,\r\n            operation=operation\r\n        )\r\n        \r\n        self.usage_records.append(record)\r\n        \r\n        # Check if approaching budget\r\n        daily_spend = self.get_daily_spend()\r\n        if daily_spend > self.daily_budget * 0.8:\r\n            logging.warning(\r\n                "Approaching daily budget: $" + str(round(daily_spend, 2)) + " / $" + str(self.daily_budget)\r\n            )\r\n    \r\n    def calculate_cost(self, model: str, input_tokens: int, output_tokens: int) -> float:\r\n        """Calculate cost for API call"""\r\n        if model not in self.model_costs:\r\n            return 0.0\r\n        \r\n        costs = self.model_costs[model]\r\n        input_cost = (input_tokens / 1000) * costs["input"]\r\n        output_cost = (output_tokens / 1000) * costs["output"]\r\n        \r\n        return input_cost + output_cost\r\n    \r\n    def get_daily_spend(self, date: datetime = None) -> float:\r\n        """Get total spending for a specific day"""\r\n        if date is None:\r\n            date = datetime.now()\r\n        \r\n        start_of_day = date.replace(hour=0, minute=0, second=0, microsecond=0)\r\n        end_of_day = start_of_day + timedelta(days=1)\r\n        \r\n        daily_records = [\r\n            record for record in self.usage_records\r\n            if start_of_day <= record.timestamp < end_of_day\r\n        ]\r\n        \r\n        return sum(record.cost for record in daily_records)\r\n    \r\n    def get_model_breakdown(self, days: int = 7) -> Dict[str, float]:\r\n        """Get cost breakdown by model for the last N days"""\r\n        cutoff_date = datetime.now() - timedelta(days=days)\r\n        recent_records = [\r\n            record for record in self.usage_records\r\n            if record.timestamp >= cutoff_date\r\n        ]\r\n        \r\n        breakdown = {}\r\n        for record in recent_records:\r\n            breakdown[record.model] = breakdown.get(record.model, 0) + record.cost\r\n        \r\n        return breakdown\r\n    \r\n    def should_throttle(self) -> bool:\r\n        """Check if we should throttle requests due to budget"""\r\n        return self.get_daily_spend() >= self.daily_budget\r\n\r\n# Integration with LLM client\r\nclass MonitoredLLMClient(LLMClient):\r\n    def __init__(self, *args, cost_monitor: CostMonitor = None, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.cost_monitor = cost_monitor or CostMonitor()\r\n    \r\n    async def complete(self, messages: list, **kwargs) -> Dict[str, Any]:\r\n        # Check budget before making request\r\n        if self.cost_monitor.should_throttle():\r\n            raise Exception("Daily budget exceeded")\r\n        \r\n        response = await super().complete(messages, **kwargs)\r\n        \r\n        # Log usage after successful request\r\n        usage = response.get("usage", {})\r\n        self.cost_monitor.log_usage(\r\n            model=self.model,\r\n            input_tokens=usage.get("prompt_tokens", 0),\r\n            output_tokens=usage.get("completion_tokens", 0),\r\n            operation="chat_completion"\r\n        )\r\n        \r\n        return response\n'})}),"\n",(0,t.jsx)(r.h3,{children:"Understanding Model Capabilities and Limitations"}),"\n",(0,t.jsx)(r.h4,{children:"Capability Assessment Framework"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'import time\r\n\r\nclass CapabilityTester:\r\n    def __init__(self, llm_client: LLMClient):\r\n        self.client = llm_client\r\n        self.test_suite = {\r\n            "reasoning": [\r\n                "If it takes 5 machines 5 minutes to make 5 widgets, how long would it take 100 machines to make 100 widgets?",\r\n                "A bat and a ball cost $1.10 in total. The bat costs $1.00 more than the ball. How much does the ball cost?"\r\n            ],\r\n            "coding": [\r\n                "Write a Python function to find the longest palindromic substring",\r\n                "Implement a basic LRU cache in Python"\r\n            ],\r\n            "math": [\r\n                "Calculate the derivative of x^3 + 2x^2 - 5x + 3",\r\n                "Solve the system: 2x + 3y = 7, x - y = 1"\r\n            ],\r\n            "creativity": [\r\n                "Write a haiku about debugging code",\r\n                "Create a metaphor explaining machine learning to a 5-year-old"\r\n            ],\r\n            "analysis": [\r\n                "Analyze the pros and cons of microservices vs monolithic architecture",\r\n                "Compare the trade-offs between SQL and NoSQL databases"\r\n            ]\r\n        }\r\n    \r\n    async def run_capability_assessment(self) -> Dict[str, Dict[str, Any]]:\r\n        """Run comprehensive capability assessment"""\r\n        results = {}\r\n        \r\n        for category, prompts in self.test_suite.items():\r\n            category_results = {\r\n                "scores": [],\r\n                "responses": [],\r\n                "avg_latency": 0,\r\n                "consistency": 0\r\n            }\r\n            \r\n            latencies = []\r\n            responses = []\r\n            \r\n            for prompt in prompts:\r\n                start_time = time.time()\r\n                \r\n                # Test multiple times for consistency\r\n                test_responses = []\r\n                for _ in range(3):\r\n                    response = await self.client.complete([\r\n                        {"role": "user", "content": prompt}\r\n                    ], temperature=0.1)\r\n                    \r\n                    content = response["choices"][0]["message"]["content"]\r\n                    test_responses.append(content)\r\n                \r\n                end_time = time.time()\r\n                latencies.append(end_time - start_time)\r\n                responses.append(test_responses)\r\n                \r\n                # Score quality (simplified - in practice, use more sophisticated scoring)\r\n                quality_score = self._score_response(prompt, test_responses[0], category)\r\n                category_results["scores"].append(quality_score)\r\n                category_results["responses"].append(test_responses[0])\r\n            \r\n            category_results["avg_latency"] = sum(latencies) / len(latencies)\r\n            category_results["consistency"] = self._calculate_consistency(responses)\r\n            \r\n            results[category] = category_results\r\n        \r\n        return results\r\n    \r\n    def _score_response(self, prompt: str, response: str, category: str) -> float:\r\n        """Score response quality (simplified scoring)"""\r\n        # In practice, implement category-specific scoring logic\r\n        # This is a placeholder\r\n        if category == "reasoning":\r\n            # Check for logical structure, correct answer if verifiable\r\n            return 8.5 if len(response) > 50 and "because" in response.lower() else 6.0\r\n        elif category == "coding":\r\n            # Check for code blocks, proper syntax\r\n            return 9.0 if "def " in response or "function" in response else 5.0\r\n        elif category == "math":\r\n            # Check for mathematical notation, step-by-step solution\r\n            return 8.0 if any(char in response for char in "=+-*/") else 4.0\r\n        else:\r\n            # General quality based on length and coherence\r\n            return 7.0 if len(response) > 30 else 4.0\r\n    \r\n    def _calculate_consistency(self, responses: List[List[str]]) -> float:\r\n        """Calculate consistency across multiple runs"""\r\n        # Simplified consistency calculation\r\n        # In practice, use semantic similarity metrics\r\n        total_similarity = 0\r\n        count = 0\r\n        \r\n        for response_group in responses:\r\n            for i in range(len(response_group)):\r\n                for j in range(i + 1, len(response_group)):\r\n                    # Simple similarity based on length and word overlap\r\n                    r1, r2 = response_group[i], response_group[j]\r\n                    similarity = len(set(r1.split()) & set(r2.split())) / max(len(r1.split()), len(r2.split()))\r\n                    total_similarity += similarity\r\n                    count += 1\r\n        \r\n        return total_similarity / count if count > 0 else 0\n'})}),"\n",(0,t.jsx)(r.h2,{children:"Key Takeaways for Part 1"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Model Selection is Critical"}),": Choose based on specific requirements (cost, latency, capabilities)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Robust Integration"}),": Implement proper error handling, retries, and monitoring"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Cost Management"}),": Track usage actively and implement budget controls"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Understand Limitations"}),": Test capabilities systematically and plan accordingly"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Abstraction Layers"}),": Build provider-agnostic systems for flexibility"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{children:"What's Next?"}),"\n",(0,t.jsxs)(r.p,{children:["In ",(0,t.jsx)(r.strong,{children:"Part 2"}),", we'll dive deep into advanced prompt engineering techniques and building production-ready RAG (Retrieval-Augmented Generation) systems that can enhance your LLM applications with external knowledge."]}),"\n",(0,t.jsx)(r.p,{children:"We'll cover:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Advanced prompting strategies (few-shot, chain-of-thought, tree-of-thought)"}),"\n",(0,t.jsx)(r.li,{children:"Building robust RAG architectures"}),"\n",(0,t.jsx)(r.li,{children:"Vector databases and embedding strategies"}),"\n",(0,t.jsx)(r.li,{children:"Context optimization and retrieval quality"}),"\n",(0,t.jsx)(r.li,{children:"Evaluation frameworks for prompt and RAG performance"}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:"This series is designed for practicing engineers who want to master LLM integration and deployment. Each part builds upon the previous while remaining practical and implementation-focused."})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},79762:function(e,r,n){n.r(r),n.d(r,{default:function(){return l},frontmatter:function(){return i},metadata:function(){return a}});var t=n(57437),s=n(52671);let i=void 0,a={postId:"8e7d5b2c-9f3a-4e1b-8c6d-1a2b3c4d5e6f",title:"LLM Engineering Mastery: Part 2 - Advanced Prompt Engineering and RAG Systems",date:"2024-02-03",excerpt:"Part 2 of the LLM Engineering Mastery series: Master advanced prompt engineering techniques and build production-ready RAG systems for enhanced LLM applications.",author:"Abstract Algorithms",tags:["llm","prompt-engineering","rag","vector-databases","retrieval"],status:"published",series:{name:"LLM Engineering Mastery",order:2,total:3,prev:"/posts/llm-engineering-mastery-part-1-understanding-and-leveraging-foundation-models",next:"/posts/llm-engineering-mastery-part-3-production-deployment-and-scaling",coverImage:"./assets/llm-engineering-series.png",overview:"/posts/llm-engineering-mastery-series/"}};function o(e){let r={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{children:"LLM Engineering Mastery: Part 2 - Advanced Prompt Engineering and RAG Systems"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Part 2 of the LLM Engineering Mastery Series"}),(0,t.jsx)(r.br,{}),"\n","Building on foundation model integration, this part explores advanced prompt engineering and production-ready RAG systems. Master the techniques that make LLM applications truly powerful and reliable."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Building on the foundation model integration from Part 1, we now dive deep into advanced prompt engineering techniques and Retrieval-Augmented Generation (RAG) systems that can dramatically enhance your LLM applications' capabilities and reliability."}),"\n",(0,t.jsx)(r.h2,{children:"Advanced Prompt Engineering Techniques"}),"\n",(0,t.jsx)(r.h3,{children:"1. Few-Shot Learning Patterns"}),"\n",(0,t.jsx)(r.p,{children:"Few-shot prompting provides examples to guide the model's behavior and output format."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class FewShotPromptBuilder:\r\n    def __init__(self):\r\n        self.examples = {}\r\n    \r\n    def add_example(self, category: str, input_text: str, output_text: str):\r\n        """Add an example for few-shot learning"""\r\n        if category not in self.examples:\r\n            self.examples[category] = []\r\n        \r\n        self.examples[category].append({\r\n            "input": input_text,\r\n            "output": output_text\r\n        })\r\n    \r\n    def build_prompt(self, category: str, query: str, max_examples: int = 3) -> str:\r\n        """Build a few-shot prompt with examples"""\r\n        if category not in self.examples:\r\n            return query\r\n        \r\n        examples = self.examples[category][:max_examples]\r\n        \r\n        prompt_parts = [\r\n            "Here are some examples of the expected format:",\r\n            ""\r\n        ]\r\n        \r\n        for i, example in enumerate(examples, 1):\r\n            prompt_parts.extend([\r\n                "Example " + str(i) + ":",\r\n                "Input: " + example["input"],\r\n                "Output: " + example["output"],\r\n                ""\r\n            ])\r\n        \r\n        prompt_parts.extend([\r\n            "Now, please process this input:",\r\n            "Input: " + query,\r\n            "Output:"\r\n        ])\r\n        \r\n        return "\\n".join(prompt_parts)\r\n\r\n# Usage for code generation\r\nprompt_builder = FewShotPromptBuilder()\r\n\r\n# Add examples for Python function generation\r\nprompt_builder.add_example(\r\n    "python_function",\r\n    "Create a function to calculate factorial",\r\n    """def factorial(n):\r\n    if n <= 1:\r\n        return 1\r\n    return n * factorial(n - 1)"""\r\n)\r\n\r\nprompt_builder.add_example(\r\n    "python_function", \r\n    "Create a function to check if a string is palindrome",\r\n    """def is_palindrome(s):\r\n    s = s.lower().replace(\' \', \'\')\r\n    return s == s[::-1]"""\r\n)\r\n\r\n# Generate prompt for new task\r\nprompt = prompt_builder.build_prompt(\r\n    "python_function",\r\n    "Create a function to find the maximum element in a list"\r\n)\n'})}),"\n",(0,t.jsx)(r.h3,{children:"2. Chain-of-Thought (CoT) Reasoning"}),"\n",(0,t.jsx)(r.p,{children:"Chain-of-thought prompting encourages step-by-step reasoning for complex problems."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class ChainOfThoughtPrompt:\r\n    def __init__(self):\r\n        self.reasoning_templates = {\r\n            "problem_solving": """Let\'s solve this step by step:\r\n\r\n1. First, I need to understand what the problem is asking\r\n2. Then, I\'ll identify the key information given\r\n3. Next, I\'ll determine what approach to use\r\n4. Finally, I\'ll work through the solution step by step\r\n\r\nProblem: {problem}\r\n\r\nStep-by-step solution:""",\r\n            \r\n            "code_debugging": """Let me debug this code systematically:\r\n\r\n1. First, I\'ll read through the code to understand its purpose\r\n2. Then, I\'ll identify potential issues or errors\r\n3. Next, I\'ll analyze the logic flow\r\n4. Finally, I\'ll provide the corrected version with explanations\r\n\r\nCode to debug: {code}\r\n\r\nDebugging analysis:""",\r\n            \r\n            "data_analysis": """Let me analyze this data step by step:\r\n\r\n1. First, I\'ll examine the data structure and format\r\n2. Then, I\'ll identify patterns and key metrics\r\n3. Next, I\'ll consider what insights can be drawn\r\n4. Finally, I\'ll provide conclusions and recommendations\r\n\r\nData: {data}\r\n\r\nAnalysis:"""\r\n        }\r\n    \r\n    def generate_cot_prompt(self, template_type: str, **kwargs) -> str:\r\n        """Generate a chain-of-thought prompt"""\r\n        if template_type not in self.reasoning_templates:\r\n            raise ValueError("Unknown template type: " + template_type)\r\n        \r\n        return self.reasoning_templates[template_type].format(**kwargs)\r\n    \r\n    def create_custom_cot(self, problem_description: str, steps: list) -> str:\r\n        """Create a custom chain-of-thought prompt"""\r\n        prompt_parts = [\r\n            "Let\'s approach this systematically:",\r\n            ""\r\n        ]\r\n        \r\n        for i, step in enumerate(steps, 1):\r\n            prompt_parts.append(str(i) + ". " + step)\r\n        \r\n        prompt_parts.extend([\r\n            "",\r\n            "Problem: " + problem_description,\r\n            "",\r\n            "Step-by-step solution:"\r\n        ])\r\n        \r\n        return "\\n".join(prompt_parts)\r\n\r\n# Usage example\r\ncot = ChainOfThoughtPrompt()\r\n\r\n# For complex problem solving\r\nmath_prompt = cot.generate_cot_prompt(\r\n    "problem_solving",\r\n    problem="A company\'s revenue increased by 25% in Q1, decreased by 15% in Q2, and increased by 30% in Q3. If the Q3 revenue was $169,000, what was the initial revenue?"\r\n)\r\n\r\n# For code debugging\r\ndebug_prompt = cot.generate_cot_prompt(\r\n    "code_debugging",\r\n    code="""def find_average(numbers):\r\n    total = 0\r\n    for num in numbers:\r\n        total += num\r\n    return total / len(numbers)\r\n\r\nresult = find_average([])"""\r\n)\n'})}),"\n",(0,t.jsx)(r.h3,{children:"3. Tree-of-Thought for Complex Decision Making"}),"\n",(0,t.jsx)(r.p,{children:"Tree-of-thought explores multiple reasoning paths and evaluates them."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class TreeOfThoughtPrompt:\r\n    def __init__(self, llm_client):\r\n        self.client = llm_client\r\n    \r\n    async def generate_thoughts(self, problem: str, num_thoughts: int = 3) -> list:\r\n        """Generate multiple initial thought paths"""\r\n        prompt = """Problem: {problem}\r\n\r\nGenerate {num_thoughts} different approaches or initial thoughts for solving this problem. \r\nFormat each as:\r\nThought X: [brief approach description]\r\n\r\nThoughts:""".format(problem=problem, num_thoughts=num_thoughts)\r\n        \r\n        response = await self.client.complete([\r\n            {"role": "user", "content": prompt}\r\n        ], temperature=0.8)\r\n        \r\n        # Parse thoughts from response\r\n        content = response["choices"][0]["message"]["content"]\r\n        thoughts = []\r\n        \r\n        for line in content.split(\'\\n\'):\r\n            if line.strip().startswith(\'Thought\'):\r\n                thought = line.split(\':\', 1)[1].strip() if \':\' in line else line.strip()\r\n                thoughts.append(thought)\r\n        \r\n        return thoughts[:num_thoughts]\r\n    \r\n    async def evaluate_thought(self, problem: str, thought: str) -> float:\r\n        """Evaluate the quality/feasibility of a thought"""\r\n        eval_prompt = """Problem: {problem}\r\n\r\nProposed approach: {thought}\r\n\r\nEvaluate this approach on a scale of 1-10 considering:\r\n- Feasibility (can it actually work?)\r\n- Efficiency (is it a good use of resources?)\r\n- Completeness (does it address the full problem?)\r\n\r\nProvide only a numeric score (1-10):""".format(problem=problem, thought=thought)\r\n        \r\n        response = await self.client.complete([\r\n            {"role": "user", "content": eval_prompt}\r\n        ], temperature=0.1, max_tokens=10)\r\n        \r\n        try:\r\n            score = float(response["choices"][0]["message"]["content"].strip())\r\n            return min(max(score, 1), 10)  # Clamp between 1-10\r\n        except ValueError:\r\n            return 5.0  # Default score if parsing fails\r\n    \r\n    async def expand_thought(self, problem: str, thought: str) -> str:\r\n        """Expand a thought into detailed steps"""\r\n        expand_prompt = """Problem: {problem}\r\n\r\nApproach: {thought}\r\n\r\nExpand this approach into detailed, actionable steps. Be specific and practical:\r\n\r\nDetailed steps:""".format(problem=problem, thought=thought)\r\n        \r\n        response = await self.client.complete([\r\n            {"role": "user", "content": expand_prompt}\r\n        ], temperature=0.3)\r\n        \r\n        return response["choices"][0]["message"]["content"]\r\n    \r\n    async def solve_with_tot(self, problem: str) -> dict:\r\n        """Solve a problem using tree-of-thought approach"""\r\n        # Generate initial thoughts\r\n        thoughts = await self.generate_thoughts(problem)\r\n        \r\n        # Evaluate each thought\r\n        evaluations = []\r\n        for thought in thoughts:\r\n            score = await self.evaluate_thought(problem, thought)\r\n            evaluations.append((thought, score))\r\n        \r\n        # Sort by score and select best thoughts\r\n        evaluations.sort(key=lambda x: x[1], reverse=True)\r\n        best_thoughts = evaluations[:2]  # Top 2 thoughts\r\n        \r\n        # Expand the best thoughts\r\n        expanded_solutions = []\r\n        for thought, score in best_thoughts:\r\n            expanded = await self.expand_thought(problem, thought)\r\n            expanded_solutions.append({\r\n                "approach": thought,\r\n                "score": score,\r\n                "detailed_solution": expanded\r\n            })\r\n        \r\n        return {\r\n            "problem": problem,\r\n            "all_thoughts": evaluations,\r\n            "best_solutions": expanded_solutions\r\n        }\r\n\r\n# Usage example\r\nasync def main():\r\n    # Assuming you have an LLM client\r\n    tot = TreeOfThoughtPrompt(llm_client)\r\n    \r\n    result = await tot.solve_with_tot(\r\n        "Design a system to handle 1 million concurrent users for a social media platform"\r\n    )\r\n    \r\n    print("Best Solutions:")\r\n    for i, solution in enumerate(result["best_solutions"], 1):\r\n        print("Solution " + str(i) + " (Score: " + str(solution["score"]) + "):")\r\n        print(solution["approach"])\r\n        print(solution["detailed_solution"])\r\n        print("-" * 50)\n'})}),"\n",(0,t.jsx)(r.h2,{children:"Building Production-Ready RAG Systems"}),"\n",(0,t.jsx)(r.h3,{children:"1. RAG Architecture and Components"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'import numpy as np\r\nfrom typing import List, Dict, Any, Optional\r\nimport chromadb\r\nfrom sentence_transformers import SentenceTransformer\r\nimport asyncio\r\n\r\nclass DocumentChunker:\r\n    def __init__(self, chunk_size: int = 1000, overlap: int = 200):\r\n        self.chunk_size = chunk_size\r\n        self.overlap = overlap\r\n    \r\n    def chunk_text(self, text: str, metadata: dict = None) -> List[dict]:\r\n        """Split text into overlapping chunks"""\r\n        words = text.split()\r\n        chunks = []\r\n        \r\n        for i in range(0, len(words), self.chunk_size - self.overlap):\r\n            chunk_words = words[i:i + self.chunk_size]\r\n            chunk_text = \' \'.join(chunk_words)\r\n            \r\n            chunk_metadata = {\r\n                "chunk_index": len(chunks),\r\n                "start_word": i,\r\n                "end_word": i + len(chunk_words),\r\n                **(metadata or {})\r\n            }\r\n            \r\n            chunks.append({\r\n                "content": chunk_text,\r\n                "metadata": chunk_metadata\r\n            })\r\n        \r\n        return chunks\r\n    \r\n    def semantic_chunking(self, text: str, encoder, similarity_threshold: float = 0.8) -> List[dict]:\r\n        """Chunk text based on semantic similarity"""\r\n        sentences = text.split(\'. \')\r\n        if len(sentences) < 2:\r\n            return [{"content": text, "metadata": {"chunk_index": 0}}]\r\n        \r\n        # Encode sentences\r\n        embeddings = encoder.encode(sentences)\r\n        \r\n        chunks = []\r\n        current_chunk = [sentences[0]]\r\n        \r\n        for i in range(1, len(sentences)):\r\n            # Calculate similarity with current chunk\r\n            current_embedding = np.mean([embeddings[j] for j in range(len(current_chunk))], axis=0)\r\n            similarity = np.dot(current_embedding, embeddings[i]) / (\r\n                np.linalg.norm(current_embedding) * np.linalg.norm(embeddings[i])\r\n            )\r\n            \r\n            if similarity > similarity_threshold and len(\' \'.join(current_chunk)) < self.chunk_size:\r\n                current_chunk.append(sentences[i])\r\n            else:\r\n                # Finalize current chunk and start new one\r\n                chunks.append({\r\n                    "content": \'. \'.join(current_chunk),\r\n                    "metadata": {"chunk_index": len(chunks)}\r\n                })\r\n                current_chunk = [sentences[i]]\r\n        \r\n        # Add final chunk\r\n        if current_chunk:\r\n            chunks.append({\r\n                "content": \'. \'.join(current_chunk),\r\n                "metadata": {"chunk_index": len(chunks)}\r\n            })\r\n        \r\n        return chunks\r\n\r\nclass VectorStore:\r\n    def __init__(self, collection_name: str = "documents"):\r\n        self.client = chromadb.Client()\r\n        self.collection = self.client.create_collection(collection_name)\r\n        self.encoder = SentenceTransformer(\'all-MiniLM-L6-v2\')\r\n    \r\n    def add_documents(self, documents: List[dict]):\r\n        """Add documents to the vector store"""\r\n        contents = [doc["content"] for doc in documents]\r\n        metadatas = [doc["metadata"] for doc in documents]\r\n        ids = [str(i) for i in range(len(documents))]\r\n        \r\n        # Generate embeddings\r\n        embeddings = self.encoder.encode(contents).tolist()\r\n        \r\n        self.collection.add(\r\n            embeddings=embeddings,\r\n            documents=contents,\r\n            metadatas=metadatas,\r\n            ids=ids\r\n        )\r\n    \r\n    def search(self, query: str, top_k: int = 5) -> List[dict]:\r\n        """Search for relevant documents"""\r\n        query_embedding = self.encoder.encode([query]).tolist()\r\n        \r\n        results = self.collection.query(\r\n            query_embeddings=query_embedding,\r\n            n_results=top_k\r\n        )\r\n        \r\n        documents = []\r\n        for i in range(len(results["documents"][0])):\r\n            documents.append({\r\n                "content": results["documents"][0][i],\r\n                "metadata": results["metadatas"][0][i],\r\n                "distance": results["distances"][0][i]\r\n            })\r\n        \r\n        return documents\r\n\r\nclass RAGSystem:\r\n    def __init__(self, llm_client, vector_store: VectorStore):\r\n        self.llm_client = llm_client\r\n        self.vector_store = vector_store\r\n        self.chunker = DocumentChunker()\r\n    \r\n    def ingest_document(self, content: str, metadata: dict = None):\r\n        """Ingest a document into the RAG system"""\r\n        chunks = self.chunker.chunk_text(content, metadata)\r\n        self.vector_store.add_documents(chunks)\r\n    \r\n    async def retrieve_and_generate(\r\n        self, \r\n        query: str, \r\n        top_k: int = 5,\r\n        system_prompt: str = None\r\n    ) -> dict:\r\n        """Retrieve relevant documents and generate response"""\r\n        \r\n        # Retrieve relevant documents\r\n        relevant_docs = self.vector_store.search(query, top_k=top_k)\r\n        \r\n        # Build context from retrieved documents\r\n        context_parts = []\r\n        for i, doc in enumerate(relevant_docs, 1):\r\n            context_parts.append("Document " + str(i) + ":")\r\n            context_parts.append(doc["content"])\r\n            context_parts.append("")\r\n        \r\n        context = "\\n".join(context_parts)\r\n        \r\n        # Build RAG prompt\r\n        default_system = """You are a helpful assistant that answers questions based on the provided context. \r\nUse only the information from the context to answer questions. If the answer cannot be found in the context, say so clearly."""\r\n        \r\n        system_message = system_prompt or default_system\r\n        \r\n        user_prompt = """Context:\r\n{context}\r\n\r\nQuestion: {query}\r\n\r\nPlease provide a detailed answer based on the context above:""".format(\r\n            context=context,\r\n            query=query\r\n        )\r\n        \r\n        # Generate response\r\n        response = await self.llm_client.complete([\r\n            {"role": "system", "content": system_message},\r\n            {"role": "user", "content": user_prompt}\r\n        ])\r\n        \r\n        return {\r\n            "query": query,\r\n            "answer": response["choices"][0]["message"]["content"],\r\n            "sources": relevant_docs,\r\n            "context_used": context\r\n        }\r\n    \r\n    async def conversational_rag(\r\n        self, \r\n        query: str, \r\n        conversation_history: List[dict],\r\n        top_k: int = 5\r\n    ) -> dict:\r\n        """RAG with conversation history"""\r\n        \r\n        # Create a comprehensive query including conversation context\r\n        history_context = ""\r\n        if conversation_history:\r\n            recent_history = conversation_history[-3:]  # Last 3 exchanges\r\n            history_parts = []\r\n            for exchange in recent_history:\r\n                if exchange["role"] == "user":\r\n                    history_parts.append("User: " + exchange["content"])\r\n                elif exchange["role"] == "assistant":\r\n                    history_parts.append("Assistant: " + exchange["content"])\r\n            \r\n            history_context = "\\n".join(history_parts)\r\n        \r\n        # Enhanced query for better retrieval\r\n        enhanced_query = query\r\n        if history_context:\r\n            enhanced_query = "Previous conversation:\\n" + history_context + "\\n\\nCurrent question: " + query\r\n        \r\n        # Use the enhanced query for retrieval\r\n        relevant_docs = self.vector_store.search(enhanced_query, top_k=top_k)\r\n        \r\n        # Build context\r\n        context_parts = []\r\n        for i, doc in enumerate(relevant_docs, 1):\r\n            context_parts.append("Document " + str(i) + ":")\r\n            context_parts.append(doc["content"])\r\n            context_parts.append("")\r\n        \r\n        context = "\\n".join(context_parts)\r\n        \r\n        # Build conversational RAG prompt\r\n        messages = [\r\n            {\r\n                "role": "system", \r\n                "content": """You are a helpful assistant that answers questions based on provided context and conversation history. \r\nUse the context and previous conversation to provide coherent, contextual responses."""\r\n            }\r\n        ]\r\n        \r\n        # Add conversation history\r\n        messages.extend(conversation_history[-5:])  # Last 5 messages\r\n        \r\n        # Add current query with context\r\n        current_prompt = """Context:\r\n{context}\r\n\r\nQuestion: {query}\r\n\r\nAnswer:""".format(context=context, query=query)\r\n        \r\n        messages.append({"role": "user", "content": current_prompt})\r\n        \r\n        response = await self.llm_client.complete(messages)\r\n        \r\n        return {\r\n            "query": query,\r\n            "answer": response["choices"][0]["message"]["content"],\r\n            "sources": relevant_docs,\r\n            "enhanced_query": enhanced_query\r\n        }\n'})}),"\n",(0,t.jsx)(r.h3,{children:"2. Advanced RAG Techniques"}),"\n",(0,t.jsx)(r.h4,{children:"Hybrid Search (Keyword + Semantic)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from elasticsearch import Elasticsearch\r\nimport numpy as np\r\n\r\nclass HybridSearchRAG:\r\n    def __init__(self, llm_client, es_host: str = "localhost:9200"):\r\n        self.llm_client = llm_client\r\n        self.es_client = Elasticsearch([es_host])\r\n        self.encoder = SentenceTransformer(\'all-MiniLM-L6-v2\')\r\n        self.index_name = "hybrid_docs"\r\n    \r\n    def create_index(self):\r\n        """Create Elasticsearch index with dense vector support"""\r\n        mapping = {\r\n            "mappings": {\r\n                "properties": {\r\n                    "content": {"type": "text"},\r\n                    "embedding": {\r\n                        "type": "dense_vector",\r\n                        "dims": 384  # all-MiniLM-L6-v2 dimension\r\n                    },\r\n                    "metadata": {"type": "object"}\r\n                }\r\n            }\r\n        }\r\n        \r\n        if self.es_client.indices.exists(index=self.index_name):\r\n            self.es_client.indices.delete(index=self.index_name)\r\n        \r\n        self.es_client.indices.create(index=self.index_name, body=mapping)\r\n    \r\n    def add_document(self, content: str, metadata: dict = None):\r\n        """Add document with both text and vector representation"""\r\n        embedding = self.encoder.encode(content).tolist()\r\n        \r\n        doc = {\r\n            "content": content,\r\n            "embedding": embedding,\r\n            "metadata": metadata or {}\r\n        }\r\n        \r\n        self.es_client.index(index=self.index_name, body=doc)\r\n    \r\n    def hybrid_search(self, query: str, top_k: int = 5, alpha: float = 0.5) -> List[dict]:\r\n        """\r\n        Perform hybrid search combining keyword and semantic search\r\n        alpha: weight for semantic search (1-alpha for keyword search)\r\n        """\r\n        \r\n        # Keyword search\r\n        keyword_query = {\r\n            "query": {\r\n                "match": {\r\n                    "content": query\r\n                }\r\n            },\r\n            "size": top_k * 2  # Get more results for reranking\r\n        }\r\n        \r\n        keyword_results = self.es_client.search(index=self.index_name, body=keyword_query)\r\n        \r\n        # Semantic search\r\n        query_embedding = self.encoder.encode(query).tolist()\r\n        semantic_query = {\r\n            "query": {\r\n                "script_score": {\r\n                    "query": {"match_all": {}},\r\n                    "script": {\r\n                        "source": "cosineSimilarity(params.query_vector, \'embedding\') + 1.0",\r\n                        "params": {"query_vector": query_embedding}\r\n                    }\r\n                }\r\n            },\r\n            "size": top_k * 2\r\n        }\r\n        \r\n        semantic_results = self.es_client.search(index=self.index_name, body=semantic_query)\r\n        \r\n        # Combine and rerank results\r\n        combined_scores = {}\r\n        \r\n        # Add keyword scores\r\n        for hit in keyword_results["hits"]["hits"]:\r\n            doc_id = hit["_id"]\r\n            keyword_score = hit["_score"]\r\n            combined_scores[doc_id] = {\r\n                "keyword_score": keyword_score,\r\n                "semantic_score": 0,\r\n                "doc": hit["_source"]\r\n            }\r\n        \r\n        # Add semantic scores\r\n        for hit in semantic_results["hits"]["hits"]:\r\n            doc_id = hit["_id"]\r\n            semantic_score = hit["_score"]\r\n            \r\n            if doc_id in combined_scores:\r\n                combined_scores[doc_id]["semantic_score"] = semantic_score\r\n            else:\r\n                combined_scores[doc_id] = {\r\n                    "keyword_score": 0,\r\n                    "semantic_score": semantic_score,\r\n                    "doc": hit["_source"]\r\n                }\r\n        \r\n        # Calculate final scores and rank\r\n        final_results = []\r\n        for doc_id, scores in combined_scores.items():\r\n            # Normalize scores (simple min-max normalization)\r\n            keyword_normalized = scores["keyword_score"] / 10.0  # Adjust based on your data\r\n            semantic_normalized = (scores["semantic_score"] - 1.0) / 1.0  # Cosine similarity range\r\n            \r\n            final_score = alpha * semantic_normalized + (1 - alpha) * keyword_normalized\r\n            \r\n            final_results.append({\r\n                "content": scores["doc"]["content"],\r\n                "metadata": scores["doc"]["metadata"],\r\n                "final_score": final_score,\r\n                "keyword_score": scores["keyword_score"],\r\n                "semantic_score": scores["semantic_score"]\r\n            })\r\n        \r\n        # Sort by final score and return top k\r\n        final_results.sort(key=lambda x: x["final_score"], reverse=True)\r\n        return final_results[:top_k]\r\n    \r\n    async def query_with_hybrid_search(self, query: str, top_k: int = 5) -> dict:\r\n        """Query using hybrid search and generate response"""\r\n        relevant_docs = self.hybrid_search(query, top_k)\r\n        \r\n        # Build context\r\n        context_parts = []\r\n        for i, doc in enumerate(relevant_docs, 1):\r\n            context_parts.append("Document " + str(i) + " (Score: " + str(round(doc["final_score"], 3)) + "):")\r\n            context_parts.append(doc["content"])\r\n            context_parts.append("")\r\n        \r\n        context = "\\n".join(context_parts)\r\n        \r\n        # Generate response\r\n        prompt = """Context:\r\n{context}\r\n\r\nQuestion: {query}\r\n\r\nBased on the context above, provide a comprehensive answer:""".format(\r\n            context=context,\r\n            query=query\r\n        )\r\n        \r\n        response = await self.llm_client.complete([\r\n            {"role": "user", "content": prompt}\r\n        ])\r\n        \r\n        return {\r\n            "query": query,\r\n            "answer": response["choices"][0]["message"]["content"],\r\n            "sources": relevant_docs\r\n        }\n'})}),"\n",(0,t.jsx)(r.h4,{children:"Multi-Query RAG"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class MultiQueryRAG:\r\n    def __init__(self, llm_client, vector_store: VectorStore):\r\n        self.llm_client = llm_client\r\n        self.vector_store = vector_store\r\n    \r\n    async def generate_query_variations(self, original_query: str, num_variations: int = 3) -> List[str]:\r\n        """Generate variations of the original query for better retrieval"""\r\n        prompt = """Given the following question, generate {num_variations} different ways to ask the same question. \r\nThese variations should help retrieve more comprehensive information.\r\n\r\nOriginal question: {query}\r\n\r\nGenerate {num_variations} question variations (one per line):""".format(\r\n            query=original_query,\r\n            num_variations=num_variations\r\n        )\r\n        \r\n        response = await self.llm_client.complete([\r\n            {"role": "user", "content": prompt}\r\n        ], temperature=0.7)\r\n        \r\n        variations = []\r\n        lines = response["choices"][0]["message"]["content"].strip().split(\'\\n\')\r\n        \r\n        for line in lines:\r\n            line = line.strip()\r\n            if line and not line.startswith(\'Original\'):\r\n                # Remove numbering if present\r\n                if line[0].isdigit() and \'.\' in line[:3]:\r\n                    line = line.split(\'.\', 1)[1].strip()\r\n                variations.append(line)\r\n        \r\n        return variations[:num_variations]\r\n    \r\n    async def multi_query_retrieve(\r\n        self, \r\n        query: str, \r\n        num_variations: int = 3,\r\n        docs_per_query: int = 3\r\n    ) -> List[dict]:\r\n        """Retrieve documents using multiple query variations"""\r\n        \r\n        # Generate query variations\r\n        query_variations = await self.generate_query_variations(query, num_variations)\r\n        all_queries = [query] + query_variations\r\n        \r\n        # Retrieve documents for each query\r\n        all_docs = []\r\n        seen_content = set()\r\n        \r\n        for q in all_queries:\r\n            docs = self.vector_store.search(q, top_k=docs_per_query)\r\n            \r\n            for doc in docs:\r\n                # Avoid duplicates based on content\r\n                content_hash = hash(doc["content"])\r\n                if content_hash not in seen_content:\r\n                    doc["retrieved_by_query"] = q\r\n                    all_docs.append(doc)\r\n                    seen_content.add(content_hash)\r\n        \r\n        # Sort by relevance score and return top documents\r\n        all_docs.sort(key=lambda x: x["distance"])\r\n        return all_docs[:docs_per_query * len(all_queries)]\r\n    \r\n    async def answer_with_multi_query(self, query: str) -> dict:\r\n        """Answer using multi-query RAG approach"""\r\n        \r\n        # Retrieve using multiple queries\r\n        relevant_docs = await self.multi_query_retrieve(query)\r\n        \r\n        # Build enhanced context\r\n        context_parts = []\r\n        context_parts.append("Retrieved information from multiple search perspectives:")\r\n        context_parts.append("")\r\n        \r\n        for i, doc in enumerate(relevant_docs, 1):\r\n            context_parts.append("Source " + str(i) + " (found via: \'" + doc["retrieved_by_query"] + "\'):")\r\n            context_parts.append(doc["content"])\r\n            context_parts.append("")\r\n        \r\n        context = "\\n".join(context_parts)\r\n        \r\n        # Generate comprehensive response\r\n        prompt = """You have been provided with information retrieved using multiple search approaches for better coverage.\r\n\r\n{context}\r\n\r\nOriginal question: {query}\r\n\r\nProvide a comprehensive answer that synthesizes information from all the sources:""".format(\r\n            context=context,\r\n            query=query\r\n        )\r\n        \r\n        response = await self.llm_client.complete([\r\n            {"role": "user", "content": prompt}\r\n        ])\r\n        \r\n        return {\r\n            "query": query,\r\n            "answer": response["choices"][0]["message"]["content"],\r\n            "sources": relevant_docs,\r\n            "num_sources": len(relevant_docs)\r\n        }\n'})}),"\n",(0,t.jsx)(r.h2,{children:"Evaluation and Quality Assurance"}),"\n",(0,t.jsx)(r.h3,{children:"RAG Evaluation Framework"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class RAGEvaluator:\r\n    def __init__(self, llm_client):\r\n        self.llm_client = llm_client\r\n    \r\n    async def evaluate_relevance(self, query: str, retrieved_docs: List[dict]) -> List[float]:\r\n        """Evaluate relevance of retrieved documents to the query"""\r\n        relevance_scores = []\r\n        \r\n        for doc in retrieved_docs:\r\n            prompt = """Evaluate how relevant this document is to the given query on a scale of 1-10.\r\n\r\nQuery: {query}\r\n\r\nDocument: {document}\r\n\r\nConsider:\r\n- Does the document contain information that helps answer the query?\r\n- How directly related is the content to the query?\r\n- Would this document be useful for someone trying to answer the query?\r\n\r\nProvide only a numeric score (1-10):""".format(\r\n                query=query,\r\n                document=doc["content"]\r\n            )\r\n            \r\n            response = await self.llm_client.complete([\r\n                {"role": "user", "content": prompt}\r\n            ], temperature=0.1, max_tokens=5)\r\n            \r\n            try:\r\n                score = float(response["choices"][0]["message"]["content"].strip())\r\n                relevance_scores.append(min(max(score, 1), 10))\r\n            except ValueError:\r\n                relevance_scores.append(5.0)  # Default score\r\n        \r\n        return relevance_scores\r\n    \r\n    async def evaluate_answer_quality(\r\n        self, \r\n        query: str, \r\n        generated_answer: str, \r\n        ground_truth: str = None\r\n    ) -> dict:\r\n        """Evaluate the quality of the generated answer"""\r\n        \r\n        evaluation_criteria = [\r\n            "Accuracy: Is the information factually correct?",\r\n            "Completeness: Does it fully address the query?", \r\n            "Clarity: Is it easy to understand?",\r\n            "Relevance: Does it stay focused on the query?"\r\n        ]\r\n        \r\n        evaluation_results = {}\r\n        \r\n        for criterion in evaluation_criteria:\r\n            prompt = """Evaluate the following answer based on this criterion: {criterion}\r\n\r\nQuery: {query}\r\nAnswer: {answer}\r\n\r\nRate on a scale of 1-10 and provide a brief explanation.\r\n\r\nFormat: Score: X/10\r\nExplanation: [brief explanation]""".format(\r\n                criterion=criterion,\r\n                query=query,\r\n                answer=generated_answer\r\n            )\r\n            \r\n            response = await self.llm_client.complete([\r\n                {"role": "user", "content": prompt}\r\n            ], temperature=0.2)\r\n            \r\n            content = response["choices"][0]["message"]["content"]\r\n            \r\n            # Parse score and explanation\r\n            score = 5.0  # default\r\n            explanation = content\r\n            \r\n            if "Score:" in content:\r\n                try:\r\n                    score_line = [line for line in content.split(\'\\n\') if \'Score:\' in line][0]\r\n                    score = float(score_line.split(\'Score:\')[1].split(\'/\')[0].strip())\r\n                except:\r\n                    pass\r\n            \r\n            criterion_name = criterion.split(\':\')[0].lower()\r\n            evaluation_results[criterion_name] = {\r\n                "score": score,\r\n                "explanation": explanation\r\n            }\r\n        \r\n        # Calculate overall score\r\n        overall_score = sum(result["score"] for result in evaluation_results.values()) / len(evaluation_results)\r\n        evaluation_results["overall"] = {"score": overall_score}\r\n        \r\n        return evaluation_results\r\n    \r\n    async def evaluate_rag_system(\r\n        self, \r\n        test_queries: List[dict],  # [{"query": "...", "expected_answer": "..."}]\r\n        rag_system\r\n    ) -> dict:\r\n        """Comprehensive evaluation of RAG system"""\r\n        \r\n        results = {\r\n            "total_queries": len(test_queries),\r\n            "average_relevance": 0,\r\n            "average_quality": 0,\r\n            "detailed_results": []\r\n        }\r\n        \r\n        total_relevance = 0\r\n        total_quality = 0\r\n        \r\n        for test_case in test_queries:\r\n            query = test_case["query"]\r\n            expected = test_case.get("expected_answer", "")\r\n            \r\n            # Get RAG response\r\n            rag_response = await rag_system.retrieve_and_generate(query)\r\n            \r\n            # Evaluate retrieval relevance\r\n            relevance_scores = await self.evaluate_relevance(query, rag_response["sources"])\r\n            avg_relevance = sum(relevance_scores) / len(relevance_scores) if relevance_scores else 0\r\n            \r\n            # Evaluate answer quality\r\n            quality_eval = await self.evaluate_answer_quality(\r\n                query, \r\n                rag_response["answer"], \r\n                expected\r\n            )\r\n            \r\n            result = {\r\n                "query": query,\r\n                "answer": rag_response["answer"],\r\n                "relevance_score": avg_relevance,\r\n                "quality_score": quality_eval["overall"]["score"],\r\n                "sources_count": len(rag_response["sources"]),\r\n                "detailed_quality": quality_eval\r\n            }\r\n            \r\n            results["detailed_results"].append(result)\r\n            total_relevance += avg_relevance\r\n            total_quality += quality_eval["overall"]["score"]\r\n        \r\n        results["average_relevance"] = total_relevance / len(test_queries)\r\n        results["average_quality"] = total_quality / len(test_queries)\r\n        \r\n        return results\r\n\r\n# Usage example\r\nasync def main():\r\n    evaluator = RAGEvaluator(llm_client)\r\n    \r\n    test_queries = [\r\n        {\r\n            "query": "What are the benefits of using Python for data science?",\r\n            "expected_answer": "Python offers libraries like pandas, numpy, excellent community support..."\r\n        },\r\n        {\r\n            "query": "How do you implement a REST API?",\r\n            "expected_answer": "REST APIs can be implemented using frameworks like Flask, FastAPI..."\r\n        }\r\n    ]\r\n    \r\n    evaluation_results = await evaluator.evaluate_rag_system(test_queries, rag_system)\r\n    \r\n    print("Average Relevance Score:", evaluation_results["average_relevance"])\r\n    print("Average Quality Score:", evaluation_results["average_quality"])\n'})}),"\n",(0,t.jsx)(r.h2,{children:"Key Takeaways for Part 2"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Advanced Prompting"}),": Use few-shot, chain-of-thought, and tree-of-thought techniques for better results"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"RAG Architecture"}),": Build robust retrieval systems with proper chunking and vector storage"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Hybrid Search"}),": Combine keyword and semantic search for better retrieval"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Multi-Query Approach"}),": Use query variations to capture more relevant information"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Evaluation is Critical"}),": Implement systematic evaluation for both retrieval and generation quality"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{children:"What's Next?"}),"\n",(0,t.jsxs)(r.p,{children:["In ",(0,t.jsx)(r.strong,{children:"Part 3"}),", we'll focus on production deployment and scaling of LLM applications, covering infrastructure patterns, monitoring, security, and performance optimization strategies."]}),"\n",(0,t.jsx)(r.p,{children:"We'll cover:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Infrastructure and deployment patterns"}),"\n",(0,t.jsx)(r.li,{children:"Monitoring and observability for LLM applications"}),"\n",(0,t.jsx)(r.li,{children:"Security, safety, and compliance considerations"}),"\n",(0,t.jsx)(r.li,{children:"Scaling strategies and performance optimization"}),"\n",(0,t.jsx)(r.li,{children:"Cost optimization and resource management"}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:"This series provides practical, implementation-focused guidance for engineers building production LLM applications."})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},85337:function(e,r,n){n.r(r),n.d(r,{default:function(){return l},frontmatter:function(){return i},metadata:function(){return a}});var t=n(57437),s=n(52671);let i=void 0,a={postId:"2a8f6e4c-7b5d-4e9a-a1c3-6d8e9f0a1b2c",title:"LLM Engineering Mastery: Part 3 - Production Deployment and Scaling",date:"2024-02-10",excerpt:"Part 3 of the LLM Engineering Mastery series: Master production deployment, scaling strategies, monitoring, and security for enterprise-grade LLM applications.",author:"Abstract Algorithms",tags:["llm","production","deployment","scaling","monitoring","security"],status:"published",series:{name:"LLM Engineering Mastery",order:3,total:3,prev:"/posts/llm-engineering-mastery-part-2-advanced-prompt-engineering-and-rag-systems",coverImage:"./assets/llm-engineering-series.png",overview:"/posts/llm-engineering-mastery-series/"}};function o(e){let r={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{children:"LLM Engineering Mastery: Part 3 - Production Deployment and Scaling"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Part 3 of the LLM Engineering Mastery Series"}),(0,t.jsx)(r.br,{}),"\n","The final part completes your LLM engineering journey with production deployment strategies, scaling patterns, monitoring, and security. Turn your LLM applications into enterprise-grade systems."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"In this final part of the LLM Engineering Mastery series, we'll cover everything you need to deploy, scale, and maintain LLM applications in production environments. From infrastructure patterns to monitoring and security, this guide provides the practical knowledge needed for enterprise-grade deployments."}),"\n",(0,t.jsx)(r.h2,{children:"Infrastructure Patterns for LLM Applications"}),"\n",(0,t.jsx)(r.h3,{children:"1. Microservices Architecture for LLM Systems"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from fastapi import FastAPI, HTTPException, Depends\r\nfrom pydantic import BaseModel\r\nfrom typing import List, Optional\r\nimport asyncio\r\nimport httpx\r\nfrom datetime import datetime\r\nimport logging\r\n\r\n# Data models\r\nclass ChatRequest(BaseModel):\r\n    messages: List[dict]\r\n    model: str = "gpt-3.5-turbo"\r\n    temperature: float = 0.7\r\n    max_tokens: int = 1000\r\n\r\nclass RAGRequest(BaseModel):\r\n    query: str\r\n    collection: str = "default"\r\n    top_k: int = 5\r\n\r\nclass ChatResponse(BaseModel):\r\n    response: str\r\n    model_used: str\r\n    tokens_used: int\r\n    processing_time: float\r\n    request_id: str\r\n\r\n# LLM Service\r\nclass LLMService:\r\n    def __init__(self):\r\n        self.app = FastAPI(title="LLM Service", version="1.0.0")\r\n        self.setup_routes()\r\n        self.setup_middleware()\r\n    \r\n    def setup_middleware(self):\r\n        @self.app.middleware("http")\r\n        async def log_requests(request, call_next):\r\n            start_time = datetime.now()\r\n            \r\n            response = await call_next(request)\r\n            \r\n            processing_time = (datetime.now() - start_time).total_seconds()\r\n            \r\n            logging.info(\r\n                "Request processed",\r\n                extra={\r\n                    "method": request.method,\r\n                    "url": str(request.url),\r\n                    "status_code": response.status_code,\r\n                    "processing_time": processing_time\r\n                }\r\n            )\r\n            \r\n            return response\r\n    \r\n    def setup_routes(self):\r\n        @self.app.post("/chat/completions", response_model=ChatResponse)\r\n        async def chat_completion(request: ChatRequest):\r\n            start_time = datetime.now()\r\n            \r\n            try:\r\n                # Route to appropriate model provider\r\n                if request.model.startswith("gpt"):\r\n                    result = await self._call_openai(request)\r\n                elif request.model.startswith("claude"):\r\n                    result = await self._call_anthropic(request)\r\n                else:\r\n                    raise HTTPException(status_code=400, detail="Unsupported model")\r\n                \r\n                processing_time = (datetime.now() - start_time).total_seconds()\r\n                \r\n                return ChatResponse(\r\n                    response=result["content"],\r\n                    model_used=request.model,\r\n                    tokens_used=result["tokens"],\r\n                    processing_time=processing_time,\r\n                    request_id=result["request_id"]\r\n                )\r\n                \r\n            except Exception as e:\r\n                logging.error("Chat completion failed", extra={"error": str(e)})\r\n                raise HTTPException(status_code=500, detail="Internal server error")\r\n        \r\n        @self.app.get("/health")\r\n        async def health_check():\r\n            return {"status": "healthy", "timestamp": datetime.now().isoformat()}\r\n        \r\n        @self.app.get("/models")\r\n        async def list_models():\r\n            return {\r\n                "available_models": [\r\n                    "gpt-3.5-turbo",\r\n                    "gpt-4-turbo", \r\n                    "claude-3-sonnet",\r\n                    "claude-3-haiku"\r\n                ]\r\n            }\r\n    \r\n    async def _call_openai(self, request: ChatRequest) -> dict:\r\n        # Implementation for OpenAI API calls\r\n        # This would include the robust client from Part 1\r\n        pass\r\n    \r\n    async def _call_anthropic(self, request: ChatRequest) -> dict:\r\n        # Implementation for Anthropic API calls\r\n        pass\r\n\r\n# RAG Service\r\nclass RAGService:\r\n    def __init__(self, llm_service_url: str):\r\n        self.app = FastAPI(title="RAG Service", version="1.0.0")\r\n        self.llm_service_url = llm_service_url\r\n        self.setup_routes()\r\n    \r\n    def setup_routes(self):\r\n        @self.app.post("/rag/query")\r\n        async def rag_query(request: RAGRequest):\r\n            try:\r\n                # Retrieve relevant documents\r\n                relevant_docs = await self._retrieve_documents(\r\n                    request.query, \r\n                    request.collection, \r\n                    request.top_k\r\n                )\r\n                \r\n                # Build context\r\n                context = self._build_context(relevant_docs)\r\n                \r\n                # Generate response using LLM service\r\n                llm_request = ChatRequest(\r\n                    messages=[\r\n                        {\r\n                            "role": "system",\r\n                            "content": "Answer based on the provided context."\r\n                        },\r\n                        {\r\n                            "role": "user", \r\n                            "content": "Context:\\n" + context + "\\n\\nQuestion: " + request.query\r\n                        }\r\n                    ]\r\n                )\r\n                \r\n                async with httpx.AsyncClient() as client:\r\n                    response = await client.post(\r\n                        self.llm_service_url + "/chat/completions",\r\n                        json=llm_request.dict()\r\n                    )\r\n                    response.raise_for_status()\r\n                    llm_response = response.json()\r\n                \r\n                return {\r\n                    "answer": llm_response["response"],\r\n                    "sources": relevant_docs,\r\n                    "tokens_used": llm_response["tokens_used"]\r\n                }\r\n                \r\n            except Exception as e:\r\n                logging.error("RAG query failed", extra={"error": str(e)})\r\n                raise HTTPException(status_code=500, detail="RAG processing failed")\r\n    \r\n    async def _retrieve_documents(self, query: str, collection: str, top_k: int):\r\n        # Implementation for document retrieval\r\n        # This would use the vector store from Part 2\r\n        pass\r\n    \r\n    def _build_context(self, documents: List[dict]) -> str:\r\n        context_parts = []\r\n        for i, doc in enumerate(documents, 1):\r\n            context_parts.append("Document " + str(i) + ":")\r\n            context_parts.append(doc["content"])\r\n            context_parts.append("")\r\n        return "\\n".join(context_parts)\r\n\r\n# API Gateway\r\nclass APIGateway:\r\n    def __init__(self, llm_service_url: str, rag_service_url: str):\r\n        self.app = FastAPI(title="LLM API Gateway", version="1.0.0")\r\n        self.llm_service_url = llm_service_url\r\n        self.rag_service_url = rag_service_url\r\n        self.setup_routes()\r\n        self.setup_middleware()\r\n    \r\n    def setup_middleware(self):\r\n        # Rate limiting, authentication, etc.\r\n        pass\r\n    \r\n    def setup_routes(self):\r\n        @self.app.post("/v1/chat/completions")\r\n        async def proxy_chat(request: ChatRequest):\r\n            async with httpx.AsyncClient() as client:\r\n                response = await client.post(\r\n                    self.llm_service_url + "/chat/completions",\r\n                    json=request.dict(),\r\n                    timeout=60.0\r\n                )\r\n                response.raise_for_status()\r\n                return response.json()\r\n        \r\n        @self.app.post("/v1/rag/query")\r\n        async def proxy_rag(request: RAGRequest):\r\n            async with httpx.AsyncClient() as client:\r\n                response = await client.post(\r\n                    self.rag_service_url + "/rag/query",\r\n                    json=request.dict(),\r\n                    timeout=60.0\r\n                )\r\n                response.raise_for_status()\r\n                return response.json()\r\n\r\n# Docker Compose for local development\r\ndocker_compose_content = """\r\nversion: \'3.8\'\r\n\r\nservices:\r\n  llm-service:\r\n    build: ./llm-service\r\n    ports:\r\n      - "8001:8000"\r\n    environment:      - OPENAI_API_KEY=\\$\\{OPENAI_API_KEY\\}\r\n      - ANTHROPIC_API_KEY=\\$\\{ANTHROPIC_API_KEY\\}\r\n    healthcheck:\r\n      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]\r\n      interval: 30s\r\n      timeout: 10s\r\n      retries: 3\r\n\r\n  rag-service:\r\n    build: ./rag-service\r\n    ports:\r\n      - "8002:8000"\r\n    environment:\r\n      - LLM_SERVICE_URL=http://llm-service:8000\r\n      - VECTOR_DB_URL=\\$\\{VECTOR_DB_URL\\}\r\n    depends_on:\r\n      - llm-service\r\n      - vector-db\r\n    healthcheck:\r\n      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]\r\n      interval: 30s\r\n      timeout: 10s\r\n      retries: 3\r\n\r\n  api-gateway:\r\n    build: ./api-gateway\r\n    ports:\r\n      - "8000:8000"\r\n    environment:\r\n      - LLM_SERVICE_URL=http://llm-service:8000\r\n      - RAG_SERVICE_URL=http://rag-service:8000\r\n    depends_on:\r\n      - llm-service\r\n      - rag-service\r\n\r\n  vector-db:\r\n    image: chromadb/chroma:latest\r\n    ports:\r\n      - "8003:8000"\r\n    volumes:\r\n      - vector_data:/chroma/chroma\r\n\r\n  redis:\r\n    image: redis:alpine\r\n    ports:\r\n      - "6379:6379"\r\n\r\n  prometheus:\r\n    image: prom/prometheus:latest\r\n    ports:\r\n      - "9090:9090"\r\n    volumes:\r\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\r\n\r\n  grafana:\r\n    image: grafana/grafana:latest\r\n    ports:\r\n      - "3000:3000"\r\n    environment:\r\n      - GF_SECURITY_ADMIN_PASSWORD=admin\r\n\r\nvolumes:\r\n  vector_data:\r\n"""\n'})}),"\n",(0,t.jsx)(r.h3,{children:"2. Kubernetes Deployment Configuration"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:'# llm-deployment.yaml\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: llm-service\r\n  labels:\r\n    app: llm-service\r\nspec:\r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      app: llm-service\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: llm-service\r\n    spec:\r\n      containers:\r\n      - name: llm-service\r\n        image: your-registry/llm-service:latest\r\n        ports:\r\n        - containerPort: 8000\r\n        env:\r\n        - name: OPENAI_API_KEY\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: api-secrets\r\n              key: openai-api-key\r\n        - name: ANTHROPIC_API_KEY\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: api-secrets\r\n              key: anthropic-api-key\r\n        resources:\r\n          requests:\r\n            memory: "512Mi"\r\n            cpu: "250m"\r\n          limits:\r\n            memory: "1Gi"\r\n            cpu: "500m"\r\n        livenessProbe:\r\n          httpGet:\r\n            path: /health\r\n            port: 8000\r\n          initialDelaySeconds: 30\r\n          periodSeconds: 10\r\n        readinessProbe:\r\n          httpGet:\r\n            path: /health\r\n            port: 8000\r\n          initialDelaySeconds: 5\r\n          periodSeconds: 5\r\n\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: llm-service\r\nspec:\r\n  selector:\r\n    app: llm-service\r\n  ports:\r\n  - port: 80\r\n    targetPort: 8000\r\n  type: ClusterIP\r\n\r\n---\r\napiVersion: autoscaling/v2\r\nkind: HorizontalPodAutoscaler\r\nmetadata:\r\n  name: llm-service-hpa\r\nspec:\r\n  scaleTargetRef:\r\n    apiVersion: apps/v1\r\n    kind: Deployment\r\n    name: llm-service\r\n  minReplicas: 2\r\n  maxReplicas: 10\r\n  metrics:\r\n  - type: Resource\r\n    resource:\r\n      name: cpu\r\n      target:\r\n        type: Utilization\r\n        averageUtilization: 70\r\n  - type: Resource\r\n    resource:\r\n      name: memory\r\n      target:\r\n        type: Utilization\r\n        averageUtilization: 80\r\n\r\n---\r\n# Ingress for external access\r\napiVersion: networking.k8s.io/v1\r\nkind: Ingress\r\nmetadata:\r\n  name: llm-ingress\r\n  annotations:\r\n    nginx.ingress.kubernetes.io/rate-limit: "100"\r\n    nginx.ingress.kubernetes.io/rate-limit-window: "1m"\r\n    cert-manager.io/cluster-issuer: "letsencrypt-prod"\r\nspec:\r\n  tls:\r\n  - hosts:\r\n    - api.yourdomain.com\r\n    secretName: llm-tls\r\n  rules:\r\n  - host: api.yourdomain.com\r\n    http:\r\n      paths:\r\n      - path: /v1\r\n        pathType: Prefix\r\n        backend:\r\n          service:\r\n            name: api-gateway\r\n            port:\r\n              number: 80\n'})}),"\n",(0,t.jsx)(r.h2,{children:"Monitoring and Observability"}),"\n",(0,t.jsx)(r.h3,{children:"1. Comprehensive Monitoring System"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'import logging\r\nimport time\r\nfrom prometheus_client import Counter, Histogram, Gauge, start_http_server\r\nfrom functools import wraps\r\nimport structlog\r\nfrom typing import Any, Callable\r\nimport asyncio\r\n\r\n# Prometheus metrics\r\nREQUEST_COUNT = Counter(\r\n    \'llm_requests_total\',\r\n    \'Total number of LLM requests\',\r\n    [\'model\', \'endpoint\', \'status\']\r\n)\r\n\r\nREQUEST_DURATION = Histogram(\r\n    \'llm_request_duration_seconds\',\r\n    \'Time spent processing LLM requests\',\r\n    [\'model\', \'endpoint\']\r\n)\r\n\r\nTOKEN_USAGE = Counter(\r\n    \'llm_tokens_total\',\r\n    \'Total number of tokens processed\',\r\n    [\'model\', \'type\']  # type: input/output\r\n)\r\n\r\nCOST_TRACKING = Counter(\r\n    \'llm_cost_total_usd\',\r\n    \'Total cost in USD\',\r\n    [\'model\', \'provider\']\r\n)\r\n\r\nACTIVE_REQUESTS = Gauge(\r\n    \'llm_active_requests\',\r\n    \'Number of currently active requests\',\r\n    [\'model\']\r\n)\r\n\r\nERROR_RATE = Counter(\r\n    \'llm_errors_total\',\r\n    \'Total number of errors\',\r\n    [\'model\', \'error_type\']\r\n)\r\n\r\nclass MetricsCollector:\r\n    def __init__(self):\r\n        self.logger = structlog.get_logger()\r\n    \r\n    def record_request(self, model: str, endpoint: str, status: str):\r\n        """Record a request with its status"""\r\n        REQUEST_COUNT.labels(model=model, endpoint=endpoint, status=status).inc()\r\n    \r\n    def record_duration(self, model: str, endpoint: str, duration: float):\r\n        """Record request duration"""\r\n        REQUEST_DURATION.labels(model=model, endpoint=endpoint).observe(duration)\r\n    \r\n    def record_token_usage(self, model: str, input_tokens: int, output_tokens: int):\r\n        """Record token usage"""\r\n        TOKEN_USAGE.labels(model=model, type=\'input\').inc(input_tokens)\r\n        TOKEN_USAGE.labels(model=model, type=\'output\').inc(output_tokens)\r\n    \r\n    def record_cost(self, model: str, provider: str, cost: float):\r\n        """Record cost"""\r\n        COST_TRACKING.labels(model=model, provider=provider).inc(cost)\r\n    \r\n    def record_error(self, model: str, error_type: str):\r\n        """Record error"""\r\n        ERROR_RATE.labels(model=model, error_type=error_type).inc()\r\n    \r\n    def track_active_request(self, model: str, increment: bool = True):\r\n        """Track active requests"""\r\n        if increment:\r\n            ACTIVE_REQUESTS.labels(model=model).inc()\r\n        else:\r\n            ACTIVE_REQUESTS.labels(model=model).dec()\r\n\r\n# Monitoring decorator\r\ndef monitor_llm_request(model: str, endpoint: str):\r\n    def decorator(func: Callable) -> Callable:\r\n        @wraps(func)\r\n        async def async_wrapper(*args, **kwargs) -> Any:\r\n            metrics = MetricsCollector()\r\n            start_time = time.time()\r\n            \r\n            metrics.track_active_request(model, increment=True)\r\n            \r\n            try:\r\n                result = await func(*args, **kwargs)\r\n                \r\n                # Record success metrics\r\n                duration = time.time() - start_time\r\n                metrics.record_request(model, endpoint, \'success\')\r\n                metrics.record_duration(model, endpoint, duration)\r\n                \r\n                # Record token usage if available\r\n                if hasattr(result, \'tokens_used\'):\r\n                    metrics.record_token_usage(\r\n                        model, \r\n                        result.input_tokens, \r\n                        result.output_tokens\r\n                    )\r\n                \r\n                return result\r\n                \r\n            except Exception as e:\r\n                # Record error metrics\r\n                duration = time.time() - start_time\r\n                metrics.record_request(model, endpoint, \'error\')\r\n                metrics.record_duration(model, endpoint, duration)\r\n                metrics.record_error(model, type(e).__name__)\r\n                \r\n                # Log structured error\r\n                structlog.get_logger().error(\r\n                    "LLM request failed",\r\n                    model=model,\r\n                    endpoint=endpoint,\r\n                    error=str(e),\r\n                    duration=duration\r\n                )\r\n                \r\n                raise\r\n            \r\n            finally:\r\n                metrics.track_active_request(model, increment=False)\r\n        \r\n        return async_wrapper\r\n    return decorator\r\n\r\n# Usage example\r\nclass MonitoredLLMClient:\r\n    def __init__(self, model: str):\r\n        self.model = model\r\n        self.metrics = MetricsCollector()\r\n    \r\n    @monitor_llm_request("gpt-3.5-turbo", "chat_completion")\r\n    async def chat_completion(self, messages: list, **kwargs):\r\n        # Your LLM API call implementation\r\n        pass\r\n\r\n# Structured logging configuration\r\ndef setup_logging():\r\n    structlog.configure(\r\n        processors=[\r\n            structlog.stdlib.filter_by_level,\r\n            structlog.stdlib.add_logger_name,\r\n            structlog.stdlib.add_log_level,\r\n            structlog.stdlib.PositionalArgumentsFormatter(),\r\n            structlog.processors.TimeStamper(fmt="iso"),\r\n            structlog.processors.StackInfoRenderer(),\r\n            structlog.processors.format_exc_info,\r\n            structlog.processors.UnicodeDecoder(),\r\n            structlog.processors.JSONRenderer()\r\n        ],\r\n        context_class=dict,\r\n        logger_factory=structlog.stdlib.LoggerFactory(),\r\n        wrapper_class=structlog.stdlib.BoundLogger,\r\n        cache_logger_on_first_use=True,\r\n    )\r\n\r\n# Health check endpoint with detailed diagnostics\r\nclass HealthChecker:\r\n    def __init__(self, llm_client, vector_store):\r\n        self.llm_client = llm_client\r\n        self.vector_store = vector_store\r\n    \r\n    async def comprehensive_health_check(self) -> dict:\r\n        """Perform comprehensive health check"""\r\n        checks = {}\r\n        overall_healthy = True\r\n        \r\n        # Check LLM service connectivity\r\n        try:\r\n            test_response = await self.llm_client.complete([\r\n                {"role": "user", "content": "Health check test"}\r\n            ], max_tokens=5)\r\n            \r\n            checks["llm_service"] = {\r\n                "status": "healthy",\r\n                "response_time": 0.5,  # Calculate actual response time\r\n                "last_check": time.time()\r\n            }\r\n        except Exception as e:\r\n            checks["llm_service"] = {\r\n                "status": "unhealthy",\r\n                "error": str(e),\r\n                "last_check": time.time()\r\n            }\r\n            overall_healthy = False\r\n        \r\n        # Check vector store connectivity\r\n        try:\r\n            # Test vector store query\r\n            test_results = self.vector_store.search("health check", top_k=1)\r\n            \r\n            checks["vector_store"] = {\r\n                "status": "healthy",\r\n                "documents_count": len(test_results),\r\n                "last_check": time.time()\r\n            }\r\n        except Exception as e:\r\n            checks["vector_store"] = {\r\n                "status": "unhealthy", \r\n                "error": str(e),\r\n                "last_check": time.time()\r\n            }\r\n            overall_healthy = False\r\n        \r\n        # Check system resources\r\n        import psutil\r\n        \r\n        checks["system_resources"] = {\r\n            "cpu_percent": psutil.cpu_percent(),\r\n            "memory_percent": psutil.virtual_memory().percent,\r\n            "disk_percent": psutil.disk_usage(\'/\').percent\r\n        }\r\n        \r\n        # Check if resources are within acceptable limits\r\n        if (checks["system_resources"]["cpu_percent"] > 90 or \r\n            checks["system_resources"]["memory_percent"] > 90):\r\n            overall_healthy = False\r\n        \r\n        return {\r\n            "status": "healthy" if overall_healthy else "unhealthy",\r\n            "timestamp": time.time(),\r\n            "checks": checks\r\n        }\r\n\r\n# Start metrics server\r\ndef start_metrics_server(port: int = 8080):\r\n    start_http_server(port)\r\n    print("Metrics server started on port " + str(port))\n'})}),"\n",(0,t.jsx)(r.h3,{children:"2. Custom Dashboards and Alerting"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# Grafana dashboard configuration (JSON)\r\ngrafana_dashboard = {\r\n    "dashboard": {\r\n        "title": "LLM Application Monitoring",\r\n        "panels": [\r\n            {\r\n                "title": "Request Rate",\r\n                "type": "graph",\r\n                "targets": [\r\n                    {\r\n                        "expr": "rate(llm_requests_total[5m])",\r\n                        "legendFormat": "\\\\{\\\\{model\\\\}\\\\} - \\\\{\\\\{endpoint\\\\}\\\\}"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                "title": "Response Time",\r\n                "type": "graph", \r\n                "targets": [\r\n                    {\r\n                        "expr": "histogram_quantile(0.95, rate(llm_request_duration_seconds_bucket[5m]))",\r\n                        "legendFormat": "95th percentile"\r\n                    },\r\n                    {\r\n                        "expr": "histogram_quantile(0.50, rate(llm_request_duration_seconds_bucket[5m]))",\r\n                        "legendFormat": "50th percentile"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                "title": "Error Rate",\r\n                "type": "graph",\r\n                "targets": [\r\n                    {\r\n                        "expr": "rate(llm_errors_total[5m]) / rate(llm_requests_total[5m])",\r\n                        "legendFormat": "Error Rate"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                "title": "Token Usage",\r\n                "type": "graph",\r\n                "targets": [\r\n                    {\r\n                        "expr": "rate(llm_tokens_total[5m])",\r\n                        "legendFormat": "\\\\{\\\\{type\\\\}\\\\} tokens"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                "title": "Cost Tracking",\r\n                "type": "singlestat",\r\n                "targets": [\r\n                    {\r\n                        "expr": "sum(llm_cost_total_usd)",\r\n                        "legendFormat": "Total Cost (USD)"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n# Alerting rules for Prometheus\r\nalerting_rules = """\r\ngroups:\r\n- name: llm_application_alerts\r\n  rules:\r\n  - alert: HighErrorRate\r\n    expr: rate(llm_errors_total[5m]) / rate(llm_requests_total[5m]) > 0.1\r\n    for: 2m\r\n    labels:\r\n      severity: warning\r\n    annotations:\r\n      summary: "High error rate detected"\r\n      description: "Error rate is \\\\{\\\\{ $value | humanizePercentage \\\\}\\\\} for the last 5 minutes"\r\n\r\n  - alert: HighResponseTime\r\n    expr: histogram_quantile(0.95, rate(llm_request_duration_seconds_bucket[5m])) > 10\r\n    for: 5m\r\n    labels:\r\n      severity: warning\r\n    annotations:\r\n      summary: "High response time detected"\r\n      description: "95th percentile response time is \\\\{\\\\{ $value \\\\}\\\\}s"\r\n\r\n  - alert: ServiceDown\r\n    expr: up{job="llm-service"} == 0\r\n    for: 1m\r\n    labels:\r\n      severity: critical\r\n    annotations:\r\n      summary: "LLM service is down"\r\n      description: "LLM service has been down for more than 1 minute"\r\n\r\n  - alert: HighCostBurn\r\n    expr: increase(llm_cost_total_usd[1h]) > 50\r\n    for: 0m\r\n    labels:\r\n      severity: warning\r\n    annotations:\r\n      summary: "High cost burn rate"\r\n      description: "Cost increased by $\\\\{\\\\{ $value \\\\}\\\\} in the last hour"\r\n"""\r\n\r\n# Slack alerting integration\r\nimport requests\r\nimport json\r\n\r\nclass SlackAlerter:\r\n    def __init__(self, webhook_url: str, channel: str = "#alerts"):\r\n        self.webhook_url = webhook_url\r\n        self.channel = channel\r\n    \r\n    def send_alert(self, title: str, message: str, severity: str = "warning"):\r\n        """Send alert to Slack"""\r\n        \r\n        color_map = {\r\n            "info": "#36a64f",     # green\r\n            "warning": "#ffaa00",  # orange  \r\n            "critical": "#ff0000"  # red\r\n        }\r\n        \r\n        payload = {\r\n            "channel": self.channel,\r\n            "username": "LLM Monitor",\r\n            "attachments": [\r\n                {\r\n                    "color": color_map.get(severity, "#808080"),\r\n                    "title": title,\r\n                    "text": message,\r\n                    "fields": [\r\n                        {\r\n                            "title": "Severity",\r\n                            "value": severity.upper(),\r\n                            "short": True\r\n                        },\r\n                        {\r\n                            "title": "Timestamp", \r\n                            "value": time.strftime("%Y-%m-%d %H:%M:%S"),\r\n                            "short": True\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n        \r\n        try:\r\n            response = requests.post(\r\n                self.webhook_url,\r\n                data=json.dumps(payload),\r\n                headers={\'Content-Type\': \'application/json\'},\r\n                timeout=10\r\n            )\r\n            response.raise_for_status()\r\n        except Exception as e:\r\n            logging.error("Failed to send Slack alert", extra={"error": str(e)})\n'})}),"\n",(0,t.jsx)(r.h2,{children:"Security and Compliance"}),"\n",(0,t.jsx)(r.h3,{children:"1. Authentication and Authorization"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from fastapi import FastAPI, Depends, HTTPException, status\r\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\r\nimport jwt\r\nfrom datetime import datetime, timedelta\r\nimport hashlib\r\nimport secrets\r\nfrom typing import Optional, List\r\nimport redis\r\nimport asyncio\r\n\r\nclass SecurityManager:\r\n    def __init__(self, secret_key: str, redis_client: redis.Redis):\r\n        self.secret_key = secret_key\r\n        self.redis_client = redis_client\r\n        self.security = HTTPBearer()\r\n    \r\n    def create_access_token(self, user_id: str, scopes: List[str]) -> str:\r\n        """Create JWT access token with scopes"""\r\n        to_encode = {\r\n            "sub": user_id,\r\n            "scopes": scopes,\r\n            "exp": datetime.utcnow() + timedelta(hours=24),\r\n            "iat": datetime.utcnow(),\r\n            "type": "access"\r\n        }\r\n        \r\n        encoded_jwt = jwt.encode(to_encode, self.secret_key, algorithm="HS256")\r\n        return encoded_jwt\r\n    \r\n    def create_api_key(self, user_id: str, name: str, scopes: List[str]) -> tuple:\r\n        """Create API key for service-to-service communication"""\r\n        api_key = "ak_" + secrets.token_urlsafe(32)\r\n        api_secret = secrets.token_urlsafe(64)\r\n        \r\n        # Hash the secret for storage\r\n        secret_hash = hashlib.sha256(api_secret.encode()).hexdigest()\r\n        \r\n        # Store in Redis\r\n        key_data = {\r\n            "user_id": user_id,\r\n            "name": name,\r\n            "scopes": ",".join(scopes),\r\n            "secret_hash": secret_hash,\r\n            "created_at": datetime.utcnow().isoformat(),\r\n            "last_used": None\r\n        }\r\n        \r\n        self.redis_client.hset("api_keys:" + api_key, mapping=key_data)\r\n        \r\n        return api_key, api_secret\r\n    \r\n    async def verify_token(self, credentials: HTTPAuthorizationCredentials) -> dict:\r\n        """Verify JWT token"""\r\n        try:\r\n            payload = jwt.decode(\r\n                credentials.credentials, \r\n                self.secret_key, \r\n                algorithms=["HS256"]\r\n            )\r\n            \r\n            user_id = payload.get("sub")\r\n            scopes = payload.get("scopes", [])\r\n            \r\n            if user_id is None:\r\n                raise HTTPException(\r\n                    status_code=status.HTTP_401_UNAUTHORIZED,\r\n                    detail="Invalid token"\r\n                )\r\n            \r\n            return {"user_id": user_id, "scopes": scopes}\r\n            \r\n        except jwt.ExpiredSignatureError:\r\n            raise HTTPException(\r\n                status_code=status.HTTP_401_UNAUTHORIZED,\r\n                detail="Token has expired"\r\n            )\r\n        except jwt.JWTError:\r\n            raise HTTPException(\r\n                status_code=status.HTTP_401_UNAUTHORIZED,\r\n                detail="Invalid token"\r\n            )\r\n    \r\n    async def verify_api_key(self, api_key: str, api_secret: str) -> dict:\r\n        """Verify API key and secret"""\r\n        key_data = self.redis_client.hgetall("api_keys:" + api_key)\r\n        \r\n        if not key_data:\r\n            raise HTTPException(\r\n                status_code=status.HTTP_401_UNAUTHORIZED,\r\n                detail="Invalid API key"\r\n            )\r\n        \r\n        # Verify secret\r\n        secret_hash = hashlib.sha256(api_secret.encode()).hexdigest()\r\n        if secret_hash != key_data[b"secret_hash"].decode():\r\n            raise HTTPException(\r\n                status_code=status.HTTP_401_UNAUTHORIZED,\r\n                detail="Invalid API secret"\r\n            )\r\n        \r\n        # Update last used timestamp\r\n        self.redis_client.hset(\r\n            "api_keys:" + api_key, \r\n            "last_used", \r\n            datetime.utcnow().isoformat()\r\n        )\r\n        \r\n        return {\r\n            "user_id": key_data[b"user_id"].decode(),\r\n            "scopes": key_data[b"scopes"].decode().split(",")\r\n        }\r\n    \r\n    def require_scope(self, required_scope: str):\r\n        """Decorator to require specific scope"""\r\n        def decorator(func):\r\n            @wraps(func)\r\n            async def wrapper(*args, **kwargs):\r\n                # Extract auth info from kwargs or dependency injection\r\n                auth_info = kwargs.get("auth_info")\r\n                if not auth_info or required_scope not in auth_info.get("scopes", []):\r\n                    raise HTTPException(\r\n                        status_code=status.HTTP_403_FORBIDDEN,\r\n                        detail="Insufficient permissions"\r\n                    )\r\n                return await func(*args, **kwargs)\r\n            return wrapper\r\n        return decorator\r\n\r\n# Rate limiting\r\nclass RateLimiter:\r\n    def __init__(self, redis_client: redis.Redis):\r\n        self.redis_client = redis_client\r\n    \r\n    async def is_allowed(\r\n        self, \r\n        key: str, \r\n        limit: int, \r\n        window_seconds: int\r\n    ) -> tuple[bool, dict]:\r\n        """Check if request is allowed under rate limit"""\r\n        \r\n        current_time = int(time.time())\r\n        window_start = current_time - window_seconds\r\n        \r\n        pipe = self.redis_client.pipeline()\r\n        \r\n        # Remove old entries\r\n        pipe.zremrangebyscore(key, 0, window_start)\r\n        \r\n        # Count current requests\r\n        pipe.zcard(key)\r\n        \r\n        # Add current request\r\n        pipe.zadd(key, {str(current_time): current_time})\r\n        \r\n        # Set expiry\r\n        pipe.expire(key, window_seconds)\r\n        \r\n        results = pipe.execute()\r\n        current_requests = results[1]\r\n        \r\n        allowed = current_requests < limit\r\n        \r\n        return allowed, {\r\n            "limit": limit,\r\n            "current": current_requests,\r\n            "remaining": max(0, limit - current_requests - 1),\r\n            "reset_time": current_time + window_seconds\r\n        }\r\n\r\n# Secure FastAPI application\r\ndef create_secure_app() -> FastAPI:\r\n    app = FastAPI(title="Secure LLM API")\r\n    \r\n    redis_client = redis.Redis(host=\'localhost\', port=6379, db=0)\r\n    security_manager = SecurityManager("your-secret-key", redis_client)\r\n    rate_limiter = RateLimiter(redis_client)\r\n    \r\n    @app.middleware("http")\r\n    async def security_middleware(request, call_next):\r\n        # Add security headers\r\n        response = await call_next(request)\r\n        response.headers["X-Content-Type-Options"] = "nosniff"\r\n        response.headers["X-Frame-Options"] = "DENY"\r\n        response.headers["X-XSS-Protection"] = "1; mode=block"\r\n        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"\r\n        return response\r\n    \r\n    async def get_current_user(\r\n        credentials: HTTPAuthorizationCredentials = Depends(security_manager.security)\r\n    ):\r\n        return await security_manager.verify_token(credentials)\r\n    \r\n    @app.post("/v1/chat/completions")\r\n    @security_manager.require_scope("llm:chat")\r\n    async def secure_chat_completion(\r\n        request: ChatRequest,\r\n        auth_info: dict = Depends(get_current_user)\r\n    ):\r\n        user_id = auth_info["user_id"]\r\n        \r\n        # Apply rate limiting\r\n        allowed, rate_info = await rate_limiter.is_allowed(\r\n            "user:" + user_id,\r\n            limit=100,  # 100 requests per hour\r\n            window_seconds=3600\r\n        )\r\n        \r\n        if not allowed:\r\n            raise HTTPException(\r\n                status_code=status.HTTP_429_TOO_MANY_REQUESTS,\r\n                detail="Rate limit exceeded",\r\n                headers={\r\n                    "X-RateLimit-Limit": str(rate_info["limit"]),\r\n                    "X-RateLimit-Remaining": str(rate_info["remaining"]),\r\n                    "X-RateLimit-Reset": str(rate_info["reset_time"])\r\n                }\r\n            )\r\n        \r\n        # Process the request\r\n        # ... your chat completion logic here\r\n        \r\n        return {"message": "Chat completion processed securely"}\r\n    \r\n    return app\n'})}),"\n",(0,t.jsx)(r.h3,{children:"2. Data Privacy and Compliance"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'import hashlib\r\nimport hmac\r\nfrom datetime import datetime, timedelta\r\nfrom typing import Dict, Any, Optional\r\nimport json\r\nimport asyncio\r\n\r\nclass DataPrivacyManager:\r\n    def __init__(self, encryption_key: str):\r\n        self.encryption_key = encryption_key.encode()\r\n    \r\n    def anonymize_user_data(self, user_id: str) -> str:\r\n        """Create anonymous user identifier"""\r\n        return hmac.new(\r\n            self.encryption_key,\r\n            user_id.encode(),\r\n            hashlib.sha256\r\n        ).hexdigest()[:16]\r\n    \r\n    def sanitize_conversation(self, messages: List[dict]) -> List[dict]:\r\n        """Remove PII from conversation data"""\r\n        sanitized = []\r\n        \r\n        pii_patterns = [\r\n            r\'\\b\\d{3}-\\d{2}-\\d{4}\\b\',  # SSN\r\n            r\'\\b\\d{4}\\s?\\d{4}\\s?\\d{4}\\s?\\d{4}\\b\',  # Credit card\r\n            r\'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\',  # Email\r\n            r\'\\b\\d{3}-\\d{3}-\\d{4}\\b\',  # Phone number\r\n        ]\r\n        \r\n        for message in messages:\r\n            content = message.get("content", "")\r\n            \r\n            # Replace PII patterns with placeholders\r\n            for pattern in pii_patterns:\r\n                content = re.sub(pattern, "[REDACTED]", content)\r\n            \r\n            sanitized.append({\r\n                **message,\r\n                "content": content\r\n            })\r\n        \r\n        return sanitized\r\n    \r\n    def log_data_access(self, user_id: str, data_type: str, purpose: str):\r\n        """Log data access for compliance"""\r\n        access_log = {\r\n            "timestamp": datetime.utcnow().isoformat(),\r\n            "user_id": self.anonymize_user_data(user_id),\r\n            "data_type": data_type,\r\n            "purpose": purpose,\r\n            "access_granted": True\r\n        }\r\n        \r\n        # Store in compliance log (implement your storage mechanism)\r\n        self._store_compliance_log(access_log)\r\n    \r\n    def handle_data_deletion_request(self, user_id: str) -> bool:\r\n        """Handle GDPR/CCPA deletion requests"""\r\n        try:\r\n            # Delete user conversations\r\n            # Delete user preferences\r\n            # Delete user analytics data\r\n            # Update logs to reflect deletion\r\n            \r\n            deletion_log = {\r\n                "timestamp": datetime.utcnow().isoformat(),\r\n                "user_id": self.anonymize_user_data(user_id),\r\n                "action": "data_deletion",\r\n                "status": "completed"\r\n            }\r\n            \r\n            self._store_compliance_log(deletion_log)\r\n            return True\r\n            \r\n        except Exception as e:\r\n            logging.error("Data deletion failed", extra={"error": str(e)})\r\n            return False\r\n    \r\n    def _store_compliance_log(self, log_entry: dict):\r\n        """Store compliance log entry"""\r\n        # Implement your preferred storage mechanism\r\n        # Could be database, file system, or external compliance service\r\n        pass\r\n\r\n# Content filtering for safety\r\nclass ContentFilter:\r\n    def __init__(self):\r\n        self.harmful_patterns = [\r\n            r\'\\b(kill|murder|suicide)\\b\',\r\n            r\'\\b(bomb|explosive|weapon)\\b\',\r\n            r\'\\b(hack|exploit|vulnerability)\\b\',\r\n            # Add more patterns based on your safety requirements\r\n        ]\r\n    \r\n    async def filter_content(self, content: str) -> tuple[bool, List[str]]:\r\n        """Filter content for harmful patterns"""\r\n        violations = []\r\n        \r\n        for pattern in self.harmful_patterns:\r\n            if re.search(pattern, content, re.IGNORECASE):\r\n                violations.append(pattern)\r\n        \r\n        is_safe = len(violations) == 0\r\n        return is_safe, violations\r\n    \r\n    async def filter_request(self, request: ChatRequest) -> ChatRequest:\r\n        """Filter incoming request"""\r\n        filtered_messages = []\r\n        \r\n        for message in request.messages:\r\n            content = message.get("content", "")\r\n            is_safe, violations = await self.filter_content(content)\r\n            \r\n            if not is_safe:\r\n                # Log the violation\r\n                logging.warning(\r\n                    "Content violation detected",\r\n                    extra={\r\n                        "violations": violations,\r\n                        "content_preview": content[:100]\r\n                    }\r\n                )\r\n                \r\n                # Replace with safe content or reject\r\n                message["content"] = "[Content filtered for safety]"\r\n            \r\n            filtered_messages.append(message)\r\n        \r\n        return ChatRequest(\r\n            **{**request.dict(), "messages": filtered_messages}\r\n        )\n'})}),"\n",(0,t.jsx)(r.h2,{children:"Scaling Strategies and Performance Optimization"}),"\n",(0,t.jsx)(r.h3,{children:"1. Caching Strategies"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'import redis\r\nimport json\r\nimport hashlib\r\nfrom typing import Optional, Any\r\nimport asyncio\r\n\r\nclass LLMCache:\r\n    def __init__(self, redis_client: redis.Redis):\r\n        self.redis_client = redis_client\r\n        self.default_ttl = 3600  # 1 hour\r\n    \r\n    def _generate_cache_key(self, messages: List[dict], model: str, **kwargs) -> str:\r\n        """Generate deterministic cache key"""\r\n        # Create a deterministic representation\r\n        cache_data = {\r\n            "messages": messages,\r\n            "model": model,\r\n            **{k: v for k, v in kwargs.items() if k in ["temperature", "max_tokens"]}\r\n        }\r\n        \r\n        # Sort for deterministic ordering\r\n        cache_string = json.dumps(cache_data, sort_keys=True)\r\n        \r\n        # Hash for compact key\r\n        return "llm_cache:" + hashlib.md5(cache_string.encode()).hexdigest()\r\n    \r\n    async def get(self, messages: List[dict], model: str, **kwargs) -> Optional[dict]:\r\n        """Get cached response"""\r\n        cache_key = self._generate_cache_key(messages, model, **kwargs)\r\n        \r\n        try:\r\n            cached_data = self.redis_client.get(cache_key)\r\n            if cached_data:\r\n                return json.loads(cached_data)\r\n        except Exception as e:\r\n            logging.warning("Cache retrieval failed", extra={"error": str(e)})\r\n        \r\n        return None\r\n    \r\n    async def set(\r\n        self, \r\n        messages: List[dict], \r\n        model: str, \r\n        response: dict, \r\n        ttl: Optional[int] = None,\r\n        **kwargs\r\n    ):\r\n        """Cache response"""\r\n        cache_key = self._generate_cache_key(messages, model, **kwargs)\r\n        ttl = ttl or self.default_ttl\r\n        \r\n        try:\r\n            self.redis_client.setex(\r\n                cache_key,\r\n                ttl,\r\n                json.dumps(response)\r\n            )\r\n        except Exception as e:\r\n            logging.warning("Cache storage failed", extra={"error": str(e)})\r\n    \r\n    async def invalidate_pattern(self, pattern: str):\r\n        """Invalidate cache entries matching pattern"""\r\n        try:\r\n            keys = self.redis_client.keys(pattern)\r\n            if keys:\r\n                self.redis_client.delete(*keys)\r\n        except Exception as e:\r\n            logging.warning("Cache invalidation failed", extra={"error": str(e)})\r\n\r\nclass CachedLLMClient:\r\n    def __init__(self, llm_client, cache: LLMCache):\r\n        self.llm_client = llm_client\r\n        self.cache = cache\r\n    \r\n    async def complete(self, messages: List[dict], **kwargs) -> dict:\r\n        """Complete with caching"""\r\n        \r\n        # Check cache first\r\n        cached_response = await self.cache.get(messages, self.llm_client.model, **kwargs)\r\n        if cached_response:\r\n            logging.info("Cache hit", extra={"cache_key": "hit"})\r\n            return cached_response\r\n        \r\n        # Call LLM API\r\n        response = await self.llm_client.complete(messages, **kwargs)\r\n        \r\n        # Cache the response\r\n        await self.cache.set(messages, self.llm_client.model, response, **kwargs)\r\n        \r\n        return response\r\n\r\n# Connection pooling and load balancing\r\nclass LLMLoadBalancer:\r\n    def __init__(self, providers: List[dict]):\r\n        """\r\n        providers: [\r\n            {"name": "openai", "client": openai_client, "weight": 0.7},\r\n            {"name": "anthropic", "client": anthropic_client, "weight": 0.3}\r\n        ]\r\n        """\r\n        self.providers = providers\r\n        self.current_loads = {p["name"]: 0 for p in providers}\r\n    \r\n    async def select_provider(self, request_type: str = "chat") -> dict:\r\n        """Select provider based on load and weights"""\r\n        \r\n        # Calculate weighted scores based on current load\r\n        best_provider = None\r\n        best_score = float(\'in\')\r\n        \r\n        for provider in self.providers:\r\n            current_load = self.current_loads[provider["name"]]\r\n            weight = provider["weight"]\r\n            \r\n            # Score = load / weight (lower is better)\r\n            score = current_load / weight\r\n            \r\n            if score < best_score:\r\n                best_score = score\r\n                best_provider = provider\r\n        \r\n        # Update load tracking\r\n        if best_provider:\r\n            self.current_loads[best_provider["name"]] += 1\r\n        \r\n        return best_provider\r\n    \r\n    async def complete_with_load_balancing(self, messages: List[dict], **kwargs) -> dict:\r\n        """Complete request with load balancing"""\r\n        \r\n        provider = await self.select_provider()\r\n        \r\n        try:\r\n            response = await provider["client"].complete(messages, **kwargs)\r\n            return response\r\n        except Exception as e:\r\n            logging.error(\r\n                "Provider failed, attempting fallback",\r\n                extra={"provider": provider["name"], "error": str(e)}\r\n            )\r\n            \r\n            # Try other providers as fallback\r\n            for fallback_provider in self.providers:\r\n                if fallback_provider["name"] != provider["name"]:\r\n                    try:\r\n                        return await fallback_provider["client"].complete(messages, **kwargs)\r\n                    except Exception as fe:\r\n                        logging.error(\r\n                            "Fallback provider failed",\r\n                            extra={"provider": fallback_provider["name"], "error": str(fe)}\r\n                        )\r\n            \r\n            # If all providers fail, raise the original exception\r\n            raise e\r\n        \r\n        finally:\r\n            # Decrease load counter\r\n            self.current_loads[provider["name"]] -= 1\r\n\r\n# Async request batching\r\nclass RequestBatcher:\r\n    def __init__(self, batch_size: int = 10, max_wait_time: float = 0.1):\r\n        self.batch_size = batch_size\r\n        self.max_wait_time = max_wait_time\r\n        self.pending_requests = []\r\n        self.batch_timer = None\r\n    \r\n    async def add_request(self, request: dict, response_future: asyncio.Future):\r\n        """Add request to batch"""\r\n        self.pending_requests.append({\r\n            "request": request,\r\n            "future": response_future\r\n        })\r\n        \r\n        # Start timer if this is the first request\r\n        if len(self.pending_requests) == 1:\r\n            self.batch_timer = asyncio.create_task(\r\n                self._wait_and_process_batch()\r\n            )\r\n        \r\n        # Process immediately if batch is full\r\n        if len(self.pending_requests) >= self.batch_size:\r\n            if self.batch_timer:\r\n                self.batch_timer.cancel()\r\n            await self._process_batch()\r\n    \r\n    async def _wait_and_process_batch(self):\r\n        """Wait for max_wait_time then process batch"""\r\n        try:\r\n            await asyncio.sleep(self.max_wait_time)\r\n            await self._process_batch()\r\n        except asyncio.CancelledError:\r\n            pass\r\n    \r\n    async def _process_batch(self):\r\n        """Process current batch of requests"""\r\n        if not self.pending_requests:\r\n            return\r\n        \r\n        batch = self.pending_requests.copy()\r\n        self.pending_requests.clear()\r\n        \r\n        # Process batch requests\r\n        try:\r\n            # Implement batch processing logic here\r\n            # This could involve parallel API calls or optimized batch API endpoints\r\n            \r\n            responses = await self._execute_batch([req["request"] for req in batch])\r\n            \r\n            # Resolve futures with responses\r\n            for i, batch_item in enumerate(batch):\r\n                batch_item["future"].set_result(responses[i])\r\n                \r\n        except Exception as e:\r\n            # Reject all futures with the error\r\n            for batch_item in batch:\r\n                batch_item["future"].set_exception(e)\r\n    \r\n    async def _execute_batch(self, requests: List[dict]) -> List[dict]:\r\n        """Execute batch of requests"""\r\n        # Implement parallel execution\r\n        tasks = []\r\n        for request in requests:\r\n            task = asyncio.create_task(self._execute_single_request(request))\r\n            tasks.append(task)\r\n        \r\n        return await asyncio.gather(*tasks)\r\n    \r\n    async def _execute_single_request(self, request: dict) -> dict:\r\n        """Execute single request (implement your LLM client call here)"""\r\n        # This is where you\'.format(\r\n            "request": request,\r\n            "future": response_future\r\n        )d call your actual LLM client\r\n        pass\n'})}),"\n",(0,t.jsx)(r.h2,{children:"Key Takeaways for Part 3"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Infrastructure Patterns"}),": Use microservices architecture with proper service separation"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Monitoring is Essential"}),": Implement comprehensive monitoring with metrics, logging, and alerting"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Security First"}),": Implement authentication, authorization, rate limiting, and content filtering"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Performance Optimization"}),": Use caching, load balancing, and request batching for scale"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Compliance Matters"}),": Handle data privacy, PII protection, and regulatory requirements"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{children:"Series Conclusion"}),"\n",(0,t.jsxs)(r.p,{children:["Congratulations! You've completed the ",(0,t.jsx)(r.strong,{children:"LLM Engineering Mastery"})," series. You now have the practical knowledge to:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Select and integrate foundation models effectively"}),"\n",(0,t.jsx)(r.li,{children:"Build advanced RAG systems with proper evaluation"}),"\n",(0,t.jsx)(r.li,{children:"Deploy and scale LLM applications in production"}),"\n",(0,t.jsx)(r.li,{children:"Monitor and maintain enterprise-grade systems"}),"\n",(0,t.jsx)(r.li,{children:"Implement security and compliance best practices"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"The field of LLM engineering is rapidly evolving, but these foundational patterns and practices will serve you well as you build the next generation of AI-powered applications."}),"\n",(0,t.jsx)(r.h3,{children:"Next Steps"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Practice"}),": Implement these patterns in your own projects"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Stay Updated"}),": Follow LLM research and new model releases"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Community"}),": Join LLM engineering communities and share your experiences"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Experiment"}),": Try new techniques and optimization strategies"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Scale Gradually"}),": Start small and scale based on real usage patterns"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:"This concludes the LLM Engineering Mastery series. Keep building amazing AI applications!"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);