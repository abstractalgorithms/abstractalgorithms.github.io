"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8722],{58722:function(e,n,r){r.r(n),r.d(n,{default:function(){return d},frontmatter:function(){return t},metadata:function(){return a}});var s=r(57437),i=r(75595);let t=void 0,a={id:"bst-basics-java-20250718",slug:"bst-basics-java",title:"Binary Search Tree (BST) Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the binary search tree (BST) data structure, allowed operations, Java implementation, and see where BSTs are used in advanced algorithms.",author:"Abstract Algorithms",tags:["bst","binary-search-tree","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/bst-overview-600x400.jpg"};function l(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TLDR:"})," Binary Search Trees (BSTs) are hierarchical data structures for fast ordered data access, insertion, and deletion. This guide covers BST basics, allowed operations, Java implementation, and links to advanced posts using BSTs."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#what-is-a-bst-",children:"What is a BST? \uD83D\uDE80"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#how-to-design-a-bst-in-java-",children:"How to Design a BST in Java \uD83D\uDCBB"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#where-bsts-are-used-",children:"Where BSTs Are Used \uD83E\uDDE9"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"What is a BST? \uD83D\uDE80"}),"\n",(0,s.jsx)(n.p,{children:"A binary search tree (BST) is a binary tree where each node's left child is less than the node and the right child is greater. BSTs enable fast search, insert, and delete for ordered data."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fast search, insert, and delete for ordered data"}),"\n",(0,s.jsx)(n.li,{children:"Foundation for sets, maps, and range queries"}),"\n",(0,s.jsx)(n.li,{children:"Used in searching, sorting, and interval problems"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Allowed Operations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"insert(x):"})," Add element x to the BST"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"delete(x):"})," Remove element x from the BST"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"search(x):"})," Check if x exists in the BST"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"traverse():"})," Visit all nodes in order (inorder, preorder, postorder)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"min()/max():"})," Find minimum/maximum value"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"How to Design a BST in Java \uD83D\uDCBB"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Approach:"}),"\r\nImplement a node class with left/right pointers. Java provides ",(0,s.jsx)(n.code,{children:"TreeSet"})," and ",(0,s.jsx)(n.code,{children:"TreeMap"})," for built-in BSTs."]}),"\n",(0,s.jsx)(n.h3,{children:"Custom BST Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'class TreeNode {\r\n    int val;\r\n    TreeNode left, right;\r\n    TreeNode(int val) { this.val = val; }\r\n}\r\nclass BST {\r\n    private TreeNode root;\r\n    public void insert(int x) { root = insert(root, x); }\r\n    private TreeNode insert(TreeNode node, int x) {\r\n        if (node == null) return new TreeNode(x);\r\n        if (x < node.val) node.left = insert(node.left, x);\r\n        else if (x > node.val) node.right = insert(node.right, x);\r\n        return node;\r\n    }\r\n    public boolean search(int x) {\r\n        TreeNode node = root;\r\n        while (node != null) {\r\n            if (x == node.val) return true;\r\n            node = x < node.val ? node.left : node.right;\r\n        }\r\n        return false;\r\n    }\r\n    public void inorder() { inorder(root); }\r\n    private void inorder(TreeNode node) {\r\n        if (node == null) return;\r\n        inorder(node.left);\r\n        System.out.print(node.val + " ");\r\n        inorder(node.right);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{children:"Using TreeSet (Built-in BST)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"TreeSet<Integer> set = new TreeSet<>();\r\nset.add(10);\r\nset.add(5);\r\nfor (int x : set) {\r\n    System.out.println(x);\r\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Where BSTs Are Used \uD83E\uDDE9"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/genai-mastery-series/part-9",children:"Range Query and Interval Problems"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/genai-mastery-series/part-10",children:"Ordered Set/Map Implementations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/posts/genai-mastery-series/part-11",children:"Searching and Sorting Algorithms"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Draw BST structure for each operation"}),"\n",(0,s.jsx)(n.li,{children:"Know time/space complexity for operations"}),"\n",(0,s.jsx)(n.li,{children:"Practice both recursive and iterative traversals"}),"\n",(0,s.jsx)(n.li,{children:"Clarify if duplicates are allowed"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Summary:"}),"\r\nBSTs are essential for many ordered data and search problems. Master the basics, understand allowed operations, and practice implementing BSTs in Java to build a strong foundation."]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},75595:function(e,n,r){r.d(n,{a:function(){return t}});var s=r(2265);let i=s.createContext({});function t(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);