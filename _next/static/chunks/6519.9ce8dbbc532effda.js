"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6519],{46519:function(e,r,n){n.r(r),n.d(r,{default:function(){return d},frontmatter:function(){return t},metadata:function(){return a}});var i=n(57437),s=n(75595);let t=void 0,a={id:"trie-basics-java-20250718",slug:"trie-basics-java",title:"Trie Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the trie data structure, allowed operations, Java implementation, and see where tries are used in advanced algorithms.",author:"Abstract Algorithms",tags:["trie","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/trie-overview-600x400.jpg"};function o(e){let r={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"TLDR:"})," Tries (prefix trees) are tree-like data structures for efficient string and prefix searching. This guide covers trie basics, allowed operations, Java implementation, and links to advanced posts using tries."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Navigation:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#what-is-a-trie-",children:"What is a Trie? \uD83D\uDE80"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#how-to-design-a-trie-in-java-",children:"How to Design a Trie in Java \uD83D\uDCBB"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#where-tries-are-used-",children:"Where Tries Are Used \uD83E\uDDE9"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{children:"What is a Trie? \uD83D\uDE80"}),"\n",(0,i.jsx)(r.p,{children:'A trie (pronounced "try") is a tree-like data structure used to store strings, where each node represents a character. Tries enable fast prefix and word searches, making them ideal for autocomplete and dictionary problems.'}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Purpose:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Efficient prefix and word searching"}),"\n",(0,i.jsx)(r.li,{children:"Autocomplete and spell-check"}),"\n",(0,i.jsx)(r.li,{children:"Storing dictionaries of words"}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{children:"Allowed Operations"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"insert(word):"})," Add a word to the trie"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"search(word):"})," Check if a word exists"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"startsWith(prefix):"})," Check if any word starts with a prefix"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"delete(word):"})," Remove a word from the trie (optional)"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{children:"How to Design a Trie in Java \uD83D\uDCBB"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Approach:"}),"\r\nImplement a trie node class with a map/array of children and a boolean to mark the end of a word."]}),"\n",(0,i.jsx)(r.h3,{children:"Custom Trie Implementation"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"class TrieNode {\r\n    Map<Character, TrieNode> children = new HashMap<>();\r\n    boolean isEndOfWord = false;\r\n}\r\nclass Trie {\r\n    private TrieNode root = new TrieNode();\r\n    public void insert(String word) {\r\n        TrieNode node = root;\r\n        for (char c : word.toCharArray()) {\r\n            node = node.children.computeIfAbsent(c, k -> new TrieNode());\r\n        }\r\n        node.isEndOfWord = true;\r\n    }\r\n    public boolean search(String word) {\r\n        TrieNode node = root;\r\n        for (char c : word.toCharArray()) {\r\n            node = node.children.get(c);\r\n            if (node == null) return false;\r\n        }\r\n        return node.isEndOfWord;\r\n    }\r\n    public boolean startsWith(String prefix) {\r\n        TrieNode node = root;\r\n        for (char c : prefix.toCharArray()) {\r\n            node = node.children.get(c);\r\n            if (node == null) return false;\r\n        }\r\n        return true;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{children:"Where Tries Are Used \uD83E\uDDE9"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/posts/genai-mastery-series/part-5",children:"Autocomplete and Prefix Search Problems"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/posts/genai-mastery-series/part-6",children:"Word Dictionary and Spell Checker"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/posts/genai-mastery-series/part-12",children:"Efficient String Matching Algorithms"})}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Draw trie structure for each operation"}),"\n",(0,i.jsx)(r.li,{children:"Clarify allowed character set (a-z, A-Z, etc.)"}),"\n",(0,i.jsx)(r.li,{children:"Know time/space complexity for operations"}),"\n",(0,i.jsx)(r.li,{children:"Practice both insert and search operations"}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Summary:"}),"\r\nTries are essential for many string and prefix search problems. Master the basics, understand allowed operations, and practice implementing tries in Java to build a strong foundation."]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},75595:function(e,r,n){n.d(r,{a:function(){return t}});var i=n(2265);let s=i.createContext({});function t(e){let r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}}}]);