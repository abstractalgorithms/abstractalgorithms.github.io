"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4355],{84355:function(e,n,r){r.r(n),r.d(n,{default:function(){return l},frontmatter:function(){return a},metadata:function(){return t}});var i=r(57437),s=r(75595);let a=void 0,t={id:"queue-basics-java-20250718",slug:"queue-basics-java",title:"Queue Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the queue data structure, allowed operations, Java implementation, and see where queues are used in advanced algorithms.",author:"Abstract Algorithms",tags:["queue","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/queue-overview-600x400.jpg"};function u(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TLDR:"})," Queues are a foundational data structure for scheduling, breadth-first search, and buffering. This guide covers queue basics, allowed operations, Java implementation, and links to advanced posts using queues."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#what-is-a-queue-",children:"What is a Queue? \uD83D\uDE80"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#how-to-design-a-queue-in-java-",children:"How to Design a Queue in Java \uD83D\uDCBB"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#where-queues-are-used-",children:"Where Queues Are Used \uD83E\uDDE9"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{children:"What is a Queue? \uD83D\uDE80"}),"\n",(0,i.jsx)(n.p,{children:"A queue is a linear data structure that follows the First-In-First-Out (FIFO) principle. The first element added is the first to be removed."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Scheduling tasks"}),"\n",(0,i.jsx)(n.li,{children:"Breadth-first search (BFS)"}),"\n",(0,i.jsx)(n.li,{children:"Buffering data streams"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Allowed Operations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"offer(x)/enqueue(x):"})," Add element x to the rear"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"poll()/dequeue():"})," Remove and return the front element"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"peek():"})," Return the front element without removing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"isEmpty():"})," Check if the queue is empty"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"size():"})," Return the number of elements"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"How to Design a Queue in Java \uD83D\uDCBB"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Approach:"}),"\r\nYou can use Java's built-in ",(0,i.jsx)(n.code,{children:"Queue"})," interface (e.g., ",(0,i.jsx)(n.code,{children:"LinkedList"}),"), or design your own using an array or linked list."]}),"\n",(0,i.jsx)(n.h3,{children:"Using Java's Built-in Queue"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Queue<Integer> queue = new LinkedList<>();\r\nqueue.offer(10);\r\nint front = queue.poll();\n"})}),"\n",(0,i.jsx)(n.h3,{children:"Custom Queue Implementation (Array)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'class MyQueue {\r\n    private int[] arr;\r\n    private int front, rear, size, capacity;\r\n    public MyQueue(int capacity) {\r\n        arr = new int[capacity];\r\n        this.capacity = capacity;\r\n        front = 0; rear = -1; size = 0;\r\n    }\r\n    public void offer(int x) {\r\n        if (size == capacity) throw new RuntimeException("Queue full");\r\n        rear = (rear + 1) % capacity;\r\n        arr[rear] = x;\r\n        size++;\r\n    }\r\n    public int poll() {\r\n        if (size == 0) throw new RuntimeException("Queue empty");\r\n        int val = arr[front];\r\n        front = (front + 1) % capacity;\r\n        size--;\r\n        return val;\r\n    }\r\n    public int peek() {\r\n        if (size == 0) throw new RuntimeException("Queue empty");\r\n        return arr[front];\r\n    }\r\n    public boolean isEmpty() {\r\n        return size == 0;\r\n    }\r\n    public int size() {\r\n        return size;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Where Queues Are Used \uD83E\uDDE9"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/breadth-first-search-bfs-interview-analysis-java",children:"BFS: Interview Scenarios, Analysis, and Java Implementation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/matrix-traversal-interview-analysis-java",children:"Matrix Traversal: Interview Scenarios, Analysis, and Java Implementation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/binary-tree-traversal-interview-analysis-java",children:"Level Order Traversal in Trees"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Clarify queue capacity and allowed operations"}),"\n",(0,i.jsx)(n.li,{children:"Draw queue changes for each operation"}),"\n",(0,i.jsx)(n.li,{children:"Explain your approach and edge cases"}),"\n",(0,i.jsx)(n.li,{children:"Practice both built-in and custom implementations"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Summary:"}),"\r\nQueues are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice implementing queues in Java to build a strong foundation."]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},75595:function(e,n,r){r.d(n,{a:function(){return a}});var i=r(2265);let s=i.createContext({});function a(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);