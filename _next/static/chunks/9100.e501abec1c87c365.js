"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9100],{79100:function(e,r,n){n.r(r),n.d(r,{default:function(){return d},frontmatter:function(){return t},metadata:function(){return s}});var i=n(57437),a=n(75595);let t=void 0,s={id:"9l8m1h4i-5j6k-9g7f-4h8i-9j0k1l2m3n4o",slug:"modified-binary-search-interview-analysis-java",title:"Modified Binary Search: Interview Scenarios, Analysis, and Java Implementation",date:"2025-07-16",excerpt:"Master modified binary search for rotated arrays and advanced search problems. Java code, scenarios, and interview tips.",author:"Abstract Algorithms",tags:["binary-search","algorithms","interview-prep","java"],status:"published",coverImage:"./assets/overview-600x400.jpg"};function l(e){let r={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"TLDR:"})," Modified binary search is a must-know for advanced array problems like rotated arrays and peak finding. This guide covers the core concept, example problems, and practical tips for Java interviews."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Navigation:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#what-is-modified-binary-search",children:"What is Modified Binary Search?"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#example-problem-search-in-rotated-sorted-array",children:"Example Problem: Search in Rotated Sorted Array"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#interview-scenarios",children:"Interview Scenarios"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#practice-problems",children:"Practice Problems"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#key-takeaways",children:"Key Takeaways"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{children:"What is Modified Binary Search?"}),"\n",(0,i.jsx)(r.p,{children:"Modified binary search adapts the classic binary search for problems like rotated arrays, peak finding, and more."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Why is it important for interviews?"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Appears in advanced search problems and array manipulations."}),"\n",(0,i.jsx)(r.li,{children:"Tests understanding of binary search variations."}),"\n"]}),"\n",(0,i.jsx)(r.h2,{children:"Example Problem: Search in Rotated Sorted Array"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Problem:"})," Search for a target in a rotated sorted array."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Solution:"})," Use binary search with additional checks."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"public static int searchRotated(int[] arr, int target) {\r\n    int left = 0, right = arr.length - 1;\r\n    while (left <= right) {\r\n        int mid = left + (right - left) / 2;\r\n        if (arr[mid] == target) return mid;\r\n        if (arr[left] <= arr[mid]) {\r\n            if (target >= arr[left] && target < arr[mid]) right = mid - 1;\r\n            else left = mid + 1;\r\n        } else {\r\n            if (target > arr[mid] && target <= arr[right]) left = mid + 1;\r\n            else right = mid - 1;\r\n        }\r\n    }\r\n    return -1;\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{children:"Interview Scenarios"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.strong,{children:"Find Peak Element"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.strong,{children:"Search in 2D Matrix"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.strong,{children:"Find First/Last Occurrence"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{children:"Practice Problems"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"LeetCode 33. Search in Rotated Sorted Array"}),"\n",(0,i.jsx)(r.li,{children:"LeetCode 153. Find Minimum in Rotated Sorted Array"}),"\n",(0,i.jsx)(r.li,{children:"LeetCode 162. Find Peak Element"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{children:"Key Takeaways"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Modified binary search is essential for advanced array problems."}),"\n",(0,i.jsx)(r.li,{children:"Practice with variations and discuss edge cases in interviews."}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},75595:function(e,r,n){n.d(r,{a:function(){return t}});var i=n(2265);let a=i.createContext({});function t(e){let r=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}}}]);