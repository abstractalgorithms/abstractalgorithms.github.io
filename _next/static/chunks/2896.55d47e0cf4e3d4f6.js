"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2896],{72896:function(n,e,i){i.r(e),i.d(e,{default:function(){return o},frontmatter:function(){return r},metadata:function(){return a}});var t=i(57437),s=i(75595);let r=void 0,a={id:"minstack-basics-java-20250718",slug:"minstack-basics-java",title:"Min Stack Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the min stack data structure, allowed operations, Java implementation, and see where min stacks are used in advanced algorithms.",author:"Abstract Algorithms",tags:["min-stack","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/minstack-overview-600x400.jpg"};function c(n){let e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"TLDR:"})," Min stacks support constant-time minimum retrieval along with standard stack operations, making them ideal for range minimum queries and monotonic stack problems. This guide covers min stack basics, allowed operations, Java implementation, and links to advanced posts using min stacks."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Navigation:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#what-is-a-min-stack-",children:"What is a Min Stack? \uD83D\uDE80"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#how-to-design-a-min-stack-in-java-",children:"How to Design a Min Stack in Java \uD83D\uDCBB"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#where-min-stacks-are-used-",children:"Where Min Stacks Are Used \uD83E\uDDE9"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{children:"What is a Min Stack? \uD83D\uDE80"}),"\n",(0,t.jsx)(e.p,{children:"A min stack is a stack data structure that, in addition to standard stack operations, supports retrieving the minimum element in constant time. It is implemented using an auxiliary stack to track minimums."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Purpose:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Constant-time minimum retrieval"}),"\n",(0,t.jsx)(e.li,{children:"Range minimum queries"}),"\n",(0,t.jsx)(e.li,{children:"Monotonic stack and sliding window problems"}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{children:"Allowed Operations"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"push(x):"})," Add element x to the top"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"pop():"})," Remove and return the top element"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"peek():"})," Return the top element without removing"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"getMin():"})," Return the minimum element in constant time"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"isEmpty():"})," Check if the stack is empty"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"size():"})," Return the number of elements"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{children:"How to Design a Min Stack in Java \uD83D\uDCBB"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Approach:"}),"\r\nUse two stacks: one for values and one for tracking minimums."]}),"\n",(0,t.jsx)(e.h3,{children:"Custom Min Stack Implementation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"class MinStack {\r\n    private Stack<Integer> stack = new Stack<>();\r\n    private Stack<Integer> minStack = new Stack<>();\r\n    public void push(int x) {\r\n        stack.push(x);\r\n        if (minStack.isEmpty() || x <= minStack.peek()) {\r\n            minStack.push(x);\r\n        }\r\n    }\r\n    public int pop() {\r\n        int val = stack.pop();\r\n        if (val == minStack.peek()) minStack.pop();\r\n        return val;\r\n    }\r\n    public int peek() { return stack.peek(); }\r\n    public int getMin() { return minStack.peek(); }\r\n    public boolean isEmpty() { return stack.isEmpty(); }\r\n    public int size() { return stack.size(); }\r\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{children:"Where Min Stacks Are Used \uD83E\uDDE9"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/posts/monotonic-stack-interview-analysis-java",children:"Monotonic Stack and Range Minimum Problems"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/posts/genai-mastery-series/part-4",children:"Sliding Window Minimum"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/posts/genai-mastery-series/part-9",children:"Stock Span and Histogram Problems"})}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Explain auxiliary stack usage for minimum tracking"}),"\n",(0,t.jsx)(e.li,{children:"Know time/space complexity for operations"}),"\n",(0,t.jsx)(e.li,{children:"Practice both push/pop and getMin operations"}),"\n",(0,t.jsx)(e.li,{children:"Use min stacks for range minimum and monotonic problems"}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Summary:"}),"\r\nMin stacks are essential for range minimum and monotonic stack problems. Master the basics, understand allowed operations, and practice implementing min stacks in Java to build a strong foundation."]})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},75595:function(n,e,i){i.d(e,{a:function(){return r}});var t=i(2265);let s=t.createContext({});function r(n){let e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}}}]);