"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8663],{78663:function(e,n,r){r.r(n),r.d(n,{default:function(){return d},frontmatter:function(){return t},metadata:function(){return a}});var i=r(57437),s=r(75595);let t=void 0,a={id:"deque-basics-java-20250718",slug:"deque-basics-java",title:"Deque Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the deque (double-ended queue) data structure, allowed operations, Java implementation, and see where deques are used in advanced algorithms.",author:"Abstract Algorithms",tags:["deque","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/deque-overview-600x400.jpg"};function l(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TLDR:"})," Deques (double-ended queues) allow insertion and removal from both ends, making them versatile for sliding window, palindrome, and scheduling problems. This guide covers deque basics, allowed operations, Java implementation, and links to advanced posts using deques."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#what-is-a-deque-",children:"What is a Deque? \uD83D\uDE80"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#how-to-use-deques-in-java-",children:"How to Use Deques in Java \uD83D\uDCBB"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#where-deques-are-used-",children:"Where Deques Are Used \uD83E\uDDE9"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{children:"What is a Deque? \uD83D\uDE80"}),"\n",(0,i.jsx)(n.p,{children:"A deque (double-ended queue) is a linear data structure that allows insertion and removal of elements from both the front and rear. Deques generalize both stacks and queues."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Support both stack and queue operations"}),"\n",(0,i.jsx)(n.li,{children:"Efficient sliding window and palindrome checks"}),"\n",(0,i.jsx)(n.li,{children:"Scheduling and buffering"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Allowed Operations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"addFirst(x):"})," Insert x at the front"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"addLast(x):"})," Insert x at the rear"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"removeFirst():"})," Remove and return the front element"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"removeLast():"})," Remove and return the rear element"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"peekFirst():"})," Return the front element without removing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"peekLast():"})," Return the rear element without removing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"isEmpty():"})," Check if the deque is empty"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"size():"})," Return the number of elements"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"How to Use Deques in Java \uD83D\uDCBB"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Approach:"}),"\r\nJava provides a built-in ",(0,i.jsx)(n.code,{children:"Deque"})," interface (e.g., ",(0,i.jsx)(n.code,{children:"ArrayDeque"}),"). You can also implement a deque using a doubly linked list."]}),"\n",(0,i.jsx)(n.h3,{children:"Using Java's Built-in ArrayDeque"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Deque<Integer> deque = new ArrayDeque<>();\r\ndeque.addFirst(10);\r\ndeque.addLast(20);\r\nint front = deque.removeFirst();\r\nint rear = deque.removeLast();\n"})}),"\n",(0,i.jsx)(n.h3,{children:"Custom Deque Implementation (Doubly Linked List)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'class Node {\r\n    int val;\r\n    Node prev, next;\r\n    Node(int val) { this.val = val; }\r\n}\r\nclass MyDeque {\r\n    private Node head, tail;\r\n    private int size;\r\n    public void addFirst(int x) {\r\n        Node node = new Node(x);\r\n        if (head == null) {\r\n            head = tail = node;\r\n        } else {\r\n            node.next = head;\r\n            head.prev = node;\r\n            head = node;\r\n        }\r\n        size++;\r\n    }\r\n    public void addLast(int x) {\r\n        Node node = new Node(x);\r\n        if (tail == null) {\r\n            head = tail = node;\r\n        } else {\r\n            tail.next = node;\r\n            node.prev = tail;\r\n            tail = node;\r\n        }\r\n        size++;\r\n    }\r\n    public int removeFirst() {\r\n        if (head == null) throw new RuntimeException("Deque empty");\r\n        int val = head.val;\r\n        head = head.next;\r\n        if (head != null) head.prev = null;\r\n        else tail = null;\r\n        size--;\r\n        return val;\r\n    }\r\n    public int removeLast() {\r\n        if (tail == null) throw new RuntimeException("Deque empty");\r\n        int val = tail.val;\r\n        tail = tail.prev;\r\n        if (tail != null) tail.next = null;\r\n        else head = null;\r\n        size--;\r\n        return val;\r\n    }\r\n    public boolean isEmpty() { return size == 0; }\r\n    public int size() { return size; }\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Where Deques Are Used \uD83E\uDDE9"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/genai-mastery-series/part-4",children:"Sliding Window Maximum/Minimum Problems"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/genai-mastery-series/part-6",children:"Palindrome Checking and Reordering"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/posts/genai-mastery-series/part-10",children:"Task Scheduling and Buffering"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Clarify if both ends need to be accessed"}),"\n",(0,i.jsx)(n.li,{children:"Know time/space complexity for operations"}),"\n",(0,i.jsx)(n.li,{children:"Practice both built-in and custom implementations"}),"\n",(0,i.jsx)(n.li,{children:"Use deques for sliding window and two-pointer problems"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Summary:"}),"\r\nDeques are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice using deques in Java to build a strong foundation."]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},75595:function(e,n,r){r.d(n,{a:function(){return t}});var i=r(2265);let s=i.createContext({});function t(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}}}]);