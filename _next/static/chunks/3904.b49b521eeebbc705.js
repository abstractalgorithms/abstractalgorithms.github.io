"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3904],{63904:function(e,i,r){r.r(i),r.d(i,{default:function(){return o},frontmatter:function(){return s},metadata:function(){return a}});var n=r(57437),t=r(75595);let s=void 0,a={id:"priorityqueue-basics-java-20250718",slug:"priorityqueue-basics-java",title:"Priority Queue Data Structure: Basics, Design, and Java Implementation",date:"2025-07-18",excerpt:"Learn the fundamentals of the priority queue data structure, allowed operations, Java implementation, and see where priority queues are used in advanced algorithms.",author:"Abstract Algorithms",tags:["priority-queue","data-structures","java","interview-prep"],status:"published",coverImage:"./assets/priorityqueue-overview-600x400.jpg"};function l(e){let i={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"TLDR:"})," Priority queues allow efficient retrieval of the highest (or lowest) priority element, and are used in scheduling, pathfinding, and greedy algorithms. This guide covers priority queue basics, allowed operations, Java implementation, and links to advanced posts using priority queues."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Navigation:"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"#what-is-a-priority-queue-",children:"What is a Priority Queue? \uD83D\uDE80"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"#allowed-operations",children:"Allowed Operations"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"#how-to-use-priority-queues-in-java-",children:"How to Use Priority Queues in Java \uD83D\uDCBB"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"#where-priority-queues-are-used-",children:"Where Priority Queues Are Used \uD83E\uDDE9"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"#pro-tips-for-interviews-",children:"Pro Tips for Interviews \uD83D\uDCA1"})}),"\n"]}),"\n",(0,n.jsx)(i.h2,{children:"What is a Priority Queue? \uD83D\uDE80"}),"\n",(0,n.jsx)(i.p,{children:"A priority queue is an abstract data structure where each element has a priority, and elements are served based on priority (not just insertion order). Typically implemented using a heap."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Purpose:"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Efficiently retrieve min or max element"}),"\n",(0,n.jsx)(i.li,{children:"Scheduling and event simulation"}),"\n",(0,n.jsx)(i.li,{children:"Pathfinding and greedy algorithms"}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{children:"Allowed Operations"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"offer(x):"})," Add element x with a priority"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"poll():"})," Remove and return the element with highest/lowest priority"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"peek():"})," Return the element with highest/lowest priority without removing"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"size():"})," Return the number of elements"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"isEmpty():"})," Check if the queue is empty"]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{children:"How to Use Priority Queues in Java \uD83D\uDCBB"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Approach:"}),"\r\nJava provides a built-in ",(0,n.jsx)(i.code,{children:"PriorityQueue"})," class (min-heap by default). You can also implement a custom priority queue using a heap."]}),"\n",(0,n.jsx)(i.h3,{children:"Using Java's Built-in PriorityQueue"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:"PriorityQueue<Integer> pq = new PriorityQueue<>(); // Min-heap\r\npq.offer(10);\r\nint min = pq.poll();\r\n\r\nPriorityQueue<Integer> maxPq = new PriorityQueue<>(Collections.reverseOrder()); // Max-heap\r\nmaxPq.offer(10);\r\nint max = maxPq.poll();\n"})}),"\n",(0,n.jsx)(i.h3,{children:"Custom Priority Queue Implementation (Min-Heap)"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'class MinHeapPQ {\r\n    private List<Integer> heap = new ArrayList<>();\r\n    public void offer(int x) {\r\n        heap.add(x);\r\n        int i = heap.size() - 1;\r\n        while (i > 0 && heap.get((i-1)/2) > heap.get(i)) {\r\n            Collections.swap(heap, i, (i-1)/2);\r\n            i = (i-1)/2;\r\n        }\r\n    }\r\n    public int poll() {\r\n        if (heap.isEmpty()) throw new RuntimeException("Empty");\r\n        int min = heap.get(0);\r\n        int last = heap.remove(heap.size() - 1);\r\n        if (!heap.isEmpty()) {\r\n            heap.set(0, last);\r\n            heapify(0);\r\n        }\r\n        return min;\r\n    }\r\n    public int peek() { return heap.get(0); }\r\n    public int size() { return heap.size(); }\r\n    public boolean isEmpty() { return heap.isEmpty(); }\r\n    private void heapify(int i) {\r\n        int left = 2*i+1, right = 2*i+2, smallest = i;\r\n        if (left < heap.size() && heap.get(left) < heap.get(smallest)) smallest = left;\r\n        if (right < heap.size() && heap.get(right) < heap.get(smallest)) smallest = right;\r\n        if (smallest != i) {\r\n            Collections.swap(heap, i, smallest);\r\n            heapify(smallest);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{children:"Where Priority Queues Are Used \uD83E\uDDE9"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"/posts/genai-mastery-series/part-11",children:"Dijkstra's Shortest Path Algorithm"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"/posts/genai-mastery-series/part-10",children:"Task Scheduling and Event Simulation"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"/posts/genai-mastery-series/part-9",children:"Top-K Elements and Heap Problems"})}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{children:"Pro Tips for Interviews \uD83D\uDCA1"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Clarify min-heap vs max-heap requirements"}),"\n",(0,n.jsx)(i.li,{children:"Know time/space complexity for operations"}),"\n",(0,n.jsx)(i.li,{children:"Practice both built-in and custom implementations"}),"\n",(0,n.jsx)(i.li,{children:"Use priority queues for greedy and scheduling problems"}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Summary:"}),"\r\nPriority queues are essential for many algorithms and interview problems. Master the basics, understand allowed operations, and practice using priority queues in Java to build a strong foundation."]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},75595:function(e,i,r){r.d(i,{a:function(){return s}});var n=r(2265);let t=n.createContext({});function s(e){let i=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}}}]);